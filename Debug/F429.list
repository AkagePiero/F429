
F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018f20  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da0  080190d0  080190d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be70  0801be70  0001d18c  2**0
                  CONTENTS
  4 .ARM          00000008  0801be70  0801be70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be78  0801be78  0001d18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be78  0801be78  0001ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801be7c  0801be7c  0001ce7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0801be80  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d18c  2**0
                  CONTENTS
 10 .bss          0000f298  2000018c  2000018c  0001d18c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000f424  2000f424  0001d18c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d18c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003949c  00000000  00000000  0001d1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008f10  00000000  00000000  00056658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c68  00000000  00000000  0005f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000022da  00000000  00000000  000621d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ef6  00000000  00000000  000644aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004345c  00000000  00000000  000783a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001065f5  00000000  00000000  000bb7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c1df1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c220  00000000  00000000  001c1e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001ce054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080190b8 	.word	0x080190b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000190 	.word	0x20000190
 80001ec:	080190b8 	.word	0x080190b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fdea 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f81c 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f93a 	bl	8000804 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000590:	f000 f8c2 	bl	8000718 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000594:	f000 f880 	bl	8000698 <MX_I2C2_Init>
  MX_SPI5_Init();
 8000598:	f000 f8fe 	bl	8000798 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f009 f954 	bl	8009848 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DataRCCTask */
  DataRCCTaskHandle = osThreadNew(StartDataRCCTask, NULL, &DataRCCTask_attributes);
 80005a0:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <main+0x38>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <main+0x3c>)
 80005a6:	f009 f9b0 	bl	800990a <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <main+0x40>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f009 f970 	bl	8009894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0x34>
 80005b8:	0801bc28 	.word	0x0801bc28
 80005bc:	080008fd 	.word	0x080008fd
 80005c0:	200002a8 	.word	0x200002a8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f017 fe75 	bl	80182c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000634:	2319      	movs	r3, #25
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	@ 0xa8
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f003 ff21 	bl	8004490 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f970 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f004 f982 	bl	8004980 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f959 	bl	8000938 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_I2C2_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <MX_I2C2_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_I2C2_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <MX_I2C2_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_I2C2_Init+0x74>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_I2C2_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_I2C2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d4:	480d      	ldr	r0, [pc, #52]	@ (800070c <MX_I2C2_Init+0x74>)
 80006d6:	f002 fa9f 	bl	8002c18 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f92a 	bl	8000938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4809      	ldr	r0, [pc, #36]	@ (800070c <MX_I2C2_Init+0x74>)
 80006e8:	f002 fbda 	bl	8002ea0 <HAL_I2CEx_ConfigAnalogFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f000 f921 	bl	8000938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_I2C2_Init+0x74>)
 80006fa:	f002 fc0d 	bl	8002f18 <HAL_I2CEx_ConfigDigitalFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000704:	f000 f918 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200001a8 	.word	0x200001a8
 8000710:	40005800 	.word	0x40005800
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_I2C3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_I2C3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_I2C3_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_I2C3_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_I2C3_Init+0x74>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_I2C3_Init+0x74>)
 8000756:	f002 fa5f 	bl	8002c18 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f8ea 	bl	8000938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_I2C3_Init+0x74>)
 8000768:	f002 fb9a 	bl	8002ea0 <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 f8e1 	bl	8000938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_I2C3_Init+0x74>)
 800077a:	f002 fbcd 	bl	8002f18 <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 f8d8 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001fc 	.word	0x200001fc
 8000790:	40005c00 	.word	0x40005c00
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_SPI5_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_SPI5_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_SPI5_Init+0x64>)
 80007ea:	f004 fac7 	bl	8004d7c <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f8a0 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000250 	.word	0x20000250
 8000800:	40015000 	.word	0x40015000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	@ 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a34      	ldr	r2, [pc, #208]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a2d      	ldr	r2, [pc, #180]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_GPIO_Init+0xf0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <MX_GPIO_Init+0xf4>)
 80008ca:	f002 f98b 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_GPIO_Init+0xf4>)
 80008e8:	f001 ffd0 	bl	800288c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3730      	adds	r7, #48	@ 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40021400 	.word	0x40021400

080008fc <StartDataRCCTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDataRCCTask */
void StartDataRCCTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000904:	f016 fe84 	bl	8017610 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f006 f9bc 	bl	8006c84 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f009 f88e 	bl	8009a2e <osDelay>
 8000912:	e7fb      	b.n	800090c <StartDataRCCTask+0x10>

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fc3b 	bl	80011a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001400 	.word	0x40001400

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <HAL_MspInit+0x54>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_MspInit+0x54>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fd05 	bl	8001398 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a32      	ldr	r2, [pc, #200]	@ (8000a84 <HAL_I2C_MspInit+0xe8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a30      	ldr	r2, [pc, #192]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009da:	2330      	movs	r3, #48	@ 0x30
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009ea:	2304      	movs	r3, #4
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4825      	ldr	r0, [pc, #148]	@ (8000a8c <HAL_I2C_MspInit+0xf0>)
 80009f6:	f001 ff49 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a16:	e031      	b.n	8000a7c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <HAL_I2C_MspInit+0xf4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12c      	bne.n	8000a7c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a3e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a50:	2304      	movs	r3, #4
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <HAL_I2C_MspInit+0xf0>)
 8000a5c:	f001 ff16 	bl	800288c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_I2C_MspInit+0xec>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3730      	adds	r7, #48	@ 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40005800 	.word	0x40005800
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40021c00 	.word	0x40021c00
 8000a90:	40005c00 	.word	0x40005c00

08000a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_SPI_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12c      	bne.n	8000b10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_SPI_MspInit+0x88>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ac0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <HAL_SPI_MspInit+0x88>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000aee:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000b00:	2305      	movs	r3, #5
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000b0c:	f001 febe 	bl	800288c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40015000 	.word	0x40015000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40021400 	.word	0x40021400

08000b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 f8dc 	bl	8004d18 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b6a:	f004 f8c1 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8000b6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b72:	f004 f8bd 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8000b76:	4603      	mov	r3, r0
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_InitTick+0xe8>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0c9b      	lsrs	r3, r3, #18
 8000b86:	3b01      	subs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <HAL_InitTick+0xf0>)
 8000b8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b96:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b98:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_InitTick+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_InitTick+0xec>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bb2:	f004 f96c 	bl	8004e8e <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11b      	bne.n	8000bfc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000bc4:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bc6:	f004 f9bb 	bl	8004f40 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d111      	bne.n	8000bfc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bd8:	2037      	movs	r0, #55	@ 0x37
 8000bda:	f000 fbf9 	bl	80013d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d808      	bhi.n	8000bf6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2037      	movs	r0, #55	@ 0x37
 8000bea:	f000 fbd5 	bl	8001398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xf4>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e002      	b.n	8000bfc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3738      	adds	r7, #56	@ 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	20000764 	.word	0x20000764
 8000c14:	40001400 	.word	0x40001400
 8000c18:	20000004 	.word	0x20000004

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <TIM7_IRQHandler+0x10>)
 8000c5a:	f004 f9e1 	bl	8005020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000764 	.word	0x20000764

08000c68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <ETH_IRQHandler+0x10>)
 8000c6e:	f000 ff37 	bl	8001ae0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200052f8 	.word	0x200052f8

08000c7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <OTG_FS_IRQHandler+0x10>)
 8000c82:	f002 fad8 	bl	8003236 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000ebac 	.word	0x2000ebac

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <_kill+0x20>)
 8000cac:	2216      	movs	r2, #22
 8000cae:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	2000f414 	.word	0x2000f414

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe5 	bl	8000ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd6:	bf00      	nop
 8000cd8:	e7fd      	b.n	8000cd6 <_exit+0x12>

08000cda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00a      	b.n	8000d02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cec:	f3af 8000 	nop.w
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60ba      	str	r2, [r7, #8]
 8000cf8:	b2ca      	uxtb	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbf0      	blt.n	8000cec <_read+0x12>
  }

  return len;
 8000d0a:	687b      	ldr	r3, [r7, #4]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e009      	b.n	8000d3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	60ba      	str	r2, [r7, #8]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbf1      	blt.n	8000d26 <_write+0x12>
  }
  return len;
 8000d42:	687b      	ldr	r3, [r7, #4]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_close>:

int _close(int file)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_isatty>:

int _isatty(int file)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b085      	sub	sp, #20
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d205      	bcs.n	8000df0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <_sbrk+0x6c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20030000 	.word	0x20030000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200007ac 	.word	0x200007ac
 8000e1c:	2000f428 	.word	0x2000f428
 8000e20:	2000f414 	.word	0x2000f414

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	@ (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	@ (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f017 fac9 	bl	801840c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fb81 	bl	8000580 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000e8c:	0801be80 	.word	0x0801be80
  ldr r2, =_sbss
 8000e90:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000e94:	2000f424 	.word	0x2000f424

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>

08000e9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <LAN8742_RegisterBusIO+0x28>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <LAN8742_RegisterBusIO+0x28>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <LAN8742_RegisterBusIO+0x28>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e014      	b.n	8000ef2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d17c      	bne.n	8001018 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e01c      	b.n	8000f72 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	2112      	movs	r1, #18
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	4798      	blx	r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da03      	bge.n	8000f54 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f4c:	f06f 0304 	mvn.w	r3, #4
 8000f50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000f52:	e00b      	b.n	8000f6c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d105      	bne.n	8000f6c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
         break;
 8000f6a:	e005      	b.n	8000f78 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b1f      	cmp	r3, #31
 8000f76:	d9df      	bls.n	8000f38 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d902      	bls.n	8000f86 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f80:	f06f 0302 	mvn.w	r3, #2
 8000f84:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d145      	bne.n	8001018 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4798      	blx	r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db37      	blt.n	8001012 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6810      	ldr	r0, [r2, #0]
 8000faa:	f107 0208 	add.w	r2, r7, #8
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4798      	blx	r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db28      	blt.n	800100a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4798      	blx	r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fc2:	e01c      	b.n	8000ffe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4798      	blx	r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fd6:	d80e      	bhi.n	8000ff6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6810      	ldr	r0, [r2, #0]
 8000fe0:	f107 0208 	add.w	r2, r7, #8
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4798      	blx	r3
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da07      	bge.n	8000ffe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fee:	f06f 0304 	mvn.w	r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
                 break;
 8000ff4:	e010      	b.n	8001018 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000ff6:	f06f 0301 	mvn.w	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
               break;
 8000ffc:	e00c      	b.n	8001018 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1dd      	bne.n	8000fc4 <LAN8742_Init+0xc6>
 8001008:	e006      	b.n	8001018 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800100a:	f06f 0304 	mvn.w	r3, #4
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e002      	b.n	8001018 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001012:	f06f 0303 	mvn.w	r3, #3
 8001016:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d112      	bne.n	8001044 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4798      	blx	r3
 8001024:	4603      	mov	r3, r0
 8001026:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001028:	bf00      	nop
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4798      	blx	r3
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800103c:	d9f5      	bls.n	800102a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001044:	693b      	ldr	r3, [r7, #16]
 }
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6810      	ldr	r0, [r2, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	2101      	movs	r1, #1
 8001068:	4798      	blx	r3
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da02      	bge.n	8001076 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001070:	f06f 0304 	mvn.w	r3, #4
 8001074:	e06e      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6810      	ldr	r0, [r2, #0]
 800107e:	f107 020c 	add.w	r2, r7, #12
 8001082:	2101      	movs	r1, #1
 8001084:	4798      	blx	r3
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	da02      	bge.n	8001092 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800108c:	f06f 0304 	mvn.w	r3, #4
 8001090:	e060      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800109c:	2301      	movs	r3, #1
 800109e:	e059      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6810      	ldr	r0, [r2, #0]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	2100      	movs	r1, #0
 80010ae:	4798      	blx	r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da02      	bge.n	80010bc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010b6:	f06f 0304 	mvn.w	r3, #4
 80010ba:	e04b      	b.n	8001154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11b      	bne.n	80010fe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <LAN8742_GetLinkState+0x90>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010da:	2302      	movs	r3, #2
 80010dc:	e03a      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e033      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010f6:	2304      	movs	r3, #4
 80010f8:	e02c      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010fa:	2305      	movs	r3, #5
 80010fc:	e02a      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6810      	ldr	r0, [r2, #0]
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	211f      	movs	r1, #31
 800110c:	4798      	blx	r3
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	da02      	bge.n	800111a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001114:	f06f 0304 	mvn.w	r3, #4
 8001118:	e01c      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001124:	2306      	movs	r3, #6
 8001126:	e015      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 031c 	and.w	r3, r3, #28
 800112e:	2b18      	cmp	r3, #24
 8001130:	d101      	bne.n	8001136 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001132:	2302      	movs	r3, #2
 8001134:	e00e      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 031c 	and.w	r3, r3, #28
 800113c:	2b08      	cmp	r3, #8
 800113e:	d101      	bne.n	8001144 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001140:	2303      	movs	r3, #3
 8001142:	e007      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 031c 	and.w	r3, r3, #28
 800114a:	2b14      	cmp	r3, #20
 800114c:	d101      	bne.n	8001152 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800114e:	2304      	movs	r3, #4
 8001150:	e000      	b.n	8001154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001152:	2305      	movs	r3, #5
    }				
  }
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	@ (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f8fc 	bl	8001382 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	200f      	movs	r0, #15
 800118c:	f7ff fcca 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fbd8 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	200007b0 	.word	0x200007b0

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200007b0 	.word	0x200007b0

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	@ (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff4c 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013aa:	f7ff ff61 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f7ff ffb1 	bl	800131c <NVIC_EncodePriority>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff80 	bl	80012c8 <__NVIC_SetPriority>
}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff54 	bl	800128c <__NVIC_EnableIRQ>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e06c      	b.n	80014d8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001404:	2b00      	cmp	r3, #0
 8001406:	d106      	bne.n	8001416 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2223      	movs	r2, #35	@ 0x23
 800140c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f006 f82f 	bl	8007474 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <HAL_ETH_Init+0xf4>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a30      	ldr	r2, [pc, #192]	@ (80014e0 <HAL_ETH_Init+0xf4>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <HAL_ETH_Init+0xf4>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001432:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <HAL_ETH_Init+0xf8>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a2b      	ldr	r2, [pc, #172]	@ (80014e4 <HAL_ETH_Init+0xf8>)
 8001438:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800143c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800143e:	4b29      	ldr	r3, [pc, #164]	@ (80014e4 <HAL_ETH_Init+0xf8>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4927      	ldr	r1, [pc, #156]	@ (80014e4 <HAL_ETH_Init+0xf8>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800144c:	4b25      	ldr	r3, [pc, #148]	@ (80014e4 <HAL_ETH_Init+0xf8>)
 800144e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001468:	f7ff feae 	bl	80011c8 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800146e:	e011      	b.n	8001494 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001470:	f7ff feaa 	bl	80011c8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800147e:	d909      	bls.n	8001494 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	22e0      	movs	r2, #224	@ 0xe0
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e021      	b.n	80014d8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e4      	bne.n	8001470 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 ff4a 	bl	8002340 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fff1 	bl	8002494 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 f847 	bl	8002546 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	461a      	mov	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 ffaf 	bl	8002424 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2210      	movs	r2, #16
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800

080014e8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d17f      	bne.n	80015fa <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2223      	movs	r2, #35	@ 0x23
 80014fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001516:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001528:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800152c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001540:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2204      	movs	r2, #4
 8001548:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f9f8 	bl	8001940 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0208 	orr.w	r2, r2, #8
 800155e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff fe39 	bl	80011e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0204 	orr.w	r2, r2, #4
 8001584:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fe26 	bl	80011e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fd70 	bl	8002082 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015b8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015d0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80015e4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80015e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ec:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2223      	movs	r2, #35	@ 0x23
 80015f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
  }
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001612:	2b23      	cmp	r3, #35	@ 0x23
 8001614:	d170      	bne.n	80016f8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2223      	movs	r2, #35	@ 0x23
 800161a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001630:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001634:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001638:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800164c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001650:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f023 0302 	bic.w	r3, r3, #2
 8001664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001668:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0204 	bic.w	r2, r2, #4
 8001678:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fdac 	bl	80011e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fcf6 	bl	8002082 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0208 	bic.w	r2, r2, #8
 80016a4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fd96 	bl	80011e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00e      	b.n	80016e0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	3212      	adds	r2, #18
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d9ed      	bls.n	80016c2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2210      	movs	r2, #16
 80016f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e045      	b.n	80017b2 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800172c:	2b23      	cmp	r3, #35	@ 0x23
 800172e:	d13f      	bne.n	80017b0 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001738:	2201      	movs	r2, #1
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 ff6f 	bl	8002620 <ETH_Prepare_Tx_Descriptors>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174e:	f043 0202 	orr.w	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e02a      	b.n	80017b2 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800175c:	f3bf 8f4f 	dsb	sy
}
 8001760:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	2b03      	cmp	r3, #3
 8001772:	d904      	bls.n	800177e <HAL_ETH_Transmit_IT+0x7c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	1f1a      	subs	r2, r3, #4
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001798:	461a      	mov	r2, r3
 800179a:	2304      	movs	r3, #4
 800179c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a6:	461a      	mov	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
  }
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b088      	sub	sp, #32
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0a8      	b.n	8001938 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ec:	2b23      	cmp	r3, #35	@ 0x23
 80017ee:	d001      	beq.n	80017f4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0a1      	b.n	8001938 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	3212      	adds	r2, #18
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800180a:	f1c3 0304 	rsb	r3, r3, #4
 800180e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001810:	e06a      	b.n	80018e8 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <HAL_ETH_ReadData+0x88>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d040      	beq.n	80018c4 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001876:	3b04      	subs	r3, #4
 8001878:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800189e:	461a      	mov	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f005 ffc0 	bl	8007828 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	441a      	add	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d902      	bls.n	80018d6 <HAL_ETH_ReadData+0x11c>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3b04      	subs	r3, #4
 80018d4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	3212      	adds	r2, #18
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db06      	blt.n	80018fe <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d202      	bcs.n	80018fe <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d089      	beq.n	8001812 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	441a      	add	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f814 	bl	8001940 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d108      	bne.n	8001936 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800194c:	2301      	movs	r3, #1
 800194e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001954:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	3212      	adds	r2, #18
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001966:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001968:	e040      	b.n	80019ec <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d112      	bne.n	8001998 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4618      	mov	r0, r3
 8001978:	f005 ff26 	bl	80077c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	74fb      	strb	r3, [r7, #19]
 8001986:	e007      	b.n	8001998 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	461a      	mov	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001998:	7cfb      	ldrb	r3, [r7, #19]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d026      	beq.n	80019ec <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <ETH_UpdateDescriptor+0xe4>)
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	e003      	b.n	80019b6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80019b4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019b6:	f3bf 8f5f 	dmb	sy
}
 80019ba:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d902      	bls.n	80019da <ETH_UpdateDescriptor+0x9a>
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	3b04      	subs	r3, #4
 80019d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	3212      	adds	r2, #18
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <ETH_UpdateDescriptor+0xb8>
 80019f2:	7cfb      	ldrb	r3, [r7, #19]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1b8      	bne.n	800196a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d00c      	beq.n	8001a1c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	80004600 	.word	0x80004600

08001a28 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3318      	adds	r3, #24
 8001a34:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a46:	e03f      	b.n	8001ac8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	3304      	adds	r3, #4
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3301      	adds	r3, #1
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d028      	beq.n	8001ac8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68d9      	ldr	r1, [r3, #12]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db1b      	blt.n	8001ac4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	3304      	adds	r3, #4
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 ff05 	bl	80078a8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ac2:	e001      	b.n	8001ac8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_ETH_ReleaseTxPacket+0xac>
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1b9      	bne.n	8001a48 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af6:	2b40      	cmp	r3, #64	@ 0x40
 8001af8:	d112      	bne.n	8001b20 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b08:	2b40      	cmp	r3, #64	@ 0x40
 8001b0a:	d109      	bne.n	8001b20 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b50      	ldr	r3, [pc, #320]	@ (8001c58 <HAL_ETH_IRQHandler+0x178>)
 8001b18:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f005 f9fe 	bl	8006f1c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d113      	bne.n	8001b5a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10a      	bne.n	8001b5a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001b52:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f005 f9f1 	bl	8006f3c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b6c:	d14c      	bne.n	8001c08 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b80:	d142      	bne.n	8001c08 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b88:	f043 0208 	orr.w	r2, r3, #8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ba4:	d11a      	bne.n	8001bdc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_ETH_IRQHandler+0x17c>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001bcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bd0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	22e0      	movs	r2, #224	@ 0xe0
 8001bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001bda:	e012      	b.n	8001c02 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001c00:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f005 f9aa 	bl	8006f5c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d10e      	bne.n	8001c34 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f81c 	bl	8001c64 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001c34:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_ETH_IRQHandler+0x180>)
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <HAL_ETH_IRQHandler+0x180>)
 8001c42:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c46:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f815 	bl	8001c78 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	00010040 	.word	0x00010040
 8001c5c:	007e2000 	.word	0x007e2000
 8001c60:	40013c00 	.word	0x40013c00

08001c64 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 031c 	and.w	r3, r3, #28
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	02db      	lsls	r3, r3, #11
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0302 	bic.w	r3, r3, #2
 8001cca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001cdc:	f7ff fa74 	bl	80011c8 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ce2:	e00d      	b.n	8001d00 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ce4:	f7ff fa70 	bl	80011c8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf2:	d301      	bcc.n	8001cf8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e010      	b.n	8001d1a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ec      	bne.n	8001ce4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 031c 	and.w	r3, r3, #28
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	019b      	lsls	r3, r3, #6
 8001d50:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d7c:	f7ff fa24 	bl	80011c8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d82:	e00d      	b.n	8001da0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d84:	f7ff fa20 	bl	80011c8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d92:	d301      	bcc.n	8001d98 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e009      	b.n	8001dac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ec      	bne.n	8001d84 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d9      	b.n	8001f7c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf14      	ite	ne
 8001f6c:	2301      	movne	r3, #1
 8001f6e:	2300      	moveq	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e00b      	b.n	8001fb4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f88f 	bl	80020cc <ETH_SetMACConfig>

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 031c 	bic.w	r3, r3, #28
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fd4:	f002 fe80 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8001fd8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_ETH_SetMDIOClockRange+0x38>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d804      	bhi.n	8001ff4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	e027      	b.n	8002044 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4a18      	ldr	r2, [pc, #96]	@ (8002058 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d908      	bls.n	800200e <HAL_ETH_SetMDIOClockRange+0x52>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4a17      	ldr	r2, [pc, #92]	@ (800205c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d204      	bcs.n	800200e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f043 030c 	orr.w	r3, r3, #12
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e01a      	b.n	8002044 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d303      	bcc.n	800201e <HAL_ETH_SetMDIOClockRange+0x62>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d911      	bls.n	8002042 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4a0f      	ldr	r2, [pc, #60]	@ (8002060 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d908      	bls.n	8002038 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4a0e      	ldr	r2, [pc, #56]	@ (8002064 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d804      	bhi.n	8002038 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e005      	b.n	8002044 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e000      	b.n	8002044 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002042:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	611a      	str	r2, [r3, #16]
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	01312cff 	.word	0x01312cff
 8002058:	02160ebf 	.word	0x02160ebf
 800205c:	03938700 	.word	0x03938700
 8002060:	05f5e0ff 	.word	0x05f5e0ff
 8002064:	08f0d17f 	.word	0x08f0d17f

08002068 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff f894 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020c2:	6193      	str	r3, [r2, #24]
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <ETH_SetMACConfig+0x15c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	7c1b      	ldrb	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <ETH_SetMACConfig+0x28>
 80020ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020f2:	e000      	b.n	80020f6 <ETH_SetMACConfig+0x2a>
 80020f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	7c5b      	ldrb	r3, [r3, #17]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <ETH_SetMACConfig+0x38>
 80020fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002102:	e000      	b.n	8002106 <ETH_SetMACConfig+0x3a>
 8002104:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002106:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800210c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7fdb      	ldrb	r3, [r3, #31]
 8002112:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002114:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800211a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	7f92      	ldrb	r2, [r2, #30]
 8002120:	2a00      	cmp	r2, #0
 8002122:	d102      	bne.n	800212a <ETH_SetMACConfig+0x5e>
 8002124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002128:	e000      	b.n	800212c <ETH_SetMACConfig+0x60>
 800212a:	2200      	movs	r2, #0
                        macconf->Speed |
 800212c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	7f1b      	ldrb	r3, [r3, #28]
 8002132:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002134:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800213a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	791b      	ldrb	r3, [r3, #4]
 8002140:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002142:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	f892 2020 	ldrb.w	r2, [r2, #32]
 800214a:	2a00      	cmp	r2, #0
 800214c:	d102      	bne.n	8002154 <ETH_SetMACConfig+0x88>
 800214e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002152:	e000      	b.n	8002156 <ETH_SetMACConfig+0x8a>
 8002154:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002156:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	7bdb      	ldrb	r3, [r3, #15]
 800215c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800215e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002164:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800216c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800216e:	4313      	orrs	r3, r2
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff f82a 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d101      	bne.n	80021ba <ETH_SetMACConfig+0xee>
 80021b6:	2280      	movs	r2, #128	@ 0x80
 80021b8:	e000      	b.n	80021bc <ETH_SetMACConfig+0xf0>
 80021ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80021ca:	2a01      	cmp	r2, #1
 80021cc:	d101      	bne.n	80021d2 <ETH_SetMACConfig+0x106>
 80021ce:	2208      	movs	r2, #8
 80021d0:	e000      	b.n	80021d4 <ETH_SetMACConfig+0x108>
 80021d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80021dc:	2a01      	cmp	r2, #1
 80021de:	d101      	bne.n	80021e4 <ETH_SetMACConfig+0x118>
 80021e0:	2204      	movs	r2, #4
 80021e2:	e000      	b.n	80021e6 <ETH_SetMACConfig+0x11a>
 80021e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d101      	bne.n	80021f6 <ETH_SetMACConfig+0x12a>
 80021f2:	2202      	movs	r2, #2
 80021f4:	e000      	b.n	80021f8 <ETH_SetMACConfig+0x12c>
 80021f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021f8:	4313      	orrs	r3, r2
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe ffe5 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	ff20810f 	.word	0xff20810f

0800222c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <ETH_SetDMAConfig+0x110>)
 8002246:	4013      	ands	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7b1b      	ldrb	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <ETH_SetDMAConfig+0x2c>
 8002252:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002256:	e000      	b.n	800225a <ETH_SetDMAConfig+0x2e>
 8002258:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7b5b      	ldrb	r3, [r3, #13]
 800225e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002260:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	7f52      	ldrb	r2, [r2, #29]
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <ETH_SetDMAConfig+0x44>
 800226a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800226e:	e000      	b.n	8002272 <ETH_SetDMAConfig+0x46>
 8002270:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002272:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	7b9b      	ldrb	r3, [r3, #14]
 8002278:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800227a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002280:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	7f1b      	ldrb	r3, [r3, #28]
 8002286:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002288:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7f9b      	ldrb	r3, [r3, #30]
 800228e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002290:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002296:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800229e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe ff8c 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d0:	461a      	mov	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	791b      	ldrb	r3, [r3, #4]
 80022da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002304:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800230e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002312:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002320:	2001      	movs	r0, #1
 8002322:	f7fe ff5d 	bl	80011e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	f8de3f23 	.word	0xf8de3f23

08002340 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0a6      	sub	sp, #152	@ 0x98
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002354:	2300      	movs	r3, #0
 8002356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800237c:	2300      	movs	r3, #0
 800237e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002386:	2300      	movs	r3, #0
 8002388:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fe86 	bl	80020cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002400:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002410:	f107 0308 	add.w	r3, r7, #8
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff08 	bl	800222c <ETH_SetDMAConfig>
}
 800241c:	bf00      	nop
 800241e:	3798      	adds	r7, #152	@ 0x98
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3305      	adds	r3, #5
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	3204      	adds	r2, #4
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <ETH_MACAddressConfig+0x68>)
 8002446:	4413      	add	r3, r2
 8002448:	461a      	mov	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3303      	adds	r3, #3
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	061a      	lsls	r2, r3, #24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3302      	adds	r3, #2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3301      	adds	r3, #1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	4313      	orrs	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <ETH_MACAddressConfig+0x6c>)
 8002476:	4413      	add	r3, r2
 8002478:	461a      	mov	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6013      	str	r3, [r2, #0]
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40028040 	.word	0x40028040
 8002490:	40028044 	.word	0x40028044

08002494 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e03e      	b.n	8002520 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68d9      	ldr	r1, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	3206      	adds	r2, #6
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d80c      	bhi.n	8002504 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	461a      	mov	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	e004      	b.n	800250e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d9bd      	bls.n	80024a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002538:	611a      	str	r2, [r3, #16]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e046      	b.n	80025e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6919      	ldr	r1, [r3, #16]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002590:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002598:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	3212      	adds	r2, #18
 80025ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d80c      	bhi.n	80025d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6919      	ldr	r1, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	e004      	b.n	80025dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3301      	adds	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d9b5      	bls.n	8002554 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002612:	60da      	str	r2, [r3, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002620:	b480      	push	{r7}
 8002622:	b08d      	sub	sp, #52	@ 0x34
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3318      	adds	r3, #24
 8002630:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800265e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002662:	d007      	beq.n	8002674 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002668:	3304      	adds	r3, #4
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002674:	2302      	movs	r3, #2
 8002676:	e103      	b.n	8002880 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	3301      	adds	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002690:	f023 031f 	bic.w	r3, r3, #31
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	6852      	ldr	r2, [r2, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80026fe:	f3bf 8f5f 	dmb	sy
}
 8002702:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002710:	e084      	b.n	800281c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e005      	b.n	800273e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002740:	3301      	adds	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002746:	2b03      	cmp	r3, #3
 8002748:	d902      	bls.n	8002750 <ETH_Prepare_Tx_Descriptors+0x130>
 800274a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274c:	3b04      	subs	r3, #4
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800276e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002772:	d007      	beq.n	8002784 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	3304      	adds	r3, #4
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d029      	beq.n	80027d8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002796:	e019      	b.n	80027cc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002798:	f3bf 8f5f 	dmb	sy
}
 800279c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ac:	3301      	adds	r3, #1
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d902      	bls.n	80027bc <ETH_Prepare_Tx_Descriptors+0x19c>
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	3b04      	subs	r3, #4
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	3301      	adds	r3, #1
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3e1      	bcc.n	8002798 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80027d4:	2302      	movs	r3, #2
 80027d6:	e053      	b.n	8002880 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	3301      	adds	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80027f6:	f023 031f 	bic.w	r3, r3, #31
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	6852      	ldr	r2, [r2, #4]
 80027fe:	431a      	orrs	r2, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3301      	adds	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800280a:	f3bf 8f5f 	dmb	sy
}
 800280e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f af76 	bne.w	8002712 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e005      	b.n	8002846 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002856:	6979      	ldr	r1, [r7, #20]
 8002858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285a:	3304      	adds	r3, #4
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002866:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800287a:	b662      	cpsie	i
}
 800287c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3734      	adds	r7, #52	@ 0x34
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e177      	b.n	8002b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8166 	bne.w	8002b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d130      	bne.n	8002940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d017      	beq.n	800297c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d123      	bne.n	80029d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80c0 	beq.w	8002b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <HAL_GPIO_Init+0x324>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4a65      	ldr	r2, [pc, #404]	@ (8002bb0 <HAL_GPIO_Init+0x324>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a22:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <HAL_GPIO_Init+0x324>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2e:	4a61      	ldr	r2, [pc, #388]	@ (8002bb4 <HAL_GPIO_Init+0x328>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_GPIO_Init+0x32c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d037      	beq.n	8002aca <HAL_GPIO_Init+0x23e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a57      	ldr	r2, [pc, #348]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_GPIO_Init+0x23a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a56      	ldr	r2, [pc, #344]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02b      	beq.n	8002ac2 <HAL_GPIO_Init+0x236>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a55      	ldr	r2, [pc, #340]	@ (8002bc4 <HAL_GPIO_Init+0x338>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d025      	beq.n	8002abe <HAL_GPIO_Init+0x232>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a54      	ldr	r2, [pc, #336]	@ (8002bc8 <HAL_GPIO_Init+0x33c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01f      	beq.n	8002aba <HAL_GPIO_Init+0x22e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a53      	ldr	r2, [pc, #332]	@ (8002bcc <HAL_GPIO_Init+0x340>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d019      	beq.n	8002ab6 <HAL_GPIO_Init+0x22a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a52      	ldr	r2, [pc, #328]	@ (8002bd0 <HAL_GPIO_Init+0x344>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_GPIO_Init+0x226>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a51      	ldr	r2, [pc, #324]	@ (8002bd4 <HAL_GPIO_Init+0x348>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_GPIO_Init+0x222>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a50      	ldr	r2, [pc, #320]	@ (8002bd8 <HAL_GPIO_Init+0x34c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <HAL_GPIO_Init+0x21e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_GPIO_Init+0x21a>
 8002aa2:	2309      	movs	r3, #9
 8002aa4:	e012      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002aa6:	230a      	movs	r3, #10
 8002aa8:	e010      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	e00e      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002aae:	2307      	movs	r3, #7
 8002ab0:	e00c      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	e00a      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x240>
 8002aca:	2300      	movs	r3, #0
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_GPIO_Init+0x328>)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b3d      	ldr	r3, [pc, #244]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0e:	4a34      	ldr	r2, [pc, #208]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b14:	4b32      	ldr	r3, [pc, #200]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b38:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b3e:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b62:	4a1f      	ldr	r2, [pc, #124]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b8c:	4a14      	ldr	r2, [pc, #80]	@ (8002be0 <HAL_GPIO_Init+0x354>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	f67f ae84 	bls.w	80028a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40021400 	.word	0x40021400
 8002bd0:	40021800 	.word	0x40021800
 8002bd4:	40021c00 	.word	0x40021c00
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40022400 	.word	0x40022400
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e12b      	b.n	8002e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd feac 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	@ 0x24
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f002 f838 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a81      	ldr	r2, [pc, #516]	@ (8002e8c <HAL_I2C_Init+0x274>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d807      	bhi.n	8002c9c <HAL_I2C_Init+0x84>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a80      	ldr	r2, [pc, #512]	@ (8002e90 <HAL_I2C_Init+0x278>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf94      	ite	ls
 8002c94:	2301      	movls	r3, #1
 8002c96:	2300      	movhi	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e006      	b.n	8002caa <HAL_I2C_Init+0x92>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e94 <HAL_I2C_Init+0x27c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0e7      	b.n	8002e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a78      	ldr	r2, [pc, #480]	@ (8002e98 <HAL_I2C_Init+0x280>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e8c <HAL_I2C_Init+0x274>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d802      	bhi.n	8002cec <HAL_I2C_Init+0xd4>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	e009      	b.n	8002d00 <HAL_I2C_Init+0xe8>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a69      	ldr	r2, [pc, #420]	@ (8002e9c <HAL_I2C_Init+0x284>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	3301      	adds	r3, #1
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	495c      	ldr	r1, [pc, #368]	@ (8002e8c <HAL_I2C_Init+0x274>)
 8002d1c:	428b      	cmp	r3, r1
 8002d1e:	d819      	bhi.n	8002d54 <HAL_I2C_Init+0x13c>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e59      	subs	r1, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2e:	1c59      	adds	r1, r3, #1
 8002d30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d34:	400b      	ands	r3, r1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_I2C_Init+0x138>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1e59      	subs	r1, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	e051      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e04f      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_I2C_Init+0x168>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e012      	b.n	8002da6 <HAL_I2C_Init+0x18e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Init+0x196>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e022      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10e      	bne.n	8002dd4 <HAL_I2C_Init+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e58      	subs	r0, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	440b      	add	r3, r1
 8002dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	0099      	lsls	r1, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6809      	ldr	r1, [r1, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6911      	ldr	r1, [r2, #16]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	000186a0 	.word	0x000186a0
 8002e90:	001e847f 	.word	0x001e847f
 8002e94:	003d08ff 	.word	0x003d08ff
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	10624dd3 	.word	0x10624dd3

08002ea0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d129      	bne.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2224      	movs	r2, #36	@ 0x24
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0210 	bic.w	r2, r2, #16
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d12a      	bne.n	8002f88 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2224      	movs	r2, #36	@ 0x24
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f52:	89fb      	ldrh	r3, [r7, #14]
 8002f54:	f023 030f 	bic.w	r3, r3, #15
 8002f58:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	89fb      	ldrh	r3, [r7, #14]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	89fa      	ldrh	r2, [r7, #14]
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f98:	b08f      	sub	sp, #60	@ 0x3c
 8002f9a:	af0a      	add	r7, sp, #40	@ 0x28
 8002f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e10f      	b.n	80031c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f014 fd04 	bl	80179d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 fb13 	bl	8005612 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	687e      	ldr	r6, [r7, #4]
 8002ff4:	466d      	mov	r5, sp
 8002ff6:	f106 0410 	add.w	r4, r6, #16
 8002ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003006:	e885 0003 	stmia.w	r5, {r0, r1}
 800300a:	1d33      	adds	r3, r6, #4
 800300c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	f002 f9ea 	bl	80053e8 <USB_CoreInit>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0d0      	b.n	80031c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f002 fb01 	bl	8005634 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	e04a      	b.n	80030ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	333d      	adds	r3, #61	@ 0x3d
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	333c      	adds	r3, #60	@ 0x3c
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	b298      	uxth	r0, r3
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3344      	adds	r3, #68	@ 0x44
 8003074:	4602      	mov	r2, r0
 8003076:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3340      	adds	r3, #64	@ 0x40
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3348      	adds	r3, #72	@ 0x48
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	334c      	adds	r3, #76	@ 0x4c
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3354      	adds	r3, #84	@ 0x54
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	3301      	adds	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3af      	bcc.n	8003038 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e044      	b.n	8003168 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	3301      	adds	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d3b5      	bcc.n	80030de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	687e      	ldr	r6, [r7, #4]
 800317a:	466d      	mov	r5, sp
 800317c:	f106 0410 	add.w	r4, r6, #16
 8003180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003188:	e894 0003 	ldmia.w	r4, {r0, r1}
 800318c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003190:	1d33      	adds	r3, r6, #4
 8003192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003194:	6838      	ldr	r0, [r7, #0]
 8003196:	f002 fa99 	bl	80056cc <USB_DevInit>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e00d      	b.n	80031c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fbe8 	bl	8006996 <USB_DevDisconnect>

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_PCD_Start+0x1c>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e020      	b.n	800322e <HAL_PCD_Start+0x5e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d109      	bne.n	8003210 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003200:	2b01      	cmp	r3, #1
 8003202:	d005      	beq.n	8003210 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f002 f9eb 	bl	80055f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fb98 	bl	8006954 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003236:	b590      	push	{r4, r7, lr}
 8003238:	b08d      	sub	sp, #52	@ 0x34
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fc56 	bl	8006afe <USB_GetMode>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 848a 	bne.w	8003b6e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fbba 	bl	80069d8 <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8480 	beq.w	8003b6c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f003 fba7 	bl	80069d8 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d107      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f002 0202 	and.w	r2, r2, #2
 80032a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 fb95 	bl	80069d8 <USB_ReadInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d161      	bne.n	800337c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0210 	bic.w	r2, r2, #16
 80032c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	0c5b      	lsrs	r3, r3, #17
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d124      	bne.n	800333e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d035      	beq.n	800336c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800330a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	6a38      	ldr	r0, [r7, #32]
 8003314:	f003 f9cc 	bl	80066b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003324:	441a      	add	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003336:	441a      	add	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
 800333c:	e016      	b.n	800336c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	0c5b      	lsrs	r3, r3, #17
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	2b06      	cmp	r3, #6
 8003348:	d110      	bne.n	800336c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003350:	2208      	movs	r2, #8
 8003352:	4619      	mov	r1, r3
 8003354:	6a38      	ldr	r0, [r7, #32]
 8003356:	f003 f9ab 	bl	80066b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003366:	441a      	add	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0210 	orr.w	r2, r2, #16
 800337a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fb29 	bl	80069d8 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800338c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003390:	f040 80a7 	bne.w	80034e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 fb2e 	bl	80069fe <USB_ReadDevAllOutEpInterrupt>
 80033a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033a4:	e099      	b.n	80034da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 808e 	beq.w	80034ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 fb52 	bl	8006a66 <USB_ReadDevOutEPInterrupt>
 80033c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	2301      	movs	r3, #1
 80033de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fec2 	bl	800416c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2308      	movs	r3, #8
 8003402:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003404:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 ff98 	bl	800433c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	2310      	movs	r3, #16
 8003426:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d030      	beq.n	8003494 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	2b80      	cmp	r3, #128	@ 0x80
 800343c:	d109      	bne.n	8003452 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800344c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003450:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	78db      	ldrb	r3, [r3, #3]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d108      	bne.n	8003482 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2200      	movs	r2, #0
 8003474:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	b2db      	uxtb	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f014 fbad 	bl	8017bdc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	2302      	movs	r3, #2
 8003492:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2320      	movs	r3, #32
 80034ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	3301      	adds	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f af62 	bne.w	80033a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fa76 	bl	80069d8 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034f6:	f040 80db 	bne.w	80036b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fa97 	bl	8006a32 <USB_ReadDevAllInEpInterrupt>
 8003504:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800350a:	e0cd      	b.n	80036a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800350c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80c2 	beq.w	800369c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fabd 	bl	8006aa2 <USB_ReadDevInEPInterrupt>
 8003528:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d057      	beq.n	80035e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	43db      	mvns	r3, r3
 800354e:	69f9      	ldr	r1, [r7, #28]
 8003550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003554:	4013      	ands	r3, r2
 8003556:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003564:	461a      	mov	r2, r3
 8003566:	2301      	movs	r3, #1
 8003568:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d132      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334c      	adds	r3, #76	@ 0x4c
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4403      	add	r3, r0
 8003592:	3348      	adds	r3, #72	@ 0x48
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4419      	add	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	334c      	adds	r3, #76	@ 0x4c
 80035a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x3a2>
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3354      	adds	r3, #84	@ 0x54
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80035d0:	461a      	mov	r2, r3
 80035d2:	2101      	movs	r1, #1
 80035d4:	f003 fac4 	bl	8006b60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f014 fa77 	bl	8017ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fa:	461a      	mov	r2, r3
 80035fc:	2308      	movs	r3, #8
 80035fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003616:	461a      	mov	r2, r3
 8003618:	2310      	movs	r3, #16
 800361a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003632:	461a      	mov	r2, r3
 8003634:	2340      	movs	r3, #64	@ 0x40
 8003636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d023      	beq.n	800368a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003644:	6a38      	ldr	r0, [r7, #32]
 8003646:	f002 f9a5 	bl	8005994 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800364a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3338      	adds	r3, #56	@ 0x38
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f014 fac4 	bl	8017c00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003684:	461a      	mov	r2, r3
 8003686:	2302      	movs	r3, #2
 8003688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fcdb 	bl	8004052 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	3301      	adds	r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f47f af2e 	bne.w	800350c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f003 f98f 	bl	80069d8 <USB_ReadInterrupts>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036c4:	d122      	bne.n	800370c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d108      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036ec:	2100      	movs	r1, #0
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fec2 	bl	8004478 <HAL_PCDEx_LPM_Callback>
 80036f4:	e002      	b.n	80036fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f014 fa62 	bl	8017bc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800370a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f003 f961 	bl	80069d8 <USB_ReadInterrupts>
 8003716:	4603      	mov	r3, r0
 8003718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003720:	d112      	bne.n	8003748 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f014 fa1e 	bl	8017b74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003746:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 f943 	bl	80069d8 <USB_ReadInterrupts>
 8003752:	4603      	mov	r3, r0
 8003754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800375c:	f040 80b7 	bne.w	80038ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2110      	movs	r1, #16
 800377a:	4618      	mov	r0, r3
 800377c:	f002 f90a 	bl	8005994 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003780:	2300      	movs	r3, #0
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003784:	e046      	b.n	8003814 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003792:	461a      	mov	r2, r3
 8003794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003798:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	440a      	add	r2, r1
 8003804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800380c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003810:	3301      	adds	r3, #1
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800381a:	429a      	cmp	r2, r3
 800381c:	d3b3      	bcc.n	8003786 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800382c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003830:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800384a:	f043 030b 	orr.w	r3, r3, #11
 800384e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003860:	f043 030b 	orr.w	r3, r3, #11
 8003864:	6453      	str	r3, [r2, #68]	@ 0x44
 8003866:	e015      	b.n	8003894 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003876:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800387a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800387e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388e:	f043 030b 	orr.w	r3, r3, #11
 8003892:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038b8:	461a      	mov	r2, r3
 80038ba:	f003 f951 	bl	8006b60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 f880 	bl	80069d8 <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e2:	d124      	bne.n	800392e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 f916 	bl	8006b1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 f8cb 	bl	8005a8e <USB_GetDevSpeed>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681c      	ldr	r4, [r3, #0]
 8003904:	f001 f9e8 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8003908:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	4620      	mov	r0, r4
 8003914:	f001 fdca 	bl	80054ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f014 f902 	bl	8017b22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800392c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 f850 	bl	80069d8 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d10a      	bne.n	8003958 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f014 f8df 	bl	8017b06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f002 0208 	and.w	r2, r2, #8
 8003956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f003 f83b 	bl	80069d8 <USB_ReadInterrupts>
 8003962:	4603      	mov	r3, r0
 8003964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003968:	2b80      	cmp	r3, #128	@ 0x80
 800396a:	d122      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
 800397c:	e014      	b.n	80039a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	b2db      	uxtb	r3, r3
 800399a:	4619      	mov	r1, r3
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb27 	bl	8003ff0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	3301      	adds	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3e5      	bcc.n	800397e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 f80e 	bl	80069d8 <USB_ReadInterrupts>
 80039bc:	4603      	mov	r3, r0
 80039be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039c6:	d13b      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039c8:	2301      	movs	r3, #1
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80039cc:	e02b      	b.n	8003a26 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3340      	adds	r3, #64	@ 0x40
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d115      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	da12      	bge.n	8003a20 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	333f      	adds	r3, #63	@ 0x3f
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fae8 	bl	8003ff0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	3301      	adds	r3, #1
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3ce      	bcc.n	80039ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 ffc7 	bl	80069d8 <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a54:	d155      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a56:	2301      	movs	r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5a:	e045      	b.n	8003ae8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d12e      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da2b      	bge.n	8003ae2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003a96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d121      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ade:	6053      	str	r3, [r2, #4]
            break;
 8003ae0:	e007      	b.n	8003af2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d3b4      	bcc.n	8003a5c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 ff66 	bl	80069d8 <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b16:	d10a      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f014 f883 	bl	8017c24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 ff50 	bl	80069d8 <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d115      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f014 f873 	bl	8017c40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	e000      	b.n	8003b6e <HAL_PCD_IRQHandler+0x938>
      return;
 8003b6c:	bf00      	nop
    }
  }
}
 8003b6e:	3734      	adds	r7, #52	@ 0x34
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd90      	pop	{r4, r7, pc}

08003b74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_PCD_SetAddress+0x1a>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e013      	b.n	8003bb6 <HAL_PCD_SetAddress+0x42>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 feae 	bl	8006908 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	4611      	mov	r1, r2
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4603      	mov	r3, r0
 8003bce:	70fb      	strb	r3, [r7, #3]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	803b      	strh	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	da0f      	bge.n	8003c04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	3338      	adds	r3, #56	@ 0x38
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	705a      	strb	r2, [r3, #1]
 8003c02:	e00f      	b.n	8003c24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c30:	883a      	ldrh	r2, [r7, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	78ba      	ldrb	r2, [r7, #2]
 8003c3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c4e:	78bb      	ldrb	r3, [r7, #2]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d102      	bne.n	8003c5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_PCD_EP_Open+0xaa>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e00e      	b.n	8003c86 <HAL_PCD_EP_Open+0xc8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68f9      	ldr	r1, [r7, #12]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 ff2e 	bl	8005ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003c84:	7afb      	ldrb	r3, [r7, #11]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da0f      	bge.n	8003cc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3338      	adds	r3, #56	@ 0x38
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	705a      	strb	r2, [r3, #1]
 8003cc0:	e00f      	b.n	8003ce2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_EP_Close+0x6e>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e00e      	b.n	8003d1a <HAL_PCD_EP_Close+0x8c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 ff6c 	bl	8005be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	3304      	adds	r3, #4
 8003d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d64:	7afb      	ldrb	r3, [r7, #11]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d102      	bne.n	8003d7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	6979      	ldr	r1, [r7, #20]
 8003d96:	f002 fa4b 	bl	8006230 <USB_EP0StartXfer>
 8003d9a:	e008      	b.n	8003dae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	f001 fff9 	bl	8005da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	460b      	mov	r3, r1
 8003df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df8:	7afb      	ldrb	r3, [r7, #11]
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	3338      	adds	r3, #56	@ 0x38
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2201      	movs	r2, #1
 8003e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e28:	7afb      	ldrb	r3, [r7, #11]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	f002 f9e9 	bl	8006230 <USB_EP0StartXfer>
 8003e5e:	e008      	b.n	8003e72 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	f001 ff97 	bl	8005da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d901      	bls.n	8003e9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e050      	b.n	8003f3c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da0f      	bge.n	8003ec2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3338      	adds	r3, #56	@ 0x38
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	705a      	strb	r2, [r3, #1]
 8003ec0:	e00d      	b.n	8003ede <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_PCD_EP_SetStall+0x82>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e01e      	b.n	8003f3c <HAL_PCD_EP_SetStall+0xc0>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 fc27 	bl	8006760 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	b2d9      	uxtb	r1, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f002 fe17 	bl	8006b60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d901      	bls.n	8003f62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e042      	b.n	8003fe8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da0f      	bge.n	8003f8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3338      	adds	r3, #56	@ 0x38
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	705a      	strb	r2, [r3, #1]
 8003f88:	e00f      	b.n	8003faa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	f003 020f 	and.w	r2, r3, #15
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_PCD_EP_ClrStall+0x86>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e00e      	b.n	8003fe8 <HAL_PCD_EP_ClrStall+0xa4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fc2f 	bl	800683c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da0c      	bge.n	800401e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 020f 	and.w	r2, r3, #15
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3338      	adds	r3, #56	@ 0x38
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4413      	add	r3, r2
 8004018:	3304      	adds	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e00c      	b.n	8004038 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	3304      	adds	r3, #4
 8004036:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	4618      	mov	r0, r3
 8004040:	f002 fa4e 	bl	80064e0 <USB_EPStopXfer>
 8004044:	4603      	mov	r3, r0
 8004046:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004048:	7afb      	ldrb	r3, [r7, #11]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08a      	sub	sp, #40	@ 0x28
 8004056:	af02      	add	r7, sp, #8
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	3338      	adds	r3, #56	@ 0x38
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	3304      	adds	r3, #4
 8004078:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	429a      	cmp	r2, r3
 8004084:	d901      	bls.n	800408a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e06c      	b.n	8004164 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	d902      	bls.n	80040a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3303      	adds	r3, #3
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040ae:	e02b      	b.n	8004108 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d902      	bls.n	80040cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3303      	adds	r3, #3
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6919      	ldr	r1, [r3, #16]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4603      	mov	r3, r0
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f002 faa2 	bl	8006634 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	429a      	cmp	r2, r3
 800411c:	d809      	bhi.n	8004132 <PCD_WriteEmptyTxFifo+0xe0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1a      	ldr	r2, [r3, #32]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004126:	429a      	cmp	r2, r3
 8004128:	d203      	bcs.n	8004132 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1be      	bne.n	80040b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	429a      	cmp	r2, r3
 800413c:	d811      	bhi.n	8004162 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2201      	movs	r2, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	43db      	mvns	r3, r3
 8004158:	6939      	ldr	r1, [r7, #16]
 800415a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800415e:	4013      	ands	r3, r2
 8004160:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	333c      	adds	r3, #60	@ 0x3c
 8004184:	3304      	adds	r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d17b      	bne.n	800429a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4a61      	ldr	r2, [pc, #388]	@ (8004334 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	f240 80b9 	bls.w	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80b3 	beq.w	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ce:	461a      	mov	r2, r3
 80041d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d4:	6093      	str	r3, [r2, #8]
 80041d6:	e0a7      	b.n	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ee:	461a      	mov	r2, r3
 80041f0:	2320      	movs	r3, #32
 80041f2:	6093      	str	r3, [r2, #8]
 80041f4:	e098      	b.n	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f040 8093 	bne.w	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4a4b      	ldr	r2, [pc, #300]	@ (8004334 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d90f      	bls.n	800422a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004226:	6093      	str	r3, [r2, #8]
 8004228:	e07e      	b.n	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	0159      	lsls	r1, r3, #5
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	440b      	add	r3, r1
 800424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d114      	bne.n	800428c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004274:	461a      	mov	r2, r3
 8004276:	2101      	movs	r1, #1
 8004278:	f002 fc72 	bl	8006b60 <USB_EP0_OutStart>
 800427c:	e006      	b.n	800428c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	441a      	add	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f013 fc02 	bl	8017a9c <HAL_PCD_DataOutStageCallback>
 8004298:	e046      	b.n	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d124      	bne.n	80042ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042be:	6093      	str	r3, [r2, #8]
 80042c0:	e032      	b.n	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	2320      	movs	r3, #32
 80042dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f013 fbd9 	bl	8017a9c <HAL_PCD_DataOutStageCallback>
 80042ea:	e01d      	b.n	8004328 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d114      	bne.n	800431c <PCD_EP_OutXfrComplete_int+0x1b0>
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d108      	bne.n	800431c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004314:	461a      	mov	r2, r3
 8004316:	2100      	movs	r1, #0
 8004318:	f002 fc22 	bl	8006b60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f013 fbba 	bl	8017a9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	4f54300a 	.word	0x4f54300a
 8004338:	4f54310a 	.word	0x4f54310a

0800433c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	333c      	adds	r3, #60	@ 0x3c
 8004354:	3304      	adds	r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d90e      	bls.n	8004390 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800438e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f013 fb71 	bl	8017a78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d90c      	bls.n	80043b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d108      	bne.n	80043b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80043b0:	461a      	mov	r2, r3
 80043b2:	2101      	movs	r1, #1
 80043b4:	f002 fbd4 	bl	8006b60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	4f54300a 	.word	0x4f54300a

080043c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	70fb      	strb	r3, [r7, #3]
 80043d4:	4613      	mov	r3, r2
 80043d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043e6:	883b      	ldrh	r3, [r7, #0]
 80043e8:	0419      	lsls	r1, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80043f4:	e028      	b.n	8004448 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e00d      	b.n	8004426 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	3340      	adds	r3, #64	@ 0x40
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4413      	add	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	3301      	adds	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	7bfa      	ldrb	r2, [r7, #15]
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	3b01      	subs	r3, #1
 800442c:	429a      	cmp	r2, r3
 800442e:	d3ec      	bcc.n	800440a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004430:	883b      	ldrh	r3, [r7, #0]
 8004432:	0418      	lsls	r0, r3, #16
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	3b01      	subs	r3, #1
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	4302      	orrs	r2, r0
 8004440:	3340      	adds	r3, #64	@ 0x40
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e267      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d075      	beq.n	800459a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ae:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00c      	beq.n	80044d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ba:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d112      	bne.n	80044ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c6:	4b82      	ldr	r3, [pc, #520]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d2:	d10b      	bne.n	80044ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	4b7e      	ldr	r3, [pc, #504]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05b      	beq.n	8004598 <HAL_RCC_OscConfig+0x108>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d157      	bne.n	8004598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e242      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x74>
 80044f6:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a75      	ldr	r2, [pc, #468]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x98>
 800450e:	4b70      	ldr	r3, [pc, #448]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6f      	ldr	r2, [pc, #444]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6c      	ldr	r2, [pc, #432]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004528:	4b69      	ldr	r3, [pc, #420]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a68      	ldr	r2, [pc, #416]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b66      	ldr	r3, [pc, #408]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fc fe3e 	bl	80011c8 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004550:	f7fc fe3a 	bl	80011c8 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e207      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b5b      	ldr	r3, [pc, #364]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xc0>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fc fe2a 	bl	80011c8 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004578:	f7fc fe26 	bl	80011c8 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1f3      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b51      	ldr	r3, [pc, #324]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0xe8>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045a6:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b2:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045be:	4b44      	ldr	r3, [pc, #272]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b41      	ldr	r3, [pc, #260]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x152>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1c7      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3b      	ldr	r3, [pc, #236]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4937      	ldr	r1, [pc, #220]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b34      	ldr	r3, [pc, #208]	@ (80046d4 <HAL_RCC_OscConfig+0x244>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fc fddf 	bl	80011c8 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460e:	f7fc fddb 	bl	80011c8 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1a8      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4925      	ldr	r1, [pc, #148]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b24      	ldr	r3, [pc, #144]	@ (80046d4 <HAL_RCC_OscConfig+0x244>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fc fdbe 	bl	80011c8 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004650:	f7fc fdba 	bl	80011c8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e187      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d036      	beq.n	80046e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <HAL_RCC_OscConfig+0x248>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc fd9e 	bl	80011c8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004690:	f7fc fd9a 	bl	80011c8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e167      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80046a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x200>
 80046ae:	e01b      	b.n	80046e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b0:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <HAL_RCC_OscConfig+0x248>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fc fd87 	bl	80011c8 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046bc:	e00e      	b.n	80046dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046be:	f7fc fd83 	bl	80011c8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d907      	bls.n	80046dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e150      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	42470000 	.word	0x42470000
 80046d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	4b88      	ldr	r3, [pc, #544]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80046de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ea      	bne.n	80046be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8097 	beq.w	8004824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b81      	ldr	r3, [pc, #516]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	4b7d      	ldr	r3, [pc, #500]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	4a7c      	ldr	r2, [pc, #496]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	@ 0x40
 8004716:	4b7a      	ldr	r3, [pc, #488]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b77      	ldr	r3, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b74      	ldr	r3, [pc, #464]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a73      	ldr	r2, [pc, #460]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fc fd43 	bl	80011c8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fc fd3f 	bl	80011c8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e10c      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x2ea>
 800476c:	4b64      	ldr	r3, [pc, #400]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	4a63      	ldr	r2, [pc, #396]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	@ 0x70
 8004778:	e01c      	b.n	80047b4 <HAL_RCC_OscConfig+0x324>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b05      	cmp	r3, #5
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x30c>
 8004782:	4b5f      	ldr	r3, [pc, #380]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	4a5e      	ldr	r2, [pc, #376]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6713      	str	r3, [r2, #112]	@ 0x70
 800478e:	4b5c      	ldr	r3, [pc, #368]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a5b      	ldr	r2, [pc, #364]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0x324>
 800479c:	4b58      	ldr	r3, [pc, #352]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a57      	ldr	r2, [pc, #348]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a8:	4b55      	ldr	r3, [pc, #340]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4a54      	ldr	r2, [pc, #336]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047ae:	f023 0304 	bic.w	r3, r3, #4
 80047b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d015      	beq.n	80047e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fc fd04 	bl	80011c8 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fc fd00 	bl	80011c8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0cb      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	4b49      	ldr	r3, [pc, #292]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ee      	beq.n	80047c4 <HAL_RCC_OscConfig+0x334>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e8:	f7fc fcee 	bl	80011c8 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fc fcea 	bl	80011c8 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e0b5      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004806:	4b3e      	ldr	r3, [pc, #248]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ee      	bne.n	80047f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004812:	7dfb      	ldrb	r3, [r7, #23]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	4a38      	ldr	r2, [pc, #224]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a1 	beq.w	8004970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482e:	4b34      	ldr	r3, [pc, #208]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b08      	cmp	r3, #8
 8004838:	d05c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d141      	bne.n	80048c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <HAL_RCC_OscConfig+0x478>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc fcbe 	bl	80011c8 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc fcba 	bl	80011c8 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e087      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b27      	ldr	r3, [pc, #156]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	019b      	lsls	r3, r3, #6
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	3b01      	subs	r3, #1
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	491b      	ldr	r1, [pc, #108]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004898:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <HAL_RCC_OscConfig+0x478>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fc fc93 	bl	80011c8 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fc fc8f 	bl	80011c8 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e05c      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b8:	4b11      	ldr	r3, [pc, #68]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x416>
 80048c4:	e054      	b.n	8004970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b10      	ldr	r3, [pc, #64]	@ (8004908 <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fc fc7c 	bl	80011c8 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fc fc78 	bl	80011c8 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e045      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x444>
 80048f2:	e03d      	b.n	8004970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e038      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
 8004900:	40023800 	.word	0x40023800
 8004904:	40007000 	.word	0x40007000
 8004908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800490c:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <HAL_RCC_OscConfig+0x4ec>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d028      	beq.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d121      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d11a      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004944:	4293      	cmp	r3, r2
 8004946:	d111      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	3b01      	subs	r3, #1
 8004956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800

08004980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0cc      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004994:	4b68      	ldr	r3, [pc, #416]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d90c      	bls.n	80049bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b65      	ldr	r3, [pc, #404]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b63      	ldr	r3, [pc, #396]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0b8      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d020      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d4:	4b59      	ldr	r3, [pc, #356]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a58      	ldr	r2, [pc, #352]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ec:	4b53      	ldr	r3, [pc, #332]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a52      	ldr	r2, [pc, #328]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f8:	4b50      	ldr	r3, [pc, #320]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	494d      	ldr	r1, [pc, #308]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d044      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b47      	ldr	r3, [pc, #284]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d119      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e07f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e067      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b37      	ldr	r3, [pc, #220]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4934      	ldr	r1, [pc, #208]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a70:	f7fc fbaa 	bl	80011c8 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a78:	f7fc fba6 	bl	80011c8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e04f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 020c 	and.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d1eb      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d20c      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b22      	ldr	r3, [pc, #136]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e032      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad4:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4916      	ldr	r1, [pc, #88]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af2:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	490e      	ldr	r1, [pc, #56]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b06:	f000 f821 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	490a      	ldr	r1, [pc, #40]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	5ccb      	ldrb	r3, [r1, r3]
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	4a09      	ldr	r2, [pc, #36]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fb fffc 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023c00 	.word	0x40023c00
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0801bc4c 	.word	0x0801bc4c
 8004b44:	20000000 	.word	0x20000000
 8004b48:	20000004 	.word	0x20000004

08004b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b50:	b090      	sub	sp, #64	@ 0x40
 8004b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b64:	4b59      	ldr	r3, [pc, #356]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d00d      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x40>
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	f200 80a1 	bhi.w	8004cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x34>
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b7e:	e09b      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004b84:	e09b      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b86:	4b53      	ldr	r3, [pc, #332]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b8a:	e098      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b94:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b96:	4b4d      	ldr	r3, [pc, #308]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	2200      	movs	r2, #0
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4b47      	ldr	r3, [pc, #284]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bb8:	fb03 f201 	mul.w	r2, r3, r1
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	fb00 f303 	mul.w	r3, r0, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4a43      	ldr	r2, [pc, #268]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8004bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bcc:	460a      	mov	r2, r1
 8004bce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd2:	4413      	add	r3, r2
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	2200      	movs	r2, #0
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	61fa      	str	r2, [r7, #28]
 8004bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004be6:	f7fb fb53 	bl	8000290 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4613      	mov	r3, r2
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf2:	e053      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf4:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	099b      	lsrs	r3, r3, #6
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	617a      	str	r2, [r7, #20]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c06:	f04f 0b00 	mov.w	fp, #0
 8004c0a:	4652      	mov	r2, sl
 8004c0c:	465b      	mov	r3, fp
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	0159      	lsls	r1, r3, #5
 8004c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1c:	0150      	lsls	r0, r2, #5
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	ebb2 080a 	subs.w	r8, r2, sl
 8004c26:	eb63 090b 	sbc.w	r9, r3, fp
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8004c42:	eb63 0509 	sbc.w	r5, r3, r9
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	00eb      	lsls	r3, r5, #3
 8004c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c54:	00e2      	lsls	r2, r4, #3
 8004c56:	4614      	mov	r4, r2
 8004c58:	461d      	mov	r5, r3
 8004c5a:	eb14 030a 	adds.w	r3, r4, sl
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	eb45 030b 	adc.w	r3, r5, fp
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c72:	4629      	mov	r1, r5
 8004c74:	028b      	lsls	r3, r1, #10
 8004c76:	4621      	mov	r1, r4
 8004c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	028a      	lsls	r2, r1, #10
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	2200      	movs	r2, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	60fa      	str	r2, [r7, #12]
 8004c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c90:	f7fb fafe 	bl	8000290 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004cac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cb6:	e002      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3740      	adds	r7, #64	@ 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	02faf080 	.word	0x02faf080

08004cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	@ (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000000 	.word	0x20000000

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a9b      	lsrs	r3, r3, #10
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	0801bc5c 	.word	0x0801bc5c

08004d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	220f      	movs	r2, #15
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d28:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d34:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d40:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d4c:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d5a:	4b07      	ldr	r3, [pc, #28]	@ (8004d78 <HAL_RCC_GetClockConfig+0x60>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 020f 	and.w	r2, r3, #15
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	601a      	str	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40023c00 	.word	0x40023c00

08004d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07b      	b.n	8004e86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d108      	bne.n	8004da8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d9e:	d009      	beq.n	8004db4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]
 8004da6:	e005      	b.n	8004db4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fb fe60 	bl	8000a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	ea42 0103 	orr.w	r1, r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	f003 0104 	and.w	r1, r3, #4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	f003 0210 	and.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e041      	b.n	8004f24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f839 	bl	8004f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 f9d7 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d001      	beq.n	8004f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e04e      	b.n	8004ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a23      	ldr	r2, [pc, #140]	@ (8005004 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d022      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f82:	d01d      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	@ (8005008 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <HAL_TIM_Base_Start_IT+0xcc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x80>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d111      	bne.n	8004fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d010      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	e007      	b.n	8004ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40010400 	.word	0x40010400
 8005018:	40014000 	.word	0x40014000
 800501c:	40001800 	.word	0x40001800

08005020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0202 	mvn.w	r2, #2
 800504c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8ee 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8e0 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8f1 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0204 	mvn.w	r2, #4
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8c4 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8b6 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8c7 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d122      	bne.n	8005124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0208 	mvn.w	r2, #8
 80050f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2204      	movs	r2, #4
 80050fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f89a 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f88c 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f89d 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b10      	cmp	r3, #16
 8005130:	d122      	bne.n	8005178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b10      	cmp	r3, #16
 800513e:	d11b      	bne.n	8005178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0210 	mvn.w	r2, #16
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f870 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f862 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f873 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0201 	mvn.w	r2, #1
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fb fbb8 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051bc:	2b80      	cmp	r3, #128	@ 0x80
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f902 	bl	80053d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f838 	bl	800526c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b20      	cmp	r3, #32
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b20      	cmp	r3, #32
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0220 	mvn.w	r2, #32
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8cc 	bl	80053c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a40      	ldr	r2, [pc, #256]	@ (8005394 <TIM_Base_SetConfig+0x114>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005398 <TIM_Base_SetConfig+0x118>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3c      	ldr	r2, [pc, #240]	@ (800539c <TIM_Base_SetConfig+0x11c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3b      	ldr	r2, [pc, #236]	@ (80053a0 <TIM_Base_SetConfig+0x120>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a3a      	ldr	r2, [pc, #232]	@ (80053a4 <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005394 <TIM_Base_SetConfig+0x114>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e0:	d027      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005398 <TIM_Base_SetConfig+0x118>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d023      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2b      	ldr	r2, [pc, #172]	@ (800539c <TIM_Base_SetConfig+0x11c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01f      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2a      	ldr	r2, [pc, #168]	@ (80053a0 <TIM_Base_SetConfig+0x120>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a29      	ldr	r2, [pc, #164]	@ (80053a4 <TIM_Base_SetConfig+0x124>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d017      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a28      	ldr	r2, [pc, #160]	@ (80053a8 <TIM_Base_SetConfig+0x128>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a27      	ldr	r2, [pc, #156]	@ (80053ac <TIM_Base_SetConfig+0x12c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a26      	ldr	r2, [pc, #152]	@ (80053b0 <TIM_Base_SetConfig+0x130>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a25      	ldr	r2, [pc, #148]	@ (80053b4 <TIM_Base_SetConfig+0x134>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a24      	ldr	r2, [pc, #144]	@ (80053b8 <TIM_Base_SetConfig+0x138>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a23      	ldr	r2, [pc, #140]	@ (80053bc <TIM_Base_SetConfig+0x13c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0a      	ldr	r2, [pc, #40]	@ (8005394 <TIM_Base_SetConfig+0x114>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0xf8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0c      	ldr	r2, [pc, #48]	@ (80053a4 <TIM_Base_SetConfig+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	40001800 	.word	0x40001800
 80053b8:	40001c00 	.word	0x40001c00
 80053bc:	40002000 	.word	0x40002000

080053c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e8:	b084      	sub	sp, #16
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	f107 001c 	add.w	r0, r7, #28
 80053f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d122      	bne.n	8005446 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 fbee 	bl	8006c1c <USB_CoreReset>
 8005440:	4603      	mov	r3, r0
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e01a      	b.n	800547c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 fbe2 	bl	8006c1c <USB_CoreReset>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800545c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
 800546e:	e005      	b.n	800547c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005474:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10b      	bne.n	800549a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f043 0206 	orr.w	r2, r3, #6
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a6:	b004      	add	sp, #16
 80054a8:	4770      	bx	lr
	...

080054ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d165      	bne.n	800558c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a41      	ldr	r2, [pc, #260]	@ (80055c8 <USB_SetTurnaroundTime+0x11c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d906      	bls.n	80054d6 <USB_SetTurnaroundTime+0x2a>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a40      	ldr	r2, [pc, #256]	@ (80055cc <USB_SetTurnaroundTime+0x120>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d202      	bcs.n	80054d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054d0:	230f      	movs	r3, #15
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e062      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a3c      	ldr	r2, [pc, #240]	@ (80055cc <USB_SetTurnaroundTime+0x120>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d306      	bcc.n	80054ec <USB_SetTurnaroundTime+0x40>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a3b      	ldr	r2, [pc, #236]	@ (80055d0 <USB_SetTurnaroundTime+0x124>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d202      	bcs.n	80054ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e6:	230e      	movs	r3, #14
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e057      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a38      	ldr	r2, [pc, #224]	@ (80055d0 <USB_SetTurnaroundTime+0x124>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d306      	bcc.n	8005502 <USB_SetTurnaroundTime+0x56>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a37      	ldr	r2, [pc, #220]	@ (80055d4 <USB_SetTurnaroundTime+0x128>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d202      	bcs.n	8005502 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054fc:	230d      	movs	r3, #13
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e04c      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a33      	ldr	r2, [pc, #204]	@ (80055d4 <USB_SetTurnaroundTime+0x128>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d306      	bcc.n	8005518 <USB_SetTurnaroundTime+0x6c>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a32      	ldr	r2, [pc, #200]	@ (80055d8 <USB_SetTurnaroundTime+0x12c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d802      	bhi.n	8005518 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005512:	230c      	movs	r3, #12
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e041      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4a2f      	ldr	r2, [pc, #188]	@ (80055d8 <USB_SetTurnaroundTime+0x12c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d906      	bls.n	800552e <USB_SetTurnaroundTime+0x82>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a2e      	ldr	r2, [pc, #184]	@ (80055dc <USB_SetTurnaroundTime+0x130>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d802      	bhi.n	800552e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005528:	230b      	movs	r3, #11
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e036      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4a2a      	ldr	r2, [pc, #168]	@ (80055dc <USB_SetTurnaroundTime+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d906      	bls.n	8005544 <USB_SetTurnaroundTime+0x98>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a29      	ldr	r2, [pc, #164]	@ (80055e0 <USB_SetTurnaroundTime+0x134>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d802      	bhi.n	8005544 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553e:	230a      	movs	r3, #10
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e02b      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <USB_SetTurnaroundTime+0x134>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d906      	bls.n	800555a <USB_SetTurnaroundTime+0xae>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a25      	ldr	r2, [pc, #148]	@ (80055e4 <USB_SetTurnaroundTime+0x138>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d202      	bcs.n	800555a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005554:	2309      	movs	r3, #9
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e020      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a21      	ldr	r2, [pc, #132]	@ (80055e4 <USB_SetTurnaroundTime+0x138>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d306      	bcc.n	8005570 <USB_SetTurnaroundTime+0xc4>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a20      	ldr	r2, [pc, #128]	@ (80055e8 <USB_SetTurnaroundTime+0x13c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d802      	bhi.n	8005570 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800556a:	2308      	movs	r3, #8
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e015      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <USB_SetTurnaroundTime+0x13c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d906      	bls.n	8005586 <USB_SetTurnaroundTime+0xda>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <USB_SetTurnaroundTime+0x140>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d202      	bcs.n	8005586 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005580:	2307      	movs	r3, #7
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e00a      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005586:	2306      	movs	r3, #6
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e007      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005592:	2309      	movs	r3, #9
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e001      	b.n	800559c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005598:	2309      	movs	r3, #9
 800559a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	029b      	lsls	r3, r3, #10
 80055b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	00d8acbf 	.word	0x00d8acbf
 80055cc:	00e4e1c0 	.word	0x00e4e1c0
 80055d0:	00f42400 	.word	0x00f42400
 80055d4:	01067380 	.word	0x01067380
 80055d8:	011a499f 	.word	0x011a499f
 80055dc:	01312cff 	.word	0x01312cff
 80055e0:	014ca43f 	.word	0x014ca43f
 80055e4:	016e3600 	.word	0x016e3600
 80055e8:	01a6ab1f 	.word	0x01a6ab1f
 80055ec:	01e84800 	.word	0x01e84800

080055f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f023 0201 	bic.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d115      	bne.n	8005682 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005662:	2001      	movs	r0, #1
 8005664:	f7fb fdbc 	bl	80011e0 <HAL_Delay>
      ms++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 fa45 	bl	8006afe <USB_GetMode>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d01e      	beq.n	80056b8 <USB_SetCurrentMode+0x84>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b31      	cmp	r3, #49	@ 0x31
 800567e:	d9f0      	bls.n	8005662 <USB_SetCurrentMode+0x2e>
 8005680:	e01a      	b.n	80056b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d115      	bne.n	80056b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005694:	2001      	movs	r0, #1
 8005696:	f7fb fda3 	bl	80011e0 <HAL_Delay>
      ms++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 fa2c 	bl	8006afe <USB_GetMode>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <USB_SetCurrentMode+0x84>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b31      	cmp	r3, #49	@ 0x31
 80056b0:	d9f0      	bls.n	8005694 <USB_SetCurrentMode+0x60>
 80056b2:	e001      	b.n	80056b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e005      	b.n	80056c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b32      	cmp	r3, #50	@ 0x32
 80056bc:	d101      	bne.n	80056c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056cc:	b084      	sub	sp, #16
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e009      	b.n	8005700 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3340      	adds	r3, #64	@ 0x40
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3301      	adds	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b0e      	cmp	r3, #14
 8005704:	d9f2      	bls.n	80056ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11c      	bne.n	8005746 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38
 8005744:	e00b      	b.n	800575e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	4619      	mov	r1, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005778:	461a      	mov	r2, r3
 800577a:	680b      	ldr	r3, [r1, #0]
 800577c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10c      	bne.n	800579e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800578a:	2100      	movs	r1, #0
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f965 	bl	8005a5c <USB_SetDevSpeed>
 8005792:	e008      	b.n	80057a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005794:	2101      	movs	r1, #1
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f960 	bl	8005a5c <USB_SetDevSpeed>
 800579c:	e003      	b.n	80057a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800579e:	2103      	movs	r1, #3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f95b 	bl	8005a5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057a6:	2110      	movs	r1, #16
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f8f3 	bl	8005994 <USB_FlushTxFifo>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f91f 	bl	80059fc <USB_FlushRxFifo>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ce:	461a      	mov	r2, r3
 80057d0:	2300      	movs	r3, #0
 80057d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057da:	461a      	mov	r2, r3
 80057dc:	2300      	movs	r3, #0
 80057de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e6:	461a      	mov	r2, r3
 80057e8:	2300      	movs	r3, #0
 80057ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	e043      	b.n	800587a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005808:	d118      	bne.n	800583c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800581c:	461a      	mov	r2, r3
 800581e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	e013      	b.n	800584e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e008      	b.n	800584e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	2300      	movs	r3, #0
 800584c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586c:	461a      	mov	r2, r3
 800586e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005872:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	3301      	adds	r3, #1
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d3b7      	bcc.n	80057f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e043      	b.n	8005910 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800589a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800589e:	d118      	bne.n	80058d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e013      	b.n	80058e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	461a      	mov	r2, r3
 80058ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e008      	b.n	80058e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	461a      	mov	r2, r3
 80058e0:	2300      	movs	r3, #0
 80058e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005902:	461a      	mov	r2, r3
 8005904:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005908:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3301      	adds	r3, #1
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d3b7      	bcc.n	8005888 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005938:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f043 0210 	orr.w	r2, r3, #16
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	4b0f      	ldr	r3, [pc, #60]	@ (8005990 <USB_DevInit+0x2c4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f043 0208 	orr.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800596a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d107      	bne.n	8005980 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005978:	f043 0304 	orr.w	r3, r3, #4
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800598c:	b004      	add	sp, #16
 800598e:	4770      	bx	lr
 8005990:	803c3800 	.word	0x803c3800

08005994 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <USB_FlushTxFifo+0x64>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e01b      	b.n	80059ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	daf2      	bge.n	80059a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	019b      	lsls	r3, r3, #6
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a08      	ldr	r2, [pc, #32]	@ (80059f8 <USB_FlushTxFifo+0x64>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e006      	b.n	80059ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d0f0      	beq.n	80059cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	00030d40 	.word	0x00030d40

080059fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a11      	ldr	r2, [pc, #68]	@ (8005a58 <USB_FlushRxFifo+0x5c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e018      	b.n	8005a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	daf2      	bge.n	8005a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <USB_FlushRxFifo+0x5c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e006      	b.n	8005a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d0f0      	beq.n	8005a2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	00030d40 	.word	0x00030d40

08005a5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b087      	sub	sp, #28
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0306 	and.w	r3, r3, #6
 8005aa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
 8005ab2:	e00a      	b.n	8005aca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d002      	beq.n	8005ac0 <USB_GetDevSpeed+0x32>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d102      	bne.n	8005ac6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	75fb      	strb	r3, [r7, #23]
 8005ac4:	e001      	b.n	8005aca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ac6:	230f      	movs	r3, #15
 8005ac8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d13a      	bne.n	8005b6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	68f9      	ldr	r1, [r7, #12]
 8005b0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d155      	bne.n	8005bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	791b      	ldrb	r3, [r3, #4]
 8005b46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	059b      	lsls	r3, r3, #22
 8005b4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b50:	4313      	orrs	r3, r2
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e036      	b.n	8005bd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11a      	bne.n	8005bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	791b      	ldrb	r3, [r3, #4]
 8005bbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d161      	bne.n	8005cc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c1a:	d11f      	bne.n	8005c5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	2101      	movs	r1, #1
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	0159      	lsls	r1, r3, #5
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	440b      	add	r3, r1
 8005cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4b35      	ldr	r3, [pc, #212]	@ (8005d98 <USB_DeactivateEndpoint+0x1b0>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]
 8005cc6:	e060      	b.n	8005d8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cde:	d11f      	bne.n	8005d20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	2101      	movs	r1, #1
 8005d32:	fa01 f303 	lsl.w	r3, r1, r3
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d40:	4013      	ands	r3, r2
 8005d42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	2101      	movs	r1, #1
 8005d56:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d64:	4013      	ands	r3, r2
 8005d66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	0159      	lsls	r1, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d82:	4619      	mov	r1, r3
 8005d84:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <USB_DeactivateEndpoint+0x1b4>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	ec337800 	.word	0xec337800
 8005d9c:	eff37800 	.word	0xeff37800

08005da0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	4613      	mov	r3, r2
 8005dac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	f040 815c 	bne.w	800607a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d132      	bne.n	8005e30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005de8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	69fa      	ldr	r2, [r7, #28]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e28:	0cdb      	lsrs	r3, r3, #19
 8005e2a:	04db      	lsls	r3, r3, #19
 8005e2c:	6113      	str	r3, [r2, #16]
 8005e2e:	e074      	b.n	8005f1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4a:	0cdb      	lsrs	r3, r3, #19
 8005e4c:	04db      	lsls	r3, r3, #19
 8005e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	440b      	add	r3, r1
 8005e8c:	1e59      	subs	r1, r3, #1
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e98:	4b9d      	ldr	r3, [pc, #628]	@ (8006110 <USB_EPStartXfer+0x370>)
 8005e9a:	400b      	ands	r3, r1
 8005e9c:	69b9      	ldr	r1, [r7, #24]
 8005e9e:	0148      	lsls	r0, r1, #5
 8005ea0:	69f9      	ldr	r1, [r7, #28]
 8005ea2:	4401      	add	r1, r0
 8005ea4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec2:	69b9      	ldr	r1, [r7, #24]
 8005ec4:	0148      	lsls	r0, r1, #5
 8005ec6:	69f9      	ldr	r1, [r7, #28]
 8005ec8:	4401      	add	r1, r0
 8005eca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d11f      	bne.n	8005f1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005ef8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d14b      	bne.n	8005fb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f34:	461a      	mov	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	791b      	ldrb	r3, [r3, #4]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d128      	bne.n	8005f96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d110      	bne.n	8005f76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e00f      	b.n	8005f96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fb0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e133      	b.n	8006220 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d015      	beq.n	800600c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 811b 	beq.w	8006220 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	69f9      	ldr	r1, [r7, #28]
 8006002:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006006:	4313      	orrs	r3, r2
 8006008:	634b      	str	r3, [r1, #52]	@ 0x34
 800600a:	e109      	b.n	8006220 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d110      	bne.n	800603e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006036:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e00f      	b.n	800605e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6919      	ldr	r1, [r3, #16]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	b298      	uxth	r0, r3
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	4603      	mov	r3, r0
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fade 	bl	8006634 <USB_WritePacket>
 8006078:	e0d2      	b.n	8006220 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006094:	0cdb      	lsrs	r3, r3, #19
 8006096:	04db      	lsls	r3, r3, #19
 8006098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d126      	bne.n	8006114 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060dc:	69b9      	ldr	r1, [r7, #24]
 80060de:	0148      	lsls	r0, r1, #5
 80060e0:	69f9      	ldr	r1, [r7, #28]
 80060e2:	4401      	add	r1, r0
 80060e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060e8:	4313      	orrs	r3, r2
 80060ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006106:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800610a:	6113      	str	r3, [r2, #16]
 800610c:	e03a      	b.n	8006184 <USB_EPStartXfer+0x3e4>
 800610e:	bf00      	nop
 8006110:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4413      	add	r3, r2
 800611e:	1e5a      	subs	r2, r3, #1
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	fbb2 f3f3 	udiv	r3, r2, r3
 8006128:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	8afa      	ldrh	r2, [r7, #22]
 8006130:	fb03 f202 	mul.w	r2, r3, r2
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	8afb      	ldrh	r3, [r7, #22]
 8006148:	04d9      	lsls	r1, r3, #19
 800614a:	4b38      	ldr	r3, [pc, #224]	@ (800622c <USB_EPStartXfer+0x48c>)
 800614c:	400b      	ands	r3, r1
 800614e:	69b9      	ldr	r1, [r7, #24]
 8006150:	0148      	lsls	r0, r1, #5
 8006152:	69f9      	ldr	r1, [r7, #28]
 8006154:	4401      	add	r1, r0
 8006156:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800615a:	4313      	orrs	r3, r2
 800615c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	0148      	lsls	r0, r1, #5
 8006178:	69f9      	ldr	r1, [r7, #28]
 800617a:	4401      	add	r1, r0
 800617c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006180:	4313      	orrs	r3, r2
 8006182:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10d      	bne.n	80061a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6919      	ldr	r1, [r3, #16]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a2:	460a      	mov	r2, r1
 80061a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d128      	bne.n	8006200 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d110      	bne.n	80061e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e00f      	b.n	8006200 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800621a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800621e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	1ff80000 	.word	0x1ff80000

08006230 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b01      	cmp	r3, #1
 800624e:	f040 80ce 	bne.w	80063ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d132      	bne.n	80062c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006274:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006278:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800627c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006298:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800629c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b8:	0cdb      	lsrs	r3, r3, #19
 80062ba:	04db      	lsls	r3, r3, #19
 80062bc:	6113      	str	r3, [r2, #16]
 80062be:	e04e      	b.n	800635e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062da:	0cdb      	lsrs	r3, r3, #19
 80062dc:	04db      	lsls	r3, r3, #19
 80062de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006302:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	d903      	bls.n	8006318 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006332:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006336:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634e:	6939      	ldr	r1, [r7, #16]
 8006350:	0148      	lsls	r0, r1, #5
 8006352:	6979      	ldr	r1, [r7, #20]
 8006354:	4401      	add	r1, r0
 8006356:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800635a:	4313      	orrs	r3, r2
 800635c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d11e      	bne.n	80063a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006378:	461a      	mov	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	e097      	b.n	80064d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8083 	beq.w	80064d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	2101      	movs	r1, #1
 80063de:	fa01 f303 	lsl.w	r3, r1, r3
 80063e2:	6979      	ldr	r1, [r7, #20]
 80063e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063e8:	4313      	orrs	r3, r2
 80063ea:	634b      	str	r3, [r1, #52]	@ 0x34
 80063ec:	e071      	b.n	80064d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006408:	0cdb      	lsrs	r3, r3, #19
 800640a:	04db      	lsls	r3, r3, #19
 800640c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006428:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800642c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006430:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006464:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006480:	6939      	ldr	r1, [r7, #16]
 8006482:	0148      	lsls	r0, r1, #5
 8006484:	6979      	ldr	r1, [r7, #20]
 8006486:	4401      	add	r1, r0
 8006488:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800648c:	4313      	orrs	r3, r2
 800648e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10d      	bne.n	80064b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6919      	ldr	r1, [r3, #16]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	460a      	mov	r2, r1
 80064b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d14a      	bne.n	8006594 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006516:	f040 8086 	bne.w	8006626 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006538:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800653c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800655c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800656e:	4293      	cmp	r3, r2
 8006570:	d902      	bls.n	8006578 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	75fb      	strb	r3, [r7, #23]
          break;
 8006576:	e056      	b.n	8006626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800658c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006590:	d0e7      	beq.n	8006562 <USB_EPStopXfer+0x82>
 8006592:	e048      	b.n	8006626 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ac:	d13b      	bne.n	8006626 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006602:	4293      	cmp	r3, r2
 8006604:	d902      	bls.n	800660c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
          break;
 800660a:	e00c      	b.n	8006626 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006624:	d0e7      	beq.n	80065f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006626:	7dfb      	ldrb	r3, [r7, #23]
}
 8006628:	4618      	mov	r0, r3
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006634:	b480      	push	{r7}
 8006636:	b089      	sub	sp, #36	@ 0x24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4611      	mov	r1, r2
 8006640:	461a      	mov	r2, r3
 8006642:	460b      	mov	r3, r1
 8006644:	71fb      	strb	r3, [r7, #7]
 8006646:	4613      	mov	r3, r2
 8006648:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006652:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d123      	bne.n	80066a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800665a:	88bb      	ldrh	r3, [r7, #4]
 800665c:	3303      	adds	r3, #3
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e018      	b.n	800669a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	031a      	lsls	r2, r3, #12
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006674:	461a      	mov	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	3301      	adds	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3301      	adds	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d3e2      	bcc.n	8006668 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3724      	adds	r7, #36	@ 0x24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b08b      	sub	sp, #44	@ 0x2c
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	e014      	b.n	8006706 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	3301      	adds	r3, #1
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	3301      	adds	r3, #1
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	3301      	adds	r3, #1
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	3301      	adds	r3, #1
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	3301      	adds	r3, #1
 8006704:	623b      	str	r3, [r7, #32]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	429a      	cmp	r2, r3
 800670c:	d3e6      	bcc.n	80066dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800670e:	8bfb      	ldrh	r3, [r7, #30]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01e      	beq.n	8006752 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671e:	461a      	mov	r2, r3
 8006720:	f107 0310 	add.w	r3, r7, #16
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	701a      	strb	r2, [r3, #0]
      i++;
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	3301      	adds	r3, #1
 800673e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	3301      	adds	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006746:	8bfb      	ldrh	r3, [r7, #30]
 8006748:	3b01      	subs	r3, #1
 800674a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800674c:	8bfb      	ldrh	r3, [r7, #30]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ea      	bne.n	8006728 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006754:	4618      	mov	r0, r3
 8006756:	372c      	adds	r7, #44	@ 0x2c
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d12c      	bne.n	80067d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	db12      	blt.n	80067b4 <USB_EPSetStall+0x54>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00f      	beq.n	80067b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	0151      	lsls	r1, r2, #5
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	440a      	add	r2, r1
 80067ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	e02b      	b.n	800682e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	db12      	blt.n	800680e <USB_EPSetStall+0xae>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00f      	beq.n	800680e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006808:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800680c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800682c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d128      	bne.n	80068aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006876:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	791b      	ldrb	r3, [r3, #4]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d003      	beq.n	8006888 <USB_EPClearStall+0x4c>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d138      	bne.n	80068fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e027      	b.n	80068fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d003      	beq.n	80068da <USB_EPClearStall+0x9e>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	791b      	ldrb	r3, [r3, #4]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d10f      	bne.n	80068fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800692a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800693c:	68f9      	ldr	r1, [r7, #12]
 800693e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006982:	f023 0302 	bic.w	r3, r3, #2
 8006986:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069b0:	f023 0303 	bic.w	r3, r3, #3
 80069b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069f0:	68fb      	ldr	r3, [r7, #12]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	0c1b      	lsrs	r3, r3, #16
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	4013      	ands	r3, r2
 8006a54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	b29b      	uxth	r3, r3
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4013      	ands	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a94:	68bb      	ldr	r3, [r7, #8]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b087      	sub	sp, #28
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad2:	01db      	lsls	r3, r3, #7
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4013      	ands	r3, r2
 8006aee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006af0:	68bb      	ldr	r3, [r7, #8]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b38:	f023 0307 	bic.w	r3, r3, #7
 8006b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	333c      	adds	r3, #60	@ 0x3c
 8006b76:	3304      	adds	r3, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	4a26      	ldr	r2, [pc, #152]	@ (8006c18 <USB_EP0_OutStart+0xb8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d90a      	bls.n	8006b9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b94:	d101      	bne.n	8006b9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	e037      	b.n	8006c0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc8:	f043 0318 	orr.w	r3, r3, #24
 8006bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bdc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006be0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d10f      	bne.n	8006c08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	4f54300a 	.word	0x4f54300a

08006c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a13      	ldr	r2, [pc, #76]	@ (8006c80 <USB_CoreReset+0x64>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e01b      	b.n	8006c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	daf2      	bge.n	8006c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f043 0201 	orr.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <USB_CoreReset+0x64>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d901      	bls.n	8006c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e006      	b.n	8006c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d0f0      	beq.n	8006c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	00030d40 	.word	0x00030d40

08006c84 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006c8a:	4b92      	ldr	r3, [pc, #584]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006c8c:	22c0      	movs	r2, #192	@ 0xc0
 8006c8e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006c90:	4b90      	ldr	r3, [pc, #576]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006c92:	22a8      	movs	r2, #168	@ 0xa8
 8006c94:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006c96:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8006c9c:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006ca4:	22ff      	movs	r2, #255	@ 0xff
 8006ca6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006ca8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006caa:	22ff      	movs	r2, #255	@ 0xff
 8006cac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006cae:	4b8a      	ldr	r3, [pc, #552]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006cb0:	22ff      	movs	r2, #255	@ 0xff
 8006cb2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006cb4:	4b88      	ldr	r3, [pc, #544]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006cba:	4b88      	ldr	r3, [pc, #544]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006cbc:	22c0      	movs	r2, #192	@ 0xc0
 8006cbe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006cc0:	4b86      	ldr	r3, [pc, #536]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006cc2:	22a8      	movs	r2, #168	@ 0xa8
 8006cc4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006cc6:	4b85      	ldr	r3, [pc, #532]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8006ccc:	4b83      	ldr	r3, [pc, #524]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006cce:	2264      	movs	r2, #100	@ 0x64
 8006cd0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	f006 fd81 	bl	800d7dc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006cda:	4b7e      	ldr	r3, [pc, #504]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	061a      	lsls	r2, r3, #24
 8006ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	041b      	lsls	r3, r3, #16
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	4b7a      	ldr	r3, [pc, #488]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006cea:	789b      	ldrb	r3, [r3, #2]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	4a78      	ldr	r2, [pc, #480]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006cf2:	78d2      	ldrb	r2, [r2, #3]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	061a      	lsls	r2, r3, #24
 8006cf8:	4b76      	ldr	r3, [pc, #472]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	0619      	lsls	r1, r3, #24
 8006cfe:	4b75      	ldr	r3, [pc, #468]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	4319      	orrs	r1, r3
 8006d06:	4b73      	ldr	r3, [pc, #460]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d08:	789b      	ldrb	r3, [r3, #2]
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	4971      	ldr	r1, [pc, #452]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d10:	78c9      	ldrb	r1, [r1, #3]
 8006d12:	430b      	orrs	r3, r1
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	0619      	lsls	r1, r3, #24
 8006d22:	4b6c      	ldr	r3, [pc, #432]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	4319      	orrs	r1, r3
 8006d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d2c:	789b      	ldrb	r3, [r3, #2]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	430b      	orrs	r3, r1
 8006d32:	4968      	ldr	r1, [pc, #416]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d34:	78c9      	ldrb	r1, [r1, #3]
 8006d36:	430b      	orrs	r3, r1
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	4b64      	ldr	r3, [pc, #400]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	0619      	lsls	r1, r3, #24
 8006d46:	4b63      	ldr	r3, [pc, #396]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	4319      	orrs	r1, r3
 8006d4e:	4b61      	ldr	r3, [pc, #388]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d50:	789b      	ldrb	r3, [r3, #2]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	430b      	orrs	r3, r1
 8006d56:	495f      	ldr	r1, [pc, #380]	@ (8006ed4 <MX_LWIP_Init+0x250>)
 8006d58:	78c9      	ldrb	r1, [r1, #3]
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	0e1b      	lsrs	r3, r3, #24
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	4a5f      	ldr	r2, [pc, #380]	@ (8006ee0 <MX_LWIP_Init+0x25c>)
 8006d62:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006d64:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	061a      	lsls	r2, r3, #24
 8006d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	041b      	lsls	r3, r3, #16
 8006d70:	431a      	orrs	r2, r3
 8006d72:	4b59      	ldr	r3, [pc, #356]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d74:	789b      	ldrb	r3, [r3, #2]
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	4a57      	ldr	r2, [pc, #348]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d7c:	78d2      	ldrb	r2, [r2, #3]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	061a      	lsls	r2, r3, #24
 8006d82:	4b55      	ldr	r3, [pc, #340]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	0619      	lsls	r1, r3, #24
 8006d88:	4b53      	ldr	r3, [pc, #332]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	4319      	orrs	r1, r3
 8006d90:	4b51      	ldr	r3, [pc, #324]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d92:	789b      	ldrb	r3, [r3, #2]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	430b      	orrs	r3, r1
 8006d98:	494f      	ldr	r1, [pc, #316]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006d9a:	78c9      	ldrb	r1, [r1, #3]
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006da4:	431a      	orrs	r2, r3
 8006da6:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	0619      	lsls	r1, r3, #24
 8006dac:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	041b      	lsls	r3, r3, #16
 8006db2:	4319      	orrs	r1, r3
 8006db4:	4b48      	ldr	r3, [pc, #288]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006db6:	789b      	ldrb	r3, [r3, #2]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	4946      	ldr	r1, [pc, #280]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006dbe:	78c9      	ldrb	r1, [r1, #3]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	4b43      	ldr	r3, [pc, #268]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	0619      	lsls	r1, r3, #24
 8006dd0:	4b41      	ldr	r3, [pc, #260]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	4319      	orrs	r1, r3
 8006dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006dda:	789b      	ldrb	r3, [r3, #2]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	430b      	orrs	r3, r1
 8006de0:	493d      	ldr	r1, [pc, #244]	@ (8006ed8 <MX_LWIP_Init+0x254>)
 8006de2:	78c9      	ldrb	r1, [r1, #3]
 8006de4:	430b      	orrs	r3, r1
 8006de6:	0e1b      	lsrs	r3, r3, #24
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a3e      	ldr	r2, [pc, #248]	@ (8006ee4 <MX_LWIP_Init+0x260>)
 8006dec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006dee:	4b3b      	ldr	r3, [pc, #236]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	061a      	lsls	r2, r3, #24
 8006df4:	4b39      	ldr	r3, [pc, #228]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	4b37      	ldr	r3, [pc, #220]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006dfe:	789b      	ldrb	r3, [r3, #2]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	4313      	orrs	r3, r2
 8006e04:	4a35      	ldr	r2, [pc, #212]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e06:	78d2      	ldrb	r2, [r2, #3]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	061a      	lsls	r2, r3, #24
 8006e0c:	4b33      	ldr	r3, [pc, #204]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	0619      	lsls	r1, r3, #24
 8006e12:	4b32      	ldr	r3, [pc, #200]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	4319      	orrs	r1, r3
 8006e1a:	4b30      	ldr	r3, [pc, #192]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e1c:	789b      	ldrb	r3, [r3, #2]
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	430b      	orrs	r3, r1
 8006e22:	492e      	ldr	r1, [pc, #184]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e24:	78c9      	ldrb	r1, [r1, #3]
 8006e26:	430b      	orrs	r3, r1
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	4b2a      	ldr	r3, [pc, #168]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	0619      	lsls	r1, r3, #24
 8006e36:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	041b      	lsls	r3, r3, #16
 8006e3c:	4319      	orrs	r1, r3
 8006e3e:	4b27      	ldr	r3, [pc, #156]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e40:	789b      	ldrb	r3, [r3, #2]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	430b      	orrs	r3, r1
 8006e46:	4925      	ldr	r1, [pc, #148]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e48:	78c9      	ldrb	r1, [r1, #3]
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e52:	431a      	orrs	r2, r3
 8006e54:	4b21      	ldr	r3, [pc, #132]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	0619      	lsls	r1, r3, #24
 8006e5a:	4b20      	ldr	r3, [pc, #128]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	4319      	orrs	r1, r3
 8006e62:	4b1e      	ldr	r3, [pc, #120]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e64:	789b      	ldrb	r3, [r3, #2]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	491c      	ldr	r1, [pc, #112]	@ (8006edc <MX_LWIP_Init+0x258>)
 8006e6c:	78c9      	ldrb	r1, [r1, #3]
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	0e1b      	lsrs	r3, r3, #24
 8006e72:	4313      	orrs	r3, r2
 8006e74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee8 <MX_LWIP_Init+0x264>)
 8006e76:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006e78:	4b1c      	ldr	r3, [pc, #112]	@ (8006eec <MX_LWIP_Init+0x268>)
 8006e7a:	9302      	str	r3, [sp, #8]
 8006e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <MX_LWIP_Init+0x26c>)
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4b18      	ldr	r3, [pc, #96]	@ (8006ee8 <MX_LWIP_Init+0x264>)
 8006e86:	4a17      	ldr	r2, [pc, #92]	@ (8006ee4 <MX_LWIP_Init+0x260>)
 8006e88:	4915      	ldr	r1, [pc, #84]	@ (8006ee0 <MX_LWIP_Init+0x25c>)
 8006e8a:	481a      	ldr	r0, [pc, #104]	@ (8006ef4 <MX_LWIP_Init+0x270>)
 8006e8c:	f007 fa70 	bl	800e370 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006e90:	4818      	ldr	r0, [pc, #96]	@ (8006ef4 <MX_LWIP_Init+0x270>)
 8006e92:	f007 fc1f 	bl	800e6d4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006e96:	4817      	ldr	r0, [pc, #92]	@ (8006ef4 <MX_LWIP_Init+0x270>)
 8006e98:	f007 fc2c 	bl	800e6f4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006e9c:	4916      	ldr	r1, [pc, #88]	@ (8006ef8 <MX_LWIP_Init+0x274>)
 8006e9e:	4815      	ldr	r0, [pc, #84]	@ (8006ef4 <MX_LWIP_Init+0x270>)
 8006ea0:	f007 fd2a 	bl	800e8f8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006ea4:	2224      	movs	r2, #36	@ 0x24
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4814      	ldr	r0, [pc, #80]	@ (8006efc <MX_LWIP_Init+0x278>)
 8006eaa:	f011 fa0a 	bl	80182c2 <memset>
  attributes.name = "EthLink";
 8006eae:	4b13      	ldr	r3, [pc, #76]	@ (8006efc <MX_LWIP_Init+0x278>)
 8006eb0:	4a13      	ldr	r2, [pc, #76]	@ (8006f00 <MX_LWIP_Init+0x27c>)
 8006eb2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006eb4:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <MX_LWIP_Init+0x278>)
 8006eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006eba:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8006efc <MX_LWIP_Init+0x278>)
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8006efc <MX_LWIP_Init+0x278>)
 8006ec4:	490b      	ldr	r1, [pc, #44]	@ (8006ef4 <MX_LWIP_Init+0x270>)
 8006ec6:	480f      	ldr	r0, [pc, #60]	@ (8006f04 <MX_LWIP_Init+0x280>)
 8006ec8:	f002 fd1f 	bl	800990a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200007f4 	.word	0x200007f4
 8006ed8:	200007f8 	.word	0x200007f8
 8006edc:	200007fc 	.word	0x200007fc
 8006ee0:	200007e8 	.word	0x200007e8
 8006ee4:	200007ec 	.word	0x200007ec
 8006ee8:	200007f0 	.word	0x200007f0
 8006eec:	0800d719 	.word	0x0800d719
 8006ef0:	080073c9 	.word	0x080073c9
 8006ef4:	200007b4 	.word	0x200007b4
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	20000800 	.word	0x20000800
 8006f00:	080190dc 	.word	0x080190dc
 8006f04:	080076ad 	.word	0x080076ad

08006f08 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006f24:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <HAL_ETH_RxCpltCallback+0x1c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f002 ff85 	bl	8009e38 <osSemaphoreRelease>
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	200052f0 	.word	0x200052f0

08006f3c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <HAL_ETH_TxCpltCallback+0x1c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f002 ff75 	bl	8009e38 <osSemaphoreRelease>
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200052f4 	.word	0x200052f4

08006f5c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fb f87f 	bl	8002068 <HAL_ETH_GetDMAError>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f70:	2b80      	cmp	r3, #128	@ 0x80
 8006f72:	d104      	bne.n	8006f7e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <HAL_ETH_ErrorCallback+0x2c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f002 ff5d 	bl	8009e38 <osSemaphoreRelease>
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200052f0 	.word	0x200052f0

08006f8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b0aa      	sub	sp, #168	@ 0xa8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8006fa6:	f107 0310 	add.w	r3, r7, #16
 8006faa:	2264      	movs	r2, #100	@ 0x64
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f011 f987 	bl	80182c2 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006fb4:	4b89      	ldr	r3, [pc, #548]	@ (80071dc <low_level_init+0x250>)
 8006fb6:	4a8a      	ldr	r2, [pc, #552]	@ (80071e0 <low_level_init+0x254>)
 8006fb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006fbe:	2380      	movs	r3, #128	@ 0x80
 8006fc0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006fc2:	23e1      	movs	r3, #225	@ 0xe1
 8006fc4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006fd2:	4a82      	ldr	r2, [pc, #520]	@ (80071dc <low_level_init+0x250>)
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006fda:	4b80      	ldr	r3, [pc, #512]	@ (80071dc <low_level_init+0x250>)
 8006fdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006fe0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80071dc <low_level_init+0x250>)
 8006fe4:	4a7f      	ldr	r2, [pc, #508]	@ (80071e4 <low_level_init+0x258>)
 8006fe6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80071dc <low_level_init+0x250>)
 8006fea:	4a7f      	ldr	r2, [pc, #508]	@ (80071e8 <low_level_init+0x25c>)
 8006fec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006fee:	4b7b      	ldr	r3, [pc, #492]	@ (80071dc <low_level_init+0x250>)
 8006ff0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006ff4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006ff6:	4879      	ldr	r0, [pc, #484]	@ (80071dc <low_level_init+0x250>)
 8006ff8:	f7fa f9f8 	bl	80013ec <HAL_ETH_Init>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007002:	2238      	movs	r2, #56	@ 0x38
 8007004:	2100      	movs	r1, #0
 8007006:	4879      	ldr	r0, [pc, #484]	@ (80071ec <low_level_init+0x260>)
 8007008:	f011 f95b 	bl	80182c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800700c:	4b77      	ldr	r3, [pc, #476]	@ (80071ec <low_level_init+0x260>)
 800700e:	2221      	movs	r2, #33	@ 0x21
 8007010:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007012:	4b76      	ldr	r3, [pc, #472]	@ (80071ec <low_level_init+0x260>)
 8007014:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007018:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800701a:	4b74      	ldr	r3, [pc, #464]	@ (80071ec <low_level_init+0x260>)
 800701c:	2200      	movs	r2, #0
 800701e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007020:	4873      	ldr	r0, [pc, #460]	@ (80071f0 <low_level_init+0x264>)
 8007022:	f007 f85f 	bl	800e0e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2206      	movs	r2, #6
 800702a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800702e:	4b6b      	ldr	r3, [pc, #428]	@ (80071dc <low_level_init+0x250>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800703a:	4b68      	ldr	r3, [pc, #416]	@ (80071dc <low_level_init+0x250>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	785a      	ldrb	r2, [r3, #1]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007046:	4b65      	ldr	r3, [pc, #404]	@ (80071dc <low_level_init+0x250>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	789a      	ldrb	r2, [r3, #2]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007052:	4b62      	ldr	r3, [pc, #392]	@ (80071dc <low_level_init+0x250>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	78da      	ldrb	r2, [r3, #3]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800705e:	4b5f      	ldr	r3, [pc, #380]	@ (80071dc <low_level_init+0x250>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	791a      	ldrb	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800706a:	4b5c      	ldr	r3, [pc, #368]	@ (80071dc <low_level_init+0x250>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	795a      	ldrb	r2, [r3, #5]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800707c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007084:	f043 030a 	orr.w	r3, r3, #10
 8007088:	b2da      	uxtb	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8007090:	2200      	movs	r2, #0
 8007092:	2100      	movs	r1, #0
 8007094:	2001      	movs	r0, #1
 8007096:	f002 fdf3 	bl	8009c80 <osSemaphoreNew>
 800709a:	4603      	mov	r3, r0
 800709c:	4a55      	ldr	r2, [pc, #340]	@ (80071f4 <low_level_init+0x268>)
 800709e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	2001      	movs	r0, #1
 80070a6:	f002 fdeb 	bl	8009c80 <osSemaphoreNew>
 80070aa:	4603      	mov	r3, r0
 80070ac:	4a52      	ldr	r2, [pc, #328]	@ (80071f8 <low_level_init+0x26c>)
 80070ae:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80070b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80070b4:	2224      	movs	r2, #36	@ 0x24
 80070b6:	2100      	movs	r1, #0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f011 f902 	bl	80182c2 <memset>
  attributes.name = "EthIf";
 80070be:	4b4f      	ldr	r3, [pc, #316]	@ (80071fc <low_level_init+0x270>)
 80070c0:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80070c2:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80070c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 80070ca:	2330      	movs	r3, #48	@ 0x30
 80070cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80070d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80070d4:	461a      	mov	r2, r3
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4849      	ldr	r0, [pc, #292]	@ (8007200 <low_level_init+0x274>)
 80070da:	f002 fc16 	bl	800990a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80070de:	4949      	ldr	r1, [pc, #292]	@ (8007204 <low_level_init+0x278>)
 80070e0:	4849      	ldr	r0, [pc, #292]	@ (8007208 <low_level_init+0x27c>)
 80070e2:	f7f9 feda 	bl	8000e9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80070e6:	4848      	ldr	r0, [pc, #288]	@ (8007208 <low_level_init+0x27c>)
 80070e8:	f7f9 ff09 	bl	8000efe <LAN8742_Init>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f007 fbd0 	bl	800e898 <netif_set_link_down>
    netif_set_down(netif);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f007 fb67 	bl	800e7cc <netif_set_down>
 80070fe:	e06a      	b.n	80071d6 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007100:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d164      	bne.n	80071d2 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007108:	483f      	ldr	r0, [pc, #252]	@ (8007208 <low_level_init+0x27c>)
 800710a:	f7f9 ffa0 	bl	800104e <LAN8742_GetLinkState>
 800710e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007116:	2b01      	cmp	r3, #1
 8007118:	dc06      	bgt.n	8007128 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f007 fbbc 	bl	800e898 <netif_set_link_down>
      netif_set_down(netif);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f007 fb53 	bl	800e7cc <netif_set_down>
 8007126:	e056      	b.n	80071d6 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8007128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800712c:	3b02      	subs	r3, #2
 800712e:	2b03      	cmp	r3, #3
 8007130:	d82a      	bhi.n	8007188 <low_level_init+0x1fc>
 8007132:	a201      	add	r2, pc, #4	@ (adr r2, 8007138 <low_level_init+0x1ac>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007149 	.word	0x08007149
 800713c:	0800715b 	.word	0x0800715b
 8007140:	0800716b 	.word	0x0800716b
 8007144:	0800717b 	.word	0x0800717b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007148:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800714c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007150:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007154:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007158:	e01f      	b.n	800719a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800715a:	2300      	movs	r3, #0
 800715c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007160:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007168:	e017      	b.n	800719a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800716a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800716e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007172:	2300      	movs	r3, #0
 8007174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007178:	e00f      	b.n	800719a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800717a:	2300      	movs	r3, #0
 800717c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8007180:	2300      	movs	r3, #0
 8007182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007186:	e008      	b.n	800719a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8007188:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800718c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8007190:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007198:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800719a:	f107 0310 	add.w	r3, r7, #16
 800719e:	4619      	mov	r1, r3
 80071a0:	480e      	ldr	r0, [pc, #56]	@ (80071dc <low_level_init+0x250>)
 80071a2:	f7fa fe07 	bl	8001db4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80071a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80071aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80071ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80071b2:	f107 0310 	add.w	r3, r7, #16
 80071b6:	4619      	mov	r1, r3
 80071b8:	4808      	ldr	r0, [pc, #32]	@ (80071dc <low_level_init+0x250>)
 80071ba:	f7fa fee5 	bl	8001f88 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80071be:	4807      	ldr	r0, [pc, #28]	@ (80071dc <low_level_init+0x250>)
 80071c0:	f7fa f992 	bl	80014e8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f007 fa95 	bl	800e6f4 <netif_set_up>
    netif_set_link_up(netif);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f007 fb30 	bl	800e830 <netif_set_link_up>
 80071d0:	e001      	b.n	80071d6 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 80071d2:	f7f9 fbb1 	bl	8000938 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80071d6:	37a8      	adds	r7, #168	@ 0xa8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	200052f8 	.word	0x200052f8
 80071e0:	40028000 	.word	0x40028000
 80071e4:	20005250 	.word	0x20005250
 80071e8:	200051b0 	.word	0x200051b0
 80071ec:	200053a8 	.word	0x200053a8
 80071f0:	0801bc64 	.word	0x0801bc64
 80071f4:	200052f0 	.word	0x200052f0
 80071f8:	200052f4 	.word	0x200052f4
 80071fc:	080190e4 	.word	0x080190e4
 8007200:	08007375 	.word	0x08007375
 8007204:	2000000c 	.word	0x2000000c
 8007208:	200053e0 	.word	0x200053e0

0800720c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b092      	sub	sp, #72	@ 0x48
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	2230      	movs	r2, #48	@ 0x30
 800722a:	2100      	movs	r1, #0
 800722c:	4618      	mov	r0, r3
 800722e:	f011 f848 	bl	80182c2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007232:	f107 030c 	add.w	r3, r7, #12
 8007236:	2230      	movs	r2, #48	@ 0x30
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f011 f841 	bl	80182c2 <memset>

  for(q = p; q != NULL; q = q->next)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	643b      	str	r3, [r7, #64]	@ 0x40
 8007244:	e045      	b.n	80072d2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007248:	2b03      	cmp	r3, #3
 800724a:	d902      	bls.n	8007252 <low_level_output+0x46>
      return ERR_IF;
 800724c:	f06f 030b 	mvn.w	r3, #11
 8007250:	e06c      	b.n	800732c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8007252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007254:	6859      	ldr	r1, [r3, #4]
 8007256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	3348      	adds	r3, #72	@ 0x48
 8007262:	443b      	add	r3, r7
 8007264:	3b3c      	subs	r3, #60	@ 0x3c
 8007266:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800726a:	895b      	ldrh	r3, [r3, #10]
 800726c:	4619      	mov	r1, r3
 800726e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	3348      	adds	r3, #72	@ 0x48
 800727a:	443b      	add	r3, r7
 800727c:	3b38      	subs	r3, #56	@ 0x38
 800727e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007288:	1e5a      	subs	r2, r3, #1
 800728a:	f107 000c 	add.w	r0, r7, #12
 800728e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007290:	460b      	mov	r3, r1
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	440b      	add	r3, r1
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	18c1      	adds	r1, r0, r3
 800729a:	4613      	mov	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	3348      	adds	r3, #72	@ 0x48
 80072a4:	443b      	add	r3, r7
 80072a6:	3b34      	subs	r3, #52	@ 0x34
 80072a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80072aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80072b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	3348      	adds	r3, #72	@ 0x48
 80072be:	443b      	add	r3, r7
 80072c0:	3b34      	subs	r3, #52	@ 0x34
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80072c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c8:	3301      	adds	r3, #1
 80072ca:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80072cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1b6      	bne.n	8007246 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	891b      	ldrh	r3, [r3, #8]
 80072dc:	461a      	mov	r2, r3
 80072de:	4b15      	ldr	r3, [pc, #84]	@ (8007334 <low_level_output+0x128>)
 80072e0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80072e2:	4a14      	ldr	r2, [pc, #80]	@ (8007334 <low_level_output+0x128>)
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80072ea:	4a12      	ldr	r2, [pc, #72]	@ (8007334 <low_level_output+0x128>)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80072f0:	6838      	ldr	r0, [r7, #0]
 80072f2:	f007 ff55 	bl	800f1a0 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80072f6:	490f      	ldr	r1, [pc, #60]	@ (8007334 <low_level_output+0x128>)
 80072f8:	480f      	ldr	r0, [pc, #60]	@ (8007338 <low_level_output+0x12c>)
 80072fa:	f7fa fa02 	bl	8001702 <HAL_ETH_Transmit_IT>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10e      	bne.n	8007322 <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8007304:	bf00      	nop
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <low_level_output+0x130>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f04f 31ff 	mov.w	r1, #4294967295
 800730e:	4618      	mov	r0, r3
 8007310:	f002 fd40 	bl	8009d94 <osSemaphoreAcquire>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1f5      	bne.n	8007306 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800731a:	4807      	ldr	r0, [pc, #28]	@ (8007338 <low_level_output+0x12c>)
 800731c:	f7fa fb84 	bl	8001a28 <HAL_ETH_ReleaseTxPacket>
 8007320:	e002      	b.n	8007328 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8007322:	6838      	ldr	r0, [r7, #0]
 8007324:	f007 fe96 	bl	800f054 <pbuf_free>
  }

  return errval;
 8007328:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800732c:	4618      	mov	r0, r3
 800732e:	3748      	adds	r7, #72	@ 0x48
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	200053a8 	.word	0x200053a8
 8007338:	200052f8 	.word	0x200052f8
 800733c:	200052f4 	.word	0x200052f4

08007340 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800734c:	4b07      	ldr	r3, [pc, #28]	@ (800736c <low_level_input+0x2c>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	4619      	mov	r1, r3
 800735a:	4805      	ldr	r0, [pc, #20]	@ (8007370 <low_level_input+0x30>)
 800735c:	f7fa fa2d 	bl	80017ba <HAL_ETH_ReadData>
  }

  return p;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	200051ac 	.word	0x200051ac
 8007370:	200052f8 	.word	0x200052f8

08007374 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007384:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <ethernetif_input+0x50>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f04f 31ff 	mov.w	r1, #4294967295
 800738c:	4618      	mov	r0, r3
 800738e:	f002 fd01 	bl	8009d94 <osSemaphoreAcquire>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f5      	bne.n	8007384 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	f7ff ffd1 	bl	8007340 <low_level_input>
 800739e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	4798      	blx	r3
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f007 fe4c 	bl	800f054 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1ea      	bne.n	8007398 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80073c2:	e7df      	b.n	8007384 <ethernetif_input+0x10>
 80073c4:	200052f0 	.word	0x200052f0

080073c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <ethernetif_init+0x1c>
 80073d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007410 <ethernetif_init+0x48>)
 80073d8:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 80073dc:	490d      	ldr	r1, [pc, #52]	@ (8007414 <ethernetif_init+0x4c>)
 80073de:	480e      	ldr	r0, [pc, #56]	@ (8007418 <ethernetif_init+0x50>)
 80073e0:	f010 ff0a 	bl	80181f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2273      	movs	r2, #115	@ 0x73
 80073e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2274      	movs	r2, #116	@ 0x74
 80073f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a09      	ldr	r2, [pc, #36]	@ (800741c <ethernetif_init+0x54>)
 80073f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <ethernetif_init+0x58>)
 80073fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fdc3 	bl	8006f8c <low_level_init>

  return ERR_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	080190ec 	.word	0x080190ec
 8007414:	08019108 	.word	0x08019108
 8007418:	08019118 	.word	0x08019118
 800741c:	08015739 	.word	0x08015739
 8007420:	0800720d 	.word	0x0800720d

08007424 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	4809      	ldr	r0, [pc, #36]	@ (8007458 <pbuf_free_custom+0x34>)
 8007434:	f006 ff46 	bl	800e2c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007438:	4b08      	ldr	r3, [pc, #32]	@ (800745c <pbuf_free_custom+0x38>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d107      	bne.n	8007450 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007440:	4b06      	ldr	r3, [pc, #24]	@ (800745c <pbuf_free_custom+0x38>)
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <pbuf_free_custom+0x3c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f002 fcf4 	bl	8009e38 <osSemaphoreRelease>
  }
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	0801bc64 	.word	0x0801bc64
 800745c:	200051ac 	.word	0x200051ac
 8007460:	200052f0 	.word	0x200052f0

08007464 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007468:	f7f9 feae 	bl	80011c8 <HAL_GetTick>
 800746c:	4603      	mov	r3, r0
}
 800746e:	4618      	mov	r0, r3
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08e      	sub	sp, #56	@ 0x38
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800747c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	605a      	str	r2, [r3, #4]
 8007486:	609a      	str	r2, [r3, #8]
 8007488:	60da      	str	r2, [r3, #12]
 800748a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a59      	ldr	r2, [pc, #356]	@ (80075f8 <HAL_ETH_MspInit+0x184>)
 8007492:	4293      	cmp	r3, r2
 8007494:	f040 80ac 	bne.w	80075f0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007498:	2300      	movs	r3, #0
 800749a:	623b      	str	r3, [r7, #32]
 800749c:	4b57      	ldr	r3, [pc, #348]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 800749e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a0:	4a56      	ldr	r2, [pc, #344]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80074a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80074a8:	4b54      	ldr	r3, [pc, #336]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	623b      	str	r3, [r7, #32]
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	4b50      	ldr	r3, [pc, #320]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074bc:	4a4f      	ldr	r2, [pc, #316]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80074c4:	4b4d      	ldr	r3, [pc, #308]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	4b49      	ldr	r3, [pc, #292]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d8:	4a48      	ldr	r2, [pc, #288]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074de:	6313      	str	r3, [r2, #48]	@ 0x30
 80074e0:	4b46      	ldr	r3, [pc, #280]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	4b42      	ldr	r3, [pc, #264]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f4:	4a41      	ldr	r2, [pc, #260]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074f6:	f043 0304 	orr.w	r3, r3, #4
 80074fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80074fc:	4b3f      	ldr	r3, [pc, #252]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 80074fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	4b3b      	ldr	r3, [pc, #236]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007510:	4a3a      	ldr	r2, [pc, #232]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	6313      	str	r3, [r2, #48]	@ 0x30
 8007518:	4b38      	ldr	r3, [pc, #224]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	4b34      	ldr	r3, [pc, #208]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 800752e:	f043 0302 	orr.w	r3, r3, #2
 8007532:	6313      	str	r3, [r2, #48]	@ 0x30
 8007534:	4b31      	ldr	r3, [pc, #196]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007540:	2300      	movs	r3, #0
 8007542:	60bb      	str	r3, [r7, #8]
 8007544:	4b2d      	ldr	r3, [pc, #180]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 8007546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007548:	4a2c      	ldr	r2, [pc, #176]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 800754a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800754e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007550:	4b2a      	ldr	r3, [pc, #168]	@ (80075fc <HAL_ETH_MspInit+0x188>)
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800755c:	2332      	movs	r3, #50	@ 0x32
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007560:	2302      	movs	r3, #2
 8007562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007564:	2300      	movs	r3, #0
 8007566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007568:	2303      	movs	r3, #3
 800756a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800756c:	230b      	movs	r3, #11
 800756e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007574:	4619      	mov	r1, r3
 8007576:	4822      	ldr	r0, [pc, #136]	@ (8007600 <HAL_ETH_MspInit+0x18c>)
 8007578:	f7fb f988 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800757c:	2386      	movs	r3, #134	@ 0x86
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007580:	2302      	movs	r3, #2
 8007582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007588:	2303      	movs	r3, #3
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800758c:	230b      	movs	r3, #11
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007594:	4619      	mov	r1, r3
 8007596:	481b      	ldr	r0, [pc, #108]	@ (8007604 <HAL_ETH_MspInit+0x190>)
 8007598:	f7fb f978 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800759c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a2:	2302      	movs	r3, #2
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075aa:	2303      	movs	r3, #3
 80075ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075ae:	230b      	movs	r3, #11
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b6:	4619      	mov	r1, r3
 80075b8:	4813      	ldr	r0, [pc, #76]	@ (8007608 <HAL_ETH_MspInit+0x194>)
 80075ba:	f7fb f967 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80075be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c4:	2302      	movs	r3, #2
 80075c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075cc:	2303      	movs	r3, #3
 80075ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075d0:	230b      	movs	r3, #11
 80075d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80075d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075d8:	4619      	mov	r1, r3
 80075da:	480c      	ldr	r0, [pc, #48]	@ (800760c <HAL_ETH_MspInit+0x198>)
 80075dc:	f7fb f956 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80075e0:	2200      	movs	r2, #0
 80075e2:	2105      	movs	r1, #5
 80075e4:	203d      	movs	r0, #61	@ 0x3d
 80075e6:	f7f9 fed7 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80075ea:	203d      	movs	r0, #61	@ 0x3d
 80075ec:	f7f9 fef0 	bl	80013d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80075f0:	bf00      	nop
 80075f2:	3738      	adds	r7, #56	@ 0x38
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40028000 	.word	0x40028000
 80075fc:	40023800 	.word	0x40023800
 8007600:	40020800 	.word	0x40020800
 8007604:	40020000 	.word	0x40020000
 8007608:	40020400 	.word	0x40020400
 800760c:	40021800 	.word	0x40021800

08007610 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007614:	4802      	ldr	r0, [pc, #8]	@ (8007620 <ETH_PHY_IO_Init+0x10>)
 8007616:	f7fa fcd1 	bl	8001fbc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200052f8 	.word	0x200052f8

08007624 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return 0;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	68f9      	ldr	r1, [r7, #12]
 8007646:	4807      	ldr	r0, [pc, #28]	@ (8007664 <ETH_PHY_IO_ReadReg+0x30>)
 8007648:	f7fa fb20 	bl	8001c8c <HAL_ETH_ReadPHYRegister>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007652:	f04f 33ff 	mov.w	r3, #4294967295
 8007656:	e000      	b.n	800765a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200052f8 	.word	0x200052f8

08007668 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	68f9      	ldr	r1, [r7, #12]
 800767a:	4807      	ldr	r0, [pc, #28]	@ (8007698 <ETH_PHY_IO_WriteReg+0x30>)
 800767c:	f7fa fb51 	bl	8001d22 <HAL_ETH_WritePHYRegister>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007686:	f04f 33ff 	mov.w	r3, #4294967295
 800768a:	e000      	b.n	800768e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200052f8 	.word	0x200052f8

0800769c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80076a0:	f7f9 fd92 	bl	80011c8 <HAL_GetTick>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b0a0      	sub	sp, #128	@ 0x80
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80076b4:	f107 0308 	add.w	r3, r7, #8
 80076b8:	2264      	movs	r2, #100	@ 0x64
 80076ba:	2100      	movs	r1, #0
 80076bc:	4618      	mov	r0, r3
 80076be:	f010 fe00 	bl	80182c2 <memset>
  int32_t PHYLinkState = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076ca:	2300      	movs	r3, #0
 80076cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076ce:	2300      	movs	r3, #0
 80076d0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80076d6:	483a      	ldr	r0, [pc, #232]	@ (80077c0 <ethernet_link_thread+0x114>)
 80076d8:	f7f9 fcb9 	bl	800104e <LAN8742_GetLinkState>
 80076dc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80076de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80076e4:	089b      	lsrs	r3, r3, #2
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00c      	beq.n	800770a <ethernet_link_thread+0x5e>
 80076f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	dc09      	bgt.n	800770a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80076f6:	4833      	ldr	r0, [pc, #204]	@ (80077c4 <ethernet_link_thread+0x118>)
 80076f8:	f7f9 ff84 	bl	8001604 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80076fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076fe:	f007 f865 	bl	800e7cc <netif_set_down>
    netif_set_link_down(netif);
 8007702:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007704:	f007 f8c8 	bl	800e898 <netif_set_link_down>
 8007708:	e055      	b.n	80077b6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800770a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d14e      	bne.n	80077b6 <ethernet_link_thread+0x10a>
 8007718:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800771a:	2b01      	cmp	r3, #1
 800771c:	dd4b      	ble.n	80077b6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800771e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007720:	3b02      	subs	r3, #2
 8007722:	2b03      	cmp	r3, #3
 8007724:	d82a      	bhi.n	800777c <ethernet_link_thread+0xd0>
 8007726:	a201      	add	r2, pc, #4	@ (adr r2, 800772c <ethernet_link_thread+0x80>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	0800773d 	.word	0x0800773d
 8007730:	0800774f 	.word	0x0800774f
 8007734:	0800775f 	.word	0x0800775f
 8007738:	0800776f 	.word	0x0800776f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800773c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007740:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007742:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007746:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007748:	2301      	movs	r3, #1
 800774a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800774c:	e017      	b.n	800777e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800774e:	2300      	movs	r3, #0
 8007750:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007752:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007756:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007758:	2301      	movs	r3, #1
 800775a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800775c:	e00f      	b.n	800777e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800775e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007762:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007764:	2300      	movs	r3, #0
 8007766:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007768:	2301      	movs	r3, #1
 800776a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800776c:	e007      	b.n	800777e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800776e:	2300      	movs	r3, #0
 8007770:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007772:	2300      	movs	r3, #0
 8007774:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8007776:	2301      	movs	r3, #1
 8007778:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800777a:	e000      	b.n	800777e <ethernet_link_thread+0xd2>
    default:
      break;
 800777c:	bf00      	nop
    }

    if(linkchanged)
 800777e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d018      	beq.n	80077b6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4619      	mov	r1, r3
 800778a:	480e      	ldr	r0, [pc, #56]	@ (80077c4 <ethernet_link_thread+0x118>)
 800778c:	f7fa fb12 	bl	8001db4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007792:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007796:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	4619      	mov	r1, r3
 800779e:	4809      	ldr	r0, [pc, #36]	@ (80077c4 <ethernet_link_thread+0x118>)
 80077a0:	f7fa fbf2 	bl	8001f88 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80077a4:	4807      	ldr	r0, [pc, #28]	@ (80077c4 <ethernet_link_thread+0x118>)
 80077a6:	f7f9 fe9f 	bl	80014e8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80077aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077ac:	f006 ffa2 	bl	800e6f4 <netif_set_up>
      netif_set_link_up(netif);
 80077b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077b2:	f007 f83d 	bl	800e830 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80077b6:	2064      	movs	r0, #100	@ 0x64
 80077b8:	f002 f939 	bl	8009a2e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80077bc:	e78b      	b.n	80076d6 <ethernet_link_thread+0x2a>
 80077be:	bf00      	nop
 80077c0:	200053e0 	.word	0x200053e0
 80077c4:	200052f8 	.word	0x200052f8

080077c8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80077d0:	4812      	ldr	r0, [pc, #72]	@ (800781c <HAL_ETH_RxAllocateCallback+0x54>)
 80077d2:	f006 fd03 	bl	800e1dc <memp_malloc_pool>
 80077d6:	60f8      	str	r0, [r7, #12]
  if (p)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d014      	beq.n	8007808 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f103 0220 	add.w	r2, r3, #32
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007820 <HAL_ETH_RxAllocateCallback+0x58>)
 80077ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80077f6:	9201      	str	r2, [sp, #4]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2241      	movs	r2, #65	@ 0x41
 80077fe:	2100      	movs	r1, #0
 8007800:	2000      	movs	r0, #0
 8007802:	f007 fa6d 	bl	800ece0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007806:	e005      	b.n	8007814 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <HAL_ETH_RxAllocateCallback+0x5c>)
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	0801bc64 	.word	0x0801bc64
 8007820:	08007425 	.word	0x08007425
 8007824:	200051ac 	.word	0x200051ac

08007828 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007828:	b480      	push	{r7}
 800782a:	b089      	sub	sp, #36	@ 0x24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3b20      	subs	r3, #32
 8007846:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2200      	movs	r2, #0
 8007852:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	887a      	ldrh	r2, [r7, #2]
 8007858:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e003      	b.n	8007872 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	e009      	b.n	8007894 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	891a      	ldrh	r2, [r3, #8]
 8007884:	887b      	ldrh	r3, [r7, #2]
 8007886:	4413      	add	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	61fb      	str	r3, [r7, #28]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1f2      	bne.n	8007880 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	3724      	adds	r7, #36	@ 0x24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f007 fbcf 	bl	800f054 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80078d0:	f010 fb4e 	bl	8017f70 <USBD_static_malloc>
 80078d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	32b0      	adds	r2, #176	@ 0xb0
 80078e6:	2100      	movs	r1, #0
 80078e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078ec:	2302      	movs	r3, #2
 80078ee:	e0d4      	b.n	8007a9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80078f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80078f4:	2100      	movs	r1, #0
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f010 fce3 	bl	80182c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32b0      	adds	r2, #176	@ 0xb0
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	32b0      	adds	r2, #176	@ 0xb0
 8007916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7c1b      	ldrb	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d138      	bne.n	800799a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007928:	4b5e      	ldr	r3, [pc, #376]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 800792a:	7819      	ldrb	r1, [r3, #0]
 800792c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007930:	2202      	movs	r2, #2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f010 f9f9 	bl	8017d2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007938:	4b5a      	ldr	r3, [pc, #360]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 020f 	and.w	r2, r3, #15
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3324      	adds	r3, #36	@ 0x24
 800794e:	2201      	movs	r2, #1
 8007950:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007952:	4b55      	ldr	r3, [pc, #340]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007954:	7819      	ldrb	r1, [r3, #0]
 8007956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800795a:	2202      	movs	r2, #2
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f010 f9e4 	bl	8017d2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007962:	4b51      	ldr	r3, [pc, #324]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800797a:	2201      	movs	r2, #1
 800797c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800797e:	4b4b      	ldr	r3, [pc, #300]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 020f 	and.w	r2, r3, #15
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	3326      	adds	r3, #38	@ 0x26
 8007994:	2210      	movs	r2, #16
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e035      	b.n	8007a06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800799a:	4b42      	ldr	r3, [pc, #264]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 800799c:	7819      	ldrb	r1, [r3, #0]
 800799e:	2340      	movs	r3, #64	@ 0x40
 80079a0:	2202      	movs	r2, #2
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f010 f9c1 	bl	8017d2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079a8:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa4 <USBD_CDC_Init+0x1e4>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	f003 020f 	and.w	r2, r3, #15
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	3324      	adds	r3, #36	@ 0x24
 80079be:	2201      	movs	r2, #1
 80079c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079c2:	4b39      	ldr	r3, [pc, #228]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	2340      	movs	r3, #64	@ 0x40
 80079c8:	2202      	movs	r2, #2
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f010 f9ad 	bl	8017d2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079d0:	4b35      	ldr	r3, [pc, #212]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 020f 	and.w	r2, r3, #15
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079e8:	2201      	movs	r2, #1
 80079ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079ec:	4b2f      	ldr	r3, [pc, #188]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 020f 	and.w	r2, r3, #15
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3326      	adds	r3, #38	@ 0x26
 8007a02:	2210      	movs	r2, #16
 8007a04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a06:	4b29      	ldr	r3, [pc, #164]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f010 f98b 	bl	8017d2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a14:	4b25      	ldr	r3, [pc, #148]	@ (8007aac <USBD_CDC_Init+0x1ec>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3324      	adds	r3, #36	@ 0x24
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	33b0      	adds	r3, #176	@ 0xb0
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a64:	2302      	movs	r3, #2
 8007a66:	e018      	b.n	8007a9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7c1b      	ldrb	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a70:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007a72:	7819      	ldrb	r1, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f010 fa42 	bl	8017f08 <USBD_LL_PrepareReceive>
 8007a84:	e008      	b.n	8007a98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a86:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <USBD_CDC_Init+0x1e8>)
 8007a88:	7819      	ldrb	r1, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a90:	2340      	movs	r3, #64	@ 0x40
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f010 fa38 	bl	8017f08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200000a7 	.word	0x200000a7
 8007aa8:	200000a8 	.word	0x200000a8
 8007aac:	200000a9 	.word	0x200000a9

08007ab0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007abc:	4b3a      	ldr	r3, [pc, #232]	@ (8007ba8 <USBD_CDC_DeInit+0xf8>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f010 f957 	bl	8017d76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ac8:	4b37      	ldr	r3, [pc, #220]	@ (8007ba8 <USBD_CDC_DeInit+0xf8>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	f003 020f 	and.w	r2, r3, #15
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	3324      	adds	r3, #36	@ 0x24
 8007ade:	2200      	movs	r2, #0
 8007ae0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ae2:	4b32      	ldr	r3, [pc, #200]	@ (8007bac <USBD_CDC_DeInit+0xfc>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f010 f944 	bl	8017d76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007aee:	4b2f      	ldr	r3, [pc, #188]	@ (8007bac <USBD_CDC_DeInit+0xfc>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b06:	2200      	movs	r2, #0
 8007b08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	@ (8007bb0 <USBD_CDC_DeInit+0x100>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f010 f930 	bl	8017d76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b16:	4b26      	ldr	r3, [pc, #152]	@ (8007bb0 <USBD_CDC_DeInit+0x100>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	3324      	adds	r3, #36	@ 0x24
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b30:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb0 <USBD_CDC_DeInit+0x100>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3326      	adds	r3, #38	@ 0x26
 8007b46:	2200      	movs	r2, #0
 8007b48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	32b0      	adds	r2, #176	@ 0xb0
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01f      	beq.n	8007b9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	33b0      	adds	r3, #176	@ 0xb0
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	32b0      	adds	r2, #176	@ 0xb0
 8007b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f010 fa04 	bl	8017f8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32b0      	adds	r2, #176	@ 0xb0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200000a7 	.word	0x200000a7
 8007bac:	200000a8 	.word	0x200000a8
 8007bb0:	200000a9 	.word	0x200000a9

08007bb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	32b0      	adds	r2, #176	@ 0xb0
 8007bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e0bf      	b.n	8007d64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d050      	beq.n	8007c92 <USBD_CDC_Setup+0xde>
 8007bf0:	2b20      	cmp	r3, #32
 8007bf2:	f040 80af 	bne.w	8007d54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88db      	ldrh	r3, [r3, #6]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d03a      	beq.n	8007c74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da1b      	bge.n	8007c40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	33b0      	adds	r3, #176	@ 0xb0
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	88d2      	ldrh	r2, [r2, #6]
 8007c24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	88db      	ldrh	r3, [r3, #6]
 8007c2a:	2b07      	cmp	r3, #7
 8007c2c:	bf28      	it	cs
 8007c2e:	2307      	movcs	r3, #7
 8007c30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	89fa      	ldrh	r2, [r7, #14]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fd41 	bl	80096c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c3e:	e090      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	785a      	ldrb	r2, [r3, #1]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007c50:	d803      	bhi.n	8007c5a <USBD_CDC_Setup+0xa6>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	88db      	ldrh	r3, [r3, #6]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	e000      	b.n	8007c5c <USBD_CDC_Setup+0xa8>
 8007c5a:	2240      	movs	r2, #64	@ 0x40
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c62:	6939      	ldr	r1, [r7, #16]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fd53 	bl	8009718 <USBD_CtlPrepareRx>
      break;
 8007c72:	e076      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	33b0      	adds	r3, #176	@ 0xb0
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	7850      	ldrb	r0, [r2, #1]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	4798      	blx	r3
      break;
 8007c90:	e067      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b0b      	cmp	r3, #11
 8007c98:	d851      	bhi.n	8007d3e <USBD_CDC_Setup+0x18a>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <USBD_CDC_Setup+0xec>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007d4d 	.word	0x08007d4d
 8007ca8:	08007d3f 	.word	0x08007d3f
 8007cac:	08007d3f 	.word	0x08007d3f
 8007cb0:	08007d3f 	.word	0x08007d3f
 8007cb4:	08007d3f 	.word	0x08007d3f
 8007cb8:	08007d3f 	.word	0x08007d3f
 8007cbc:	08007d3f 	.word	0x08007d3f
 8007cc0:	08007d3f 	.word	0x08007d3f
 8007cc4:	08007d3f 	.word	0x08007d3f
 8007cc8:	08007cfb 	.word	0x08007cfb
 8007ccc:	08007d25 	.word	0x08007d25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d107      	bne.n	8007cec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cdc:	f107 030a 	add.w	r3, r7, #10
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fceb 	bl	80096c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cea:	e032      	b.n	8007d52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fc75 	bl	80095de <USBD_CtlError>
            ret = USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf8:	e02b      	b.n	8007d52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d107      	bne.n	8007d16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d06:	f107 030d 	add.w	r3, r7, #13
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 fcd6 	bl	80096c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d14:	e01d      	b.n	8007d52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fc60 	bl	80095de <USBD_CtlError>
            ret = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	75fb      	strb	r3, [r7, #23]
          break;
 8007d22:	e016      	b.n	8007d52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d00f      	beq.n	8007d50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fc53 	bl	80095de <USBD_CtlError>
            ret = USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d3c:	e008      	b.n	8007d50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 fc4c 	bl	80095de <USBD_CtlError>
          ret = USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	75fb      	strb	r3, [r7, #23]
          break;
 8007d4a:	e002      	b.n	8007d52 <USBD_CDC_Setup+0x19e>
          break;
 8007d4c:	bf00      	nop
 8007d4e:	e008      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>
          break;
 8007d50:	bf00      	nop
      }
      break;
 8007d52:	e006      	b.n	8007d62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fc41 	bl	80095de <USBD_CtlError>
      ret = USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d60:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32b0      	adds	r2, #176	@ 0xb0
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e065      	b.n	8007e62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	32b0      	adds	r2, #176	@ 0xb0
 8007da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 020f 	and.w	r2, r3, #15
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	3318      	adds	r3, #24
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d02f      	beq.n	8007e20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 020f 	and.w	r2, r3, #15
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3318      	adds	r3, #24
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 010f 	and.w	r1, r3, #15
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	460b      	mov	r3, r1
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	440b      	add	r3, r1
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4403      	add	r3, r0
 8007de8:	3348      	adds	r3, #72	@ 0x48
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	fbb2 f1f3 	udiv	r1, r2, r3
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d112      	bne.n	8007e20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	f003 020f 	and.w	r2, r3, #15
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	3318      	adds	r3, #24
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e12:	78f9      	ldrb	r1, [r7, #3]
 8007e14:	2300      	movs	r3, #0
 8007e16:	2200      	movs	r2, #0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f010 f854 	bl	8017ec6 <USBD_LL_Transmit>
 8007e1e:	e01f      	b.n	8007e60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	33b0      	adds	r3, #176	@ 0xb0
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d010      	beq.n	8007e60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	33b0      	adds	r3, #176	@ 0xb0
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	32b0      	adds	r2, #176	@ 0xb0
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	32b0      	adds	r2, #176	@ 0xb0
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e01a      	b.n	8007ed2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f010 f852 	bl	8017f4a <USBD_LL_GetRxDataSize>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	33b0      	adds	r3, #176	@ 0xb0
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	32b0      	adds	r2, #176	@ 0xb0
 8007eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e024      	b.n	8007f46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	33b0      	adds	r3, #176	@ 0xb0
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d019      	beq.n	8007f44 <USBD_CDC_EP0_RxReady+0x6a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007f16:	2bff      	cmp	r3, #255	@ 0xff
 8007f18:	d014      	beq.n	8007f44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	33b0      	adds	r3, #176	@ 0xb0
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	22ff      	movs	r2, #255	@ 0xff
 8007f40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f58:	2182      	movs	r1, #130	@ 0x82
 8007f5a:	4818      	ldr	r0, [pc, #96]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f5c:	f000 fd09 	bl	8008972 <USBD_GetEpDesc>
 8007f60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f62:	2101      	movs	r1, #1
 8007f64:	4815      	ldr	r0, [pc, #84]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f66:	f000 fd04 	bl	8008972 <USBD_GetEpDesc>
 8007f6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f6c:	2181      	movs	r1, #129	@ 0x81
 8007f6e:	4813      	ldr	r0, [pc, #76]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f70:	f000 fcff 	bl	8008972 <USBD_GetEpDesc>
 8007f74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d006      	beq.n	8007f96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f90:	711a      	strb	r2, [r3, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d006      	beq.n	8007faa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa4:	711a      	strb	r2, [r3, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2243      	movs	r2, #67	@ 0x43
 8007fae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	@ (8007fbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000064 	.word	0x20000064

08007fc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fc8:	2182      	movs	r1, #130	@ 0x82
 8007fca:	4818      	ldr	r0, [pc, #96]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fcc:	f000 fcd1 	bl	8008972 <USBD_GetEpDesc>
 8007fd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4815      	ldr	r0, [pc, #84]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fd6:	f000 fccc 	bl	8008972 <USBD_GetEpDesc>
 8007fda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fdc:	2181      	movs	r1, #129	@ 0x81
 8007fde:	4813      	ldr	r0, [pc, #76]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fe0:	f000 fcc7 	bl	8008972 <USBD_GetEpDesc>
 8007fe4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	711a      	strb	r2, [r3, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f042 0202 	orr.w	r2, r2, #2
 8008004:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d006      	beq.n	800801a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	711a      	strb	r2, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f042 0202 	orr.w	r2, r2, #2
 8008018:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2243      	movs	r2, #67	@ 0x43
 800801e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008020:	4b02      	ldr	r3, [pc, #8]	@ (800802c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000064 	.word	0x20000064

08008030 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008038:	2182      	movs	r1, #130	@ 0x82
 800803a:	4818      	ldr	r0, [pc, #96]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800803c:	f000 fc99 	bl	8008972 <USBD_GetEpDesc>
 8008040:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008042:	2101      	movs	r1, #1
 8008044:	4815      	ldr	r0, [pc, #84]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008046:	f000 fc94 	bl	8008972 <USBD_GetEpDesc>
 800804a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800804c:	2181      	movs	r1, #129	@ 0x81
 800804e:	4813      	ldr	r0, [pc, #76]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008050:	f000 fc8f 	bl	8008972 <USBD_GetEpDesc>
 8008054:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2210      	movs	r2, #16
 8008060:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2200      	movs	r2, #0
 800806c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008070:	711a      	strb	r2, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d006      	beq.n	800808a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008084:	711a      	strb	r2, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2243      	movs	r2, #67	@ 0x43
 800808e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008090:	4b02      	ldr	r3, [pc, #8]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000064 	.word	0x20000064

080080a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220a      	movs	r2, #10
 80080ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000020 	.word	0x20000020

080080c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e009      	b.n	80080e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	33b0      	adds	r3, #176	@ 0xb0
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	32b0      	adds	r2, #176	@ 0xb0
 800810a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	e008      	b.n	800812c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32b0      	adds	r2, #176	@ 0xb0
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	e004      	b.n	8008166 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	32b0      	adds	r2, #176	@ 0xb0
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32b0      	adds	r2, #176	@ 0xb0
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800819e:	2303      	movs	r3, #3
 80081a0:	e018      	b.n	80081d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	7c1b      	ldrb	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081aa:	4b0c      	ldr	r3, [pc, #48]	@ (80081dc <USBD_CDC_ReceivePacket+0x68>)
 80081ac:	7819      	ldrb	r1, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f00f fea5 	bl	8017f08 <USBD_LL_PrepareReceive>
 80081be:	e008      	b.n	80081d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081c0:	4b06      	ldr	r3, [pc, #24]	@ (80081dc <USBD_CDC_ReceivePacket+0x68>)
 80081c2:	7819      	ldrb	r1, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081ca:	2340      	movs	r3, #64	@ 0x40
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f00f fe9b 	bl	8017f08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200000a8 	.word	0x200000a8

080081e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e01f      	b.n	8008238 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	79fa      	ldrb	r2, [r7, #7]
 800822a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f00f fd15 	bl	8017c5c <USBD_LL_Init>
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008254:	2303      	movs	r3, #3
 8008256:	e025      	b.n	80082a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	32ae      	adds	r2, #174	@ 0xae
 800826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00f      	beq.n	8008294 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	32ae      	adds	r2, #174	@ 0xae
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008284:	f107 020e 	add.w	r2, r7, #14
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	4602      	mov	r2, r0
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f00f fd1d 	bl	8017cf4 <USBD_LL_Start>
 80082ba:	4603      	mov	r3, r0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	4611      	mov	r1, r2
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f906 	bl	800956a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800836c:	461a      	mov	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	2b02      	cmp	r3, #2
 8008380:	d01a      	beq.n	80083b8 <USBD_LL_SetupStage+0x72>
 8008382:	2b02      	cmp	r3, #2
 8008384:	d822      	bhi.n	80083cc <USBD_LL_SetupStage+0x86>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <USBD_LL_SetupStage+0x4a>
 800838a:	2b01      	cmp	r3, #1
 800838c:	d00a      	beq.n	80083a4 <USBD_LL_SetupStage+0x5e>
 800838e:	e01d      	b.n	80083cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fb5d 	bl	8008a58 <USBD_StdDevReq>
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	e020      	b.n	80083e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fbc5 	bl	8008b3c <USBD_StdItfReq>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
      break;
 80083b6:	e016      	b.n	80083e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fc27 	bl	8008c14 <USBD_StdEPReq>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	e00c      	b.n	80083e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f00f fcea 	bl	8017db4 <USBD_LL_StallEP>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]
      break;
 80083e4:	bf00      	nop
  }

  return ret;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	460b      	mov	r3, r1
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008402:	7afb      	ldrb	r3, [r7, #11]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d16e      	bne.n	80084e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800840e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008416:	2b03      	cmp	r3, #3
 8008418:	f040 8098 	bne.w	800854c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	429a      	cmp	r2, r3
 8008426:	d913      	bls.n	8008450 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	1ad2      	subs	r2, r2, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	4293      	cmp	r3, r2
 8008440:	bf28      	it	cs
 8008442:	4613      	movcs	r3, r2
 8008444:	461a      	mov	r2, r3
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f001 f982 	bl	8009752 <USBD_CtlContinueRx>
 800844e:	e07d      	b.n	800854c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008456:	f003 031f 	and.w	r3, r3, #31
 800845a:	2b02      	cmp	r3, #2
 800845c:	d014      	beq.n	8008488 <USBD_LL_DataOutStage+0x98>
 800845e:	2b02      	cmp	r3, #2
 8008460:	d81d      	bhi.n	800849e <USBD_LL_DataOutStage+0xae>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <USBD_LL_DataOutStage+0x7c>
 8008466:	2b01      	cmp	r3, #1
 8008468:	d003      	beq.n	8008472 <USBD_LL_DataOutStage+0x82>
 800846a:	e018      	b.n	800849e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	75bb      	strb	r3, [r7, #22]
            break;
 8008470:	e018      	b.n	80084a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008478:	b2db      	uxtb	r3, r3
 800847a:	4619      	mov	r1, r3
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fa5e 	bl	800893e <USBD_CoreFindIF>
 8008482:	4603      	mov	r3, r0
 8008484:	75bb      	strb	r3, [r7, #22]
            break;
 8008486:	e00d      	b.n	80084a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4619      	mov	r1, r3
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fa60 	bl	8008958 <USBD_CoreFindEP>
 8008498:	4603      	mov	r3, r0
 800849a:	75bb      	strb	r3, [r7, #22]
            break;
 800849c:	e002      	b.n	80084a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	75bb      	strb	r3, [r7, #22]
            break;
 80084a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80084a4:	7dbb      	ldrb	r3, [r7, #22]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d119      	bne.n	80084de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d113      	bne.n	80084de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80084b6:	7dba      	ldrb	r2, [r7, #22]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	32ae      	adds	r2, #174	@ 0xae
 80084bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00b      	beq.n	80084de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80084c6:	7dba      	ldrb	r2, [r7, #22]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084ce:	7dba      	ldrb	r2, [r7, #22]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	32ae      	adds	r2, #174	@ 0xae
 80084d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f001 f948 	bl	8009774 <USBD_CtlSendStatus>
 80084e4:	e032      	b.n	800854c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	4619      	mov	r1, r3
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fa31 	bl	8008958 <USBD_CoreFindEP>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084fa:	7dbb      	ldrb	r3, [r7, #22]
 80084fc:	2bff      	cmp	r3, #255	@ 0xff
 80084fe:	d025      	beq.n	800854c <USBD_LL_DataOutStage+0x15c>
 8008500:	7dbb      	ldrb	r3, [r7, #22]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d122      	bne.n	800854c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b03      	cmp	r3, #3
 8008510:	d117      	bne.n	8008542 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008512:	7dba      	ldrb	r2, [r7, #22]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	32ae      	adds	r2, #174	@ 0xae
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00f      	beq.n	8008542 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008522:	7dba      	ldrb	r2, [r7, #22]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800852a:	7dba      	ldrb	r2, [r7, #22]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	32ae      	adds	r2, #174	@ 0xae
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	7afa      	ldrb	r2, [r7, #11]
 8008538:	4611      	mov	r1, r2
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	e000      	b.n	800854e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	460b      	mov	r3, r1
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008564:	7afb      	ldrb	r3, [r7, #11]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d16f      	bne.n	800864a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3314      	adds	r3, #20
 800856e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008576:	2b02      	cmp	r3, #2
 8008578:	d15a      	bne.n	8008630 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	429a      	cmp	r2, r3
 8008584:	d914      	bls.n	80085b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	461a      	mov	r2, r3
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f001 f8aa 	bl	80096f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085a2:	2300      	movs	r3, #0
 80085a4:	2200      	movs	r2, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f00f fcad 	bl	8017f08 <USBD_LL_PrepareReceive>
 80085ae:	e03f      	b.n	8008630 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d11c      	bne.n	80085f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d316      	bcc.n	80085f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d20f      	bcs.n	80085f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f001 f88b 	bl	80096f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085e8:	2300      	movs	r3, #0
 80085ea:	2200      	movs	r2, #0
 80085ec:	2100      	movs	r1, #0
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f00f fc8a 	bl	8017f08 <USBD_LL_PrepareReceive>
 80085f4:	e01c      	b.n	8008630 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d10f      	bne.n	8008622 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d009      	beq.n	8008622 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008622:	2180      	movs	r1, #128	@ 0x80
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f00f fbc5 	bl	8017db4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 f8b5 	bl	800979a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d03a      	beq.n	80086b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fe42 	bl	80082c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008648:	e032      	b.n	80086b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008650:	b2db      	uxtb	r3, r3
 8008652:	4619      	mov	r1, r3
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 f97f 	bl	8008958 <USBD_CoreFindEP>
 800865a:	4603      	mov	r3, r0
 800865c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2bff      	cmp	r3, #255	@ 0xff
 8008662:	d025      	beq.n	80086b0 <USBD_LL_DataInStage+0x15a>
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d122      	bne.n	80086b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d11c      	bne.n	80086b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008676:	7dfa      	ldrb	r2, [r7, #23]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	32ae      	adds	r2, #174	@ 0xae
 800867c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d014      	beq.n	80086b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008686:	7dfa      	ldrb	r2, [r7, #23]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800868e:	7dfa      	ldrb	r2, [r7, #23]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	32ae      	adds	r2, #174	@ 0xae
 8008694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	7afa      	ldrb	r2, [r7, #11]
 800869c:	4611      	mov	r1, r2
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	4798      	blx	r3
 80086a2:	4603      	mov	r3, r0
 80086a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80086a6:	7dbb      	ldrb	r3, [r7, #22]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80086ac:	7dbb      	ldrb	r3, [r7, #22]
 80086ae:	e000      	b.n	80086b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d014      	beq.n	8008720 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	6852      	ldr	r2, [r2, #4]
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	4611      	mov	r1, r2
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800871c:	2303      	movs	r3, #3
 800871e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008720:	2340      	movs	r3, #64	@ 0x40
 8008722:	2200      	movs	r2, #0
 8008724:	2100      	movs	r1, #0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f00f faff 	bl	8017d2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2240      	movs	r2, #64	@ 0x40
 8008738:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800873c:	2340      	movs	r3, #64	@ 0x40
 800873e:	2200      	movs	r2, #0
 8008740:	2180      	movs	r1, #128	@ 0x80
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f00f faf1 	bl	8017d2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2240      	movs	r2, #64	@ 0x40
 8008752:	621a      	str	r2, [r3, #32]

  return ret;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878c:	b2da      	uxtb	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2204      	movs	r2, #4
 8008798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d106      	bne.n	80087cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d110      	bne.n	8008810 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d005      	beq.n	8008810 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	32ae      	adds	r2, #174	@ 0xae
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	e01c      	b.n	8008876 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b03      	cmp	r3, #3
 8008846:	d115      	bne.n	8008874 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	32ae      	adds	r2, #174	@ 0xae
 8008852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	@ 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4611      	mov	r1, r2
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32ae      	adds	r2, #174	@ 0xae
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	e01c      	b.n	80088da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d115      	bne.n	80088d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	32ae      	adds	r2, #174	@ 0xae
 80088b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	32ae      	adds	r2, #174	@ 0xae
 80088ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	4611      	mov	r1, r2
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00e      	beq.n	8008934 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6852      	ldr	r2, [r2, #4]
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	4611      	mov	r1, r2
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	4798      	blx	r3
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008930:	2303      	movs	r3, #3
 8008932:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800894a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008964:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	b29b      	uxth	r3, r3
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	4293      	cmp	r3, r2
 8008996:	d91f      	bls.n	80089d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800899e:	e013      	b.n	80089c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089a0:	f107 030a 	add.w	r3, r7, #10
 80089a4:	4619      	mov	r1, r3
 80089a6:	6978      	ldr	r0, [r7, #20]
 80089a8:	f000 f81b 	bl	80089e2 <USBD_GetNextDesc>
 80089ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	785b      	ldrb	r3, [r3, #1]
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d108      	bne.n	80089c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d008      	beq.n	80089d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	885b      	ldrh	r3, [r3, #2]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	897b      	ldrh	r3, [r7, #10]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d8e5      	bhi.n	80089a0 <USBD_GetEpDesc+0x2e>
 80089d4:	e000      	b.n	80089d8 <USBD_GetEpDesc+0x66>
          break;
 80089d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089d8:	693b      	ldr	r3, [r7, #16]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	4413      	add	r3, r2
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b087      	sub	sp, #28
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a38:	8a3b      	ldrh	r3, [r7, #16]
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	b21a      	sxth	r2, r3
 8008a3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	b21b      	sxth	r3, r3
 8008a46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a48:	89fb      	ldrh	r3, [r7, #14]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a6e:	2b40      	cmp	r3, #64	@ 0x40
 8008a70:	d005      	beq.n	8008a7e <USBD_StdDevReq+0x26>
 8008a72:	2b40      	cmp	r3, #64	@ 0x40
 8008a74:	d857      	bhi.n	8008b26 <USBD_StdDevReq+0xce>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00f      	beq.n	8008a9a <USBD_StdDevReq+0x42>
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d153      	bne.n	8008b26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	32ae      	adds	r2, #174	@ 0xae
 8008a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]
      break;
 8008a98:	e04a      	b.n	8008b30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d83b      	bhi.n	8008b1a <USBD_StdDevReq+0xc2>
 8008aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa8 <USBD_StdDevReq+0x50>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008afd 	.word	0x08008afd
 8008aac:	08008b11 	.word	0x08008b11
 8008ab0:	08008b1b 	.word	0x08008b1b
 8008ab4:	08008b07 	.word	0x08008b07
 8008ab8:	08008b1b 	.word	0x08008b1b
 8008abc:	08008adb 	.word	0x08008adb
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008b1b 	.word	0x08008b1b
 8008ac8:	08008af3 	.word	0x08008af3
 8008acc:	08008ae5 	.word	0x08008ae5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa3c 	bl	8008f50 <USBD_GetDescriptor>
          break;
 8008ad8:	e024      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fba1 	bl	8009224 <USBD_SetAddress>
          break;
 8008ae2:	e01f      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fbe0 	bl	80092ac <USBD_SetConfig>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
          break;
 8008af0:	e018      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fc83 	bl	8009400 <USBD_GetConfig>
          break;
 8008afa:	e013      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fcb4 	bl	800946c <USBD_GetStatus>
          break;
 8008b04:	e00e      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fce3 	bl	80094d4 <USBD_SetFeature>
          break;
 8008b0e:	e009      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fd07 	bl	8009526 <USBD_ClrFeature>
          break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fd5e 	bl	80095de <USBD_CtlError>
          break;
 8008b22:	bf00      	nop
      }
      break;
 8008b24:	e004      	b.n	8008b30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fd58 	bl	80095de <USBD_CtlError>
      break;
 8008b2e:	bf00      	nop
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b52:	2b40      	cmp	r3, #64	@ 0x40
 8008b54:	d005      	beq.n	8008b62 <USBD_StdItfReq+0x26>
 8008b56:	2b40      	cmp	r3, #64	@ 0x40
 8008b58:	d852      	bhi.n	8008c00 <USBD_StdItfReq+0xc4>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <USBD_StdItfReq+0x26>
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	d14e      	bne.n	8008c00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d840      	bhi.n	8008bf2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	889b      	ldrh	r3, [r3, #4]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d836      	bhi.n	8008be8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	889b      	ldrh	r3, [r3, #4]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff fedb 	bl	800893e <USBD_CoreFindIF>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2bff      	cmp	r3, #255	@ 0xff
 8008b90:	d01d      	beq.n	8008bce <USBD_StdItfReq+0x92>
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11a      	bne.n	8008bce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b98:	7bba      	ldrb	r2, [r7, #14]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32ae      	adds	r2, #174	@ 0xae
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ba8:	7bba      	ldrb	r2, [r7, #14]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bb0:	7bba      	ldrb	r2, [r7, #14]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32ae      	adds	r2, #174	@ 0xae
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bc6:	e004      	b.n	8008bd2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bcc:	e001      	b.n	8008bd2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88db      	ldrh	r3, [r3, #6]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d110      	bne.n	8008bfc <USBD_StdItfReq+0xc0>
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10d      	bne.n	8008bfc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fdc7 	bl	8009774 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008be6:	e009      	b.n	8008bfc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fcf7 	bl	80095de <USBD_CtlError>
          break;
 8008bf0:	e004      	b.n	8008bfc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fcf2 	bl	80095de <USBD_CtlError>
          break;
 8008bfa:	e000      	b.n	8008bfe <USBD_StdItfReq+0xc2>
          break;
 8008bfc:	bf00      	nop
      }
      break;
 8008bfe:	e004      	b.n	8008c0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fceb 	bl	80095de <USBD_CtlError>
      break;
 8008c08:	bf00      	nop
  }

  return ret;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	889b      	ldrh	r3, [r3, #4]
 8008c26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c30:	2b40      	cmp	r3, #64	@ 0x40
 8008c32:	d007      	beq.n	8008c44 <USBD_StdEPReq+0x30>
 8008c34:	2b40      	cmp	r3, #64	@ 0x40
 8008c36:	f200 817f 	bhi.w	8008f38 <USBD_StdEPReq+0x324>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d02a      	beq.n	8008c94 <USBD_StdEPReq+0x80>
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	f040 817a 	bne.w	8008f38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fe85 	bl	8008958 <USBD_CoreFindEP>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c52:	7b7b      	ldrb	r3, [r7, #13]
 8008c54:	2bff      	cmp	r3, #255	@ 0xff
 8008c56:	f000 8174 	beq.w	8008f42 <USBD_StdEPReq+0x32e>
 8008c5a:	7b7b      	ldrb	r3, [r7, #13]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 8170 	bne.w	8008f42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c62:	7b7a      	ldrb	r2, [r7, #13]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c6a:	7b7a      	ldrb	r2, [r7, #13]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	32ae      	adds	r2, #174	@ 0xae
 8008c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8163 	beq.w	8008f42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c7c:	7b7a      	ldrb	r2, [r7, #13]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	32ae      	adds	r2, #174	@ 0xae
 8008c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	4798      	blx	r3
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c92:	e156      	b.n	8008f42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	785b      	ldrb	r3, [r3, #1]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d008      	beq.n	8008cae <USBD_StdEPReq+0x9a>
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	f300 8145 	bgt.w	8008f2c <USBD_StdEPReq+0x318>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 809b 	beq.w	8008dde <USBD_StdEPReq+0x1ca>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d03c      	beq.n	8008d26 <USBD_StdEPReq+0x112>
 8008cac:	e13e      	b.n	8008f2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d002      	beq.n	8008cc0 <USBD_StdEPReq+0xac>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d016      	beq.n	8008cec <USBD_StdEPReq+0xd8>
 8008cbe:	e02c      	b.n	8008d1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <USBD_StdEPReq+0xce>
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	2b80      	cmp	r3, #128	@ 0x80
 8008cca:	d00a      	beq.n	8008ce2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f00f f86f 	bl	8017db4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cd6:	2180      	movs	r1, #128	@ 0x80
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f00f f86b 	bl	8017db4 <USBD_LL_StallEP>
 8008cde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce0:	e020      	b.n	8008d24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fc7a 	bl	80095de <USBD_CtlError>
              break;
 8008cea:	e01b      	b.n	8008d24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10e      	bne.n	8008d12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <USBD_StdEPReq+0xfe>
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b80      	cmp	r3, #128	@ 0x80
 8008cfe:	d008      	beq.n	8008d12 <USBD_StdEPReq+0xfe>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f00f f851 	bl	8017db4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fd2e 	bl	8009774 <USBD_CtlSendStatus>

              break;
 8008d18:	e004      	b.n	8008d24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc5e 	bl	80095de <USBD_CtlError>
              break;
 8008d22:	bf00      	nop
          }
          break;
 8008d24:	e107      	b.n	8008f36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d002      	beq.n	8008d38 <USBD_StdEPReq+0x124>
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d016      	beq.n	8008d64 <USBD_StdEPReq+0x150>
 8008d36:	e04b      	b.n	8008dd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <USBD_StdEPReq+0x146>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b80      	cmp	r3, #128	@ 0x80
 8008d42:	d00a      	beq.n	8008d5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f00f f833 	bl	8017db4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d4e:	2180      	movs	r1, #128	@ 0x80
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f00f f82f 	bl	8017db4 <USBD_LL_StallEP>
 8008d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d58:	e040      	b.n	8008ddc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc3e 	bl	80095de <USBD_CtlError>
              break;
 8008d62:	e03b      	b.n	8008ddc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	885b      	ldrh	r3, [r3, #2]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d136      	bne.n	8008dda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f00f f839 	bl	8017df2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fcf7 	bl	8009774 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fde4 	bl	8008958 <USBD_CoreFindEP>
 8008d90:	4603      	mov	r3, r0
 8008d92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d94:	7b7b      	ldrb	r3, [r7, #13]
 8008d96:	2bff      	cmp	r3, #255	@ 0xff
 8008d98:	d01f      	beq.n	8008dda <USBD_StdEPReq+0x1c6>
 8008d9a:	7b7b      	ldrb	r3, [r7, #13]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d11c      	bne.n	8008dda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008da0:	7b7a      	ldrb	r2, [r7, #13]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008da8:	7b7a      	ldrb	r2, [r7, #13]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32ae      	adds	r2, #174	@ 0xae
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d010      	beq.n	8008dda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008db8:	7b7a      	ldrb	r2, [r7, #13]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	32ae      	adds	r2, #174	@ 0xae
 8008dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008dce:	e004      	b.n	8008dda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fc03 	bl	80095de <USBD_CtlError>
              break;
 8008dd8:	e000      	b.n	8008ddc <USBD_StdEPReq+0x1c8>
              break;
 8008dda:	bf00      	nop
          }
          break;
 8008ddc:	e0ab      	b.n	8008f36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d002      	beq.n	8008df0 <USBD_StdEPReq+0x1dc>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d032      	beq.n	8008e54 <USBD_StdEPReq+0x240>
 8008dee:	e097      	b.n	8008f20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d007      	beq.n	8008e06 <USBD_StdEPReq+0x1f2>
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b80      	cmp	r3, #128	@ 0x80
 8008dfa:	d004      	beq.n	8008e06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fbed 	bl	80095de <USBD_CtlError>
                break;
 8008e04:	e091      	b.n	8008f2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da0b      	bge.n	8008e26 <USBD_StdEPReq+0x212>
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	3310      	adds	r3, #16
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	3304      	adds	r3, #4
 8008e24:	e00b      	b.n	8008e3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fc37 	bl	80096c0 <USBD_CtlSendData>
              break;
 8008e52:	e06a      	b.n	8008f2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	da11      	bge.n	8008e80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	f003 020f 	and.w	r2, r3, #15
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3324      	adds	r3, #36	@ 0x24
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d117      	bne.n	8008ea6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fbb0 	bl	80095de <USBD_CtlError>
                  break;
 8008e7e:	e054      	b.n	8008f2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	f003 020f 	and.w	r2, r3, #15
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fb9d 	bl	80095de <USBD_CtlError>
                  break;
 8008ea4:	e041      	b.n	8008f2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da0b      	bge.n	8008ec6 <USBD_StdEPReq+0x2b2>
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	e00b      	b.n	8008ede <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	3304      	adds	r3, #4
 8008ede:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <USBD_StdEPReq+0x2d8>
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b80      	cmp	r3, #128	@ 0x80
 8008eea:	d103      	bne.n	8008ef4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	e00e      	b.n	8008f12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f00e ff99 	bl	8017e30 <USBD_LL_IsStallEP>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2201      	movs	r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e002      	b.n	8008f12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2202      	movs	r2, #2
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fbd1 	bl	80096c0 <USBD_CtlSendData>
              break;
 8008f1e:	e004      	b.n	8008f2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fb5b 	bl	80095de <USBD_CtlError>
              break;
 8008f28:	bf00      	nop
          }
          break;
 8008f2a:	e004      	b.n	8008f36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fb55 	bl	80095de <USBD_CtlError>
          break;
 8008f34:	bf00      	nop
      }
      break;
 8008f36:	e005      	b.n	8008f44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb4f 	bl	80095de <USBD_CtlError>
      break;
 8008f40:	e000      	b.n	8008f44 <USBD_StdEPReq+0x330>
      break;
 8008f42:	bf00      	nop
  }

  return ret;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	885b      	ldrh	r3, [r3, #2]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	2b06      	cmp	r3, #6
 8008f72:	f200 8128 	bhi.w	80091c6 <USBD_GetDescriptor+0x276>
 8008f76:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <USBD_GetDescriptor+0x2c>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008f99 	.word	0x08008f99
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008ff1 	.word	0x08008ff1
 8008f88:	080091c7 	.word	0x080091c7
 8008f8c:	080091c7 	.word	0x080091c7
 8008f90:	08009167 	.word	0x08009167
 8008f94:	08009193 	.word	0x08009193
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7c12      	ldrb	r2, [r2, #16]
 8008fa4:	f107 0108 	add.w	r1, r7, #8
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	60f8      	str	r0, [r7, #12]
      break;
 8008fae:	e112      	b.n	80091d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7c1b      	ldrb	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10d      	bne.n	8008fd4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc0:	f107 0208 	add.w	r2, r7, #8
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4798      	blx	r3
 8008fc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	2202      	movs	r2, #2
 8008fd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fd2:	e100      	b.n	80091d6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fdc:	f107 0208 	add.w	r2, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	2202      	movs	r2, #2
 8008fec:	701a      	strb	r2, [r3, #0]
      break;
 8008fee:	e0f2      	b.n	80091d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	885b      	ldrh	r3, [r3, #2]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	f200 80ac 	bhi.w	8009154 <USBD_GetDescriptor+0x204>
 8008ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <USBD_GetDescriptor+0xb4>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	0800901d 	.word	0x0800901d
 8009008:	08009051 	.word	0x08009051
 800900c:	08009085 	.word	0x08009085
 8009010:	080090b9 	.word	0x080090b9
 8009014:	080090ed 	.word	0x080090ed
 8009018:	08009121 	.word	0x08009121
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7c12      	ldrb	r2, [r2, #16]
 8009034:	f107 0108 	add.w	r1, r7, #8
 8009038:	4610      	mov	r0, r2
 800903a:	4798      	blx	r3
 800903c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903e:	e091      	b.n	8009164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 facb 	bl	80095de <USBD_CtlError>
            err++;
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	3301      	adds	r3, #1
 800904c:	72fb      	strb	r3, [r7, #11]
          break;
 800904e:	e089      	b.n	8009164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7c12      	ldrb	r2, [r2, #16]
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009072:	e077      	b.n	8009164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fab1 	bl	80095de <USBD_CtlError>
            err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
          break;
 8009082:	e06f      	b.n	8009164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a6:	e05d      	b.n	8009164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa97 	bl	80095de <USBD_CtlError>
            err++;
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	3301      	adds	r3, #1
 80090b4:	72fb      	strb	r3, [r7, #11]
          break;
 80090b6:	e055      	b.n	8009164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090da:	e043      	b.n	8009164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa7d 	bl	80095de <USBD_CtlError>
            err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ea:	e03b      	b.n	8009164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910e:	e029      	b.n	8009164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa63 	bl	80095de <USBD_CtlError>
            err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
          break;
 800911e:	e021      	b.n	8009164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009142:	e00f      	b.n	8009164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa49 	bl	80095de <USBD_CtlError>
            err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
          break;
 8009152:	e007      	b.n	8009164 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fa41 	bl	80095de <USBD_CtlError>
          err++;
 800915c:	7afb      	ldrb	r3, [r7, #11]
 800915e:	3301      	adds	r3, #1
 8009160:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009162:	bf00      	nop
      }
      break;
 8009164:	e037      	b.n	80091d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	7c1b      	ldrb	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d109      	bne.n	8009182 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009176:	f107 0208 	add.w	r2, r7, #8
 800917a:	4610      	mov	r0, r2
 800917c:	4798      	blx	r3
 800917e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009180:	e029      	b.n	80091d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fa2a 	bl	80095de <USBD_CtlError>
        err++;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	3301      	adds	r3, #1
 800918e:	72fb      	strb	r3, [r7, #11]
      break;
 8009190:	e021      	b.n	80091d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	7c1b      	ldrb	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10d      	bne.n	80091b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a2:	f107 0208 	add.w	r2, r7, #8
 80091a6:	4610      	mov	r0, r2
 80091a8:	4798      	blx	r3
 80091aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
 80091b0:	2207      	movs	r2, #7
 80091b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b4:	e00f      	b.n	80091d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa10 	bl	80095de <USBD_CtlError>
        err++;
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	3301      	adds	r3, #1
 80091c2:	72fb      	strb	r3, [r7, #11]
      break;
 80091c4:	e007      	b.n	80091d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fa08 	bl	80095de <USBD_CtlError>
      err++;
 80091ce:	7afb      	ldrb	r3, [r7, #11]
 80091d0:	3301      	adds	r3, #1
 80091d2:	72fb      	strb	r3, [r7, #11]
      break;
 80091d4:	bf00      	nop
  }

  if (err != 0U)
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d11e      	bne.n	800921a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	88db      	ldrh	r3, [r3, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d016      	beq.n	8009212 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091e4:	893b      	ldrh	r3, [r7, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00e      	beq.n	8009208 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	88da      	ldrh	r2, [r3, #6]
 80091ee:	893b      	ldrh	r3, [r7, #8]
 80091f0:	4293      	cmp	r3, r2
 80091f2:	bf28      	it	cs
 80091f4:	4613      	movcs	r3, r2
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091fa:	893b      	ldrh	r3, [r7, #8]
 80091fc:	461a      	mov	r2, r3
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fa5d 	bl	80096c0 <USBD_CtlSendData>
 8009206:	e009      	b.n	800921c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f9e7 	bl	80095de <USBD_CtlError>
 8009210:	e004      	b.n	800921c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 faae 	bl	8009774 <USBD_CtlSendStatus>
 8009218:	e000      	b.n	800921c <USBD_GetDescriptor+0x2cc>
    return;
 800921a:	bf00      	nop
  }
}
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop

08009224 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d131      	bne.n	800929a <USBD_SetAddress+0x76>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	88db      	ldrh	r3, [r3, #6]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d12d      	bne.n	800929a <USBD_SetAddress+0x76>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	2b7f      	cmp	r3, #127	@ 0x7f
 8009244:	d829      	bhi.n	800929a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009250:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b03      	cmp	r3, #3
 800925c:	d104      	bne.n	8009268 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f9bc 	bl	80095de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009266:	e01d      	b.n	80092a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	7bfa      	ldrb	r2, [r7, #15]
 800926c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f00e fe07 	bl	8017e88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa7a 	bl	8009774 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928e:	e009      	b.n	80092a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009298:	e004      	b.n	80092a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f99e 	bl	80095de <USBD_CtlError>
  }
}
 80092a2:	bf00      	nop
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	885b      	ldrh	r3, [r3, #2]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	4b4e      	ldr	r3, [pc, #312]	@ (80093fc <USBD_SetConfig+0x150>)
 80092c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092c4:	4b4d      	ldr	r3, [pc, #308]	@ (80093fc <USBD_SetConfig+0x150>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d905      	bls.n	80092d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f985 	bl	80095de <USBD_CtlError>
    return USBD_FAIL;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e08c      	b.n	80093f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d002      	beq.n	80092ea <USBD_SetConfig+0x3e>
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d029      	beq.n	800933c <USBD_SetConfig+0x90>
 80092e8:	e075      	b.n	80093d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092ea:	4b44      	ldr	r3, [pc, #272]	@ (80093fc <USBD_SetConfig+0x150>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d020      	beq.n	8009334 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092f2:	4b42      	ldr	r3, [pc, #264]	@ (80093fc <USBD_SetConfig+0x150>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092fc:	4b3f      	ldr	r3, [pc, #252]	@ (80093fc <USBD_SetConfig+0x150>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fe ffe9 	bl	80082da <USBD_SetClassConfig>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d008      	beq.n	8009324 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f962 	bl	80095de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009322:	e065      	b.n	80093f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fa25 	bl	8009774 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2203      	movs	r2, #3
 800932e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009332:	e05d      	b.n	80093f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa1d 	bl	8009774 <USBD_CtlSendStatus>
      break;
 800933a:	e059      	b.n	80093f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800933c:	4b2f      	ldr	r3, [pc, #188]	@ (80093fc <USBD_SetConfig+0x150>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d112      	bne.n	800936a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2202      	movs	r2, #2
 8009348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800934c:	4b2b      	ldr	r3, [pc, #172]	@ (80093fc <USBD_SetConfig+0x150>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009356:	4b29      	ldr	r3, [pc, #164]	@ (80093fc <USBD_SetConfig+0x150>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fe ffd8 	bl	8008312 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa06 	bl	8009774 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009368:	e042      	b.n	80093f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800936a:	4b24      	ldr	r3, [pc, #144]	@ (80093fc <USBD_SetConfig+0x150>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d02a      	beq.n	80093ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7fe ffc6 	bl	8008312 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009386:	4b1d      	ldr	r3, [pc, #116]	@ (80093fc <USBD_SetConfig+0x150>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009390:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <USBD_SetConfig+0x150>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7fe ff9f 	bl	80082da <USBD_SetClassConfig>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00f      	beq.n	80093c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f918 	bl	80095de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7fe ffab 	bl	8008312 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093c4:	e014      	b.n	80093f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f9d4 	bl	8009774 <USBD_CtlSendStatus>
      break;
 80093cc:	e010      	b.n	80093f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9d0 	bl	8009774 <USBD_CtlSendStatus>
      break;
 80093d4:	e00c      	b.n	80093f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f900 	bl	80095de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093de:	4b07      	ldr	r3, [pc, #28]	@ (80093fc <USBD_SetConfig+0x150>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7fe ff94 	bl	8008312 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093ea:	2303      	movs	r3, #3
 80093ec:	73fb      	strb	r3, [r7, #15]
      break;
 80093ee:	bf00      	nop
  }

  return ret;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20005400 	.word	0x20005400

08009400 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88db      	ldrh	r3, [r3, #6]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d004      	beq.n	800941c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8e2 	bl	80095de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800941a:	e023      	b.n	8009464 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b02      	cmp	r3, #2
 8009426:	dc02      	bgt.n	800942e <USBD_GetConfig+0x2e>
 8009428:	2b00      	cmp	r3, #0
 800942a:	dc03      	bgt.n	8009434 <USBD_GetConfig+0x34>
 800942c:	e015      	b.n	800945a <USBD_GetConfig+0x5a>
 800942e:	2b03      	cmp	r3, #3
 8009430:	d00b      	beq.n	800944a <USBD_GetConfig+0x4a>
 8009432:	e012      	b.n	800945a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3308      	adds	r3, #8
 800943e:	2201      	movs	r2, #1
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f93c 	bl	80096c0 <USBD_CtlSendData>
        break;
 8009448:	e00c      	b.n	8009464 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3304      	adds	r3, #4
 800944e:	2201      	movs	r2, #1
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f934 	bl	80096c0 <USBD_CtlSendData>
        break;
 8009458:	e004      	b.n	8009464 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f8be 	bl	80095de <USBD_CtlError>
        break;
 8009462:	bf00      	nop
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	2b02      	cmp	r3, #2
 8009482:	d81e      	bhi.n	80094c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	88db      	ldrh	r3, [r3, #6]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d004      	beq.n	8009496 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f8a5 	bl	80095de <USBD_CtlError>
        break;
 8009494:	e01a      	b.n	80094cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f043 0202 	orr.w	r2, r3, #2
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	330c      	adds	r3, #12
 80094b6:	2202      	movs	r2, #2
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f900 	bl	80096c0 <USBD_CtlSendData>
      break;
 80094c0:	e004      	b.n	80094cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f88a 	bl	80095de <USBD_CtlError>
      break;
 80094ca:	bf00      	nop
  }
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d107      	bne.n	80094f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f940 	bl	8009774 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094f4:	e013      	b.n	800951e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	885b      	ldrh	r3, [r3, #2]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d10b      	bne.n	8009516 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	889b      	ldrh	r3, [r3, #4]
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	b29b      	uxth	r3, r3
 8009506:	b2da      	uxtb	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f930 	bl	8009774 <USBD_CtlSendStatus>
}
 8009514:	e003      	b.n	800951e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f860 	bl	80095de <USBD_CtlError>
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009536:	b2db      	uxtb	r3, r3
 8009538:	3b01      	subs	r3, #1
 800953a:	2b02      	cmp	r3, #2
 800953c:	d80b      	bhi.n	8009556 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10c      	bne.n	8009560 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f910 	bl	8009774 <USBD_CtlSendStatus>
      }
      break;
 8009554:	e004      	b.n	8009560 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f840 	bl	80095de <USBD_CtlError>
      break;
 800955e:	e000      	b.n	8009562 <USBD_ClrFeature+0x3c>
      break;
 8009560:	bf00      	nop
  }
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	781a      	ldrb	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fa40 	bl	8008a1a <SWAPBYTE>
 800959a:	4603      	mov	r3, r0
 800959c:	461a      	mov	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3301      	adds	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7ff fa33 	bl	8008a1a <SWAPBYTE>
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3301      	adds	r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7ff fa26 	bl	8008a1a <SWAPBYTE>
 80095ce:	4603      	mov	r3, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	80da      	strh	r2, [r3, #6]
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095e8:	2180      	movs	r1, #128	@ 0x80
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f00e fbe2 	bl	8017db4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f00e fbde 	bl	8017db4 <USBD_LL_StallEP>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d036      	beq.n	8009684 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800961a:	6938      	ldr	r0, [r7, #16]
 800961c:	f000 f836 	bl	800968c <USBD_GetLen>
 8009620:	4603      	mov	r3, r0
 8009622:	3301      	adds	r3, #1
 8009624:	b29b      	uxth	r3, r3
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	4413      	add	r3, r2
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7812      	ldrb	r2, [r2, #0]
 8009638:	701a      	strb	r2, [r3, #0]
  idx++;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	3301      	adds	r3, #1
 800963e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	4413      	add	r3, r2
 8009646:	2203      	movs	r2, #3
 8009648:	701a      	strb	r2, [r3, #0]
  idx++;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	3301      	adds	r3, #1
 800964e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009650:	e013      	b.n	800967a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	4413      	add	r3, r2
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3301      	adds	r3, #1
 8009662:	613b      	str	r3, [r7, #16]
    idx++;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	3301      	adds	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	4413      	add	r3, r2
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
    idx++;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
 8009676:	3301      	adds	r3, #1
 8009678:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e7      	bne.n	8009652 <USBD_GetString+0x52>
 8009682:	e000      	b.n	8009686 <USBD_GetString+0x86>
    return;
 8009684:	bf00      	nop
  }
}
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800969c:	e005      	b.n	80096aa <USBD_GetLen+0x1e>
  {
    len++;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	3301      	adds	r3, #1
 80096a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	3301      	adds	r3, #1
 80096a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1f5      	bne.n	800969e <USBD_GetLen+0x12>
  }

  return len;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	2100      	movs	r1, #0
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f00e fbed 	bl	8017ec6 <USBD_LL_Transmit>

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	2100      	movs	r1, #0
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f00e fbdc 	bl	8017ec6 <USBD_LL_Transmit>

  return USBD_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2203      	movs	r2, #3
 8009728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	2100      	movs	r1, #0
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f00e fbe0 	bl	8017f08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	2100      	movs	r1, #0
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f00e fbcf 	bl	8017f08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2204      	movs	r2, #4
 8009780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009784:	2300      	movs	r3, #0
 8009786:	2200      	movs	r2, #0
 8009788:	2100      	movs	r1, #0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f00e fb9b 	bl	8017ec6 <USBD_LL_Transmit>

  return USBD_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2205      	movs	r2, #5
 80097a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	2100      	movs	r1, #0
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f00e fba9 	bl	8017f08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <__NVIC_SetPriority>:
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	db0a      	blt.n	80097ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	490c      	ldr	r1, [pc, #48]	@ (800980c <__NVIC_SetPriority+0x4c>)
 80097da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097de:	0112      	lsls	r2, r2, #4
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	440b      	add	r3, r1
 80097e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80097e8:	e00a      	b.n	8009800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	4908      	ldr	r1, [pc, #32]	@ (8009810 <__NVIC_SetPriority+0x50>)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	3b04      	subs	r3, #4
 80097f8:	0112      	lsls	r2, r2, #4
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	440b      	add	r3, r1
 80097fe:	761a      	strb	r2, [r3, #24]
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	e000e100 	.word	0xe000e100
 8009810:	e000ed00 	.word	0xe000ed00

08009814 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009818:	4b05      	ldr	r3, [pc, #20]	@ (8009830 <SysTick_Handler+0x1c>)
 800981a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800981c:	f002 fcc8 	bl	800c1b0 <xTaskGetSchedulerState>
 8009820:	4603      	mov	r3, r0
 8009822:	2b01      	cmp	r3, #1
 8009824:	d001      	beq.n	800982a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009826:	f003 fbbf 	bl	800cfa8 <xPortSysTickHandler>
  }
}
 800982a:	bf00      	nop
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	e000e010 	.word	0xe000e010

08009834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009838:	2100      	movs	r1, #0
 800983a:	f06f 0004 	mvn.w	r0, #4
 800983e:	f7ff ffbf 	bl	80097c0 <__NVIC_SetPriority>
#endif
}
 8009842:	bf00      	nop
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	603b      	str	r3, [r7, #0]
  return(result);
 8009854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800985a:	f06f 0305 	mvn.w	r3, #5
 800985e:	607b      	str	r3, [r7, #4]
 8009860:	e00f      	b.n	8009882 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009862:	4b0a      	ldr	r3, [pc, #40]	@ (800988c <osKernelInitialize+0x44>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d108      	bne.n	800987c <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800986a:	4809      	ldr	r0, [pc, #36]	@ (8009890 <osKernelInitialize+0x48>)
 800986c:	f003 fd90 	bl	800d390 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8009870:	4b06      	ldr	r3, [pc, #24]	@ (800988c <osKernelInitialize+0x44>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009876:	2300      	movs	r3, #0
 8009878:	607b      	str	r3, [r7, #4]
 800987a:	e002      	b.n	8009882 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800987c:	f04f 33ff 	mov.w	r3, #4294967295
 8009880:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009882:	687b      	ldr	r3, [r7, #4]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20005404 	.word	0x20005404
 8009890:	200000ac 	.word	0x200000ac

08009894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989a:	f3ef 8305 	mrs	r3, IPSR
 800989e:	603b      	str	r3, [r7, #0]
  return(result);
 80098a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80098a6:	f06f 0305 	mvn.w	r3, #5
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	e010      	b.n	80098d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098ae:	4b0b      	ldr	r3, [pc, #44]	@ (80098dc <osKernelStart+0x48>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d109      	bne.n	80098ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098b6:	f7ff ffbd 	bl	8009834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098ba:	4b08      	ldr	r3, [pc, #32]	@ (80098dc <osKernelStart+0x48>)
 80098bc:	2202      	movs	r2, #2
 80098be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098c0:	f001 fff0 	bl	800b8a4 <vTaskStartScheduler>
      stat = osOK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e002      	b.n	80098d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098d0:	687b      	ldr	r3, [r7, #4]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20005404 	.word	0x20005404

080098e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e6:	f3ef 8305 	mrs	r3, IPSR
 80098ea:	603b      	str	r3, [r7, #0]
  return(result);
 80098ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80098f2:	f002 f903 	bl	800bafc <xTaskGetTickCountFromISR>
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	e002      	b.n	8009900 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80098fa:	f002 f8ef 	bl	800badc <xTaskGetTickCount>
 80098fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009900:	687b      	ldr	r3, [r7, #4]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800990a:	b580      	push	{r7, lr}
 800990c:	b08e      	sub	sp, #56	@ 0x38
 800990e:	af04      	add	r7, sp, #16
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800991a:	f3ef 8305 	mrs	r3, IPSR
 800991e:	617b      	str	r3, [r7, #20]
  return(result);
 8009920:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009922:	2b00      	cmp	r3, #0
 8009924:	d17e      	bne.n	8009a24 <osThreadNew+0x11a>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d07b      	beq.n	8009a24 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800992c:	2380      	movs	r3, #128	@ 0x80
 800992e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009930:	2318      	movs	r3, #24
 8009932:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009938:	f04f 33ff 	mov.w	r3, #4294967295
 800993c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d045      	beq.n	80099d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <osThreadNew+0x48>
        name = attr->name;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d002      	beq.n	8009960 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <osThreadNew+0x6e>
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	2b38      	cmp	r3, #56	@ 0x38
 800996a:	d805      	bhi.n	8009978 <osThreadNew+0x6e>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <osThreadNew+0x72>
        return (NULL);
 8009978:	2300      	movs	r3, #0
 800997a:	e054      	b.n	8009a26 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	089b      	lsrs	r3, r3, #2
 800998a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00e      	beq.n	80099b2 <osThreadNew+0xa8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2bb7      	cmp	r3, #183	@ 0xb7
 800999a:	d90a      	bls.n	80099b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d006      	beq.n	80099b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <osThreadNew+0xa8>
        mem = 1;
 80099ac:	2301      	movs	r3, #1
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	e010      	b.n	80099d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10c      	bne.n	80099d4 <osThreadNew+0xca>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d108      	bne.n	80099d4 <osThreadNew+0xca>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d104      	bne.n	80099d4 <osThreadNew+0xca>
          mem = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	e001      	b.n	80099d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d110      	bne.n	80099fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099e2:	9202      	str	r2, [sp, #8]
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6a3a      	ldr	r2, [r7, #32]
 80099ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f001 fd63 	bl	800b4bc <xTaskCreateStatic>
 80099f6:	4603      	mov	r3, r0
 80099f8:	613b      	str	r3, [r7, #16]
 80099fa:	e013      	b.n	8009a24 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d110      	bne.n	8009a24 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	f107 0310 	add.w	r3, r7, #16
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f001 fdb1 	bl	800b57c <xTaskCreate>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d001      	beq.n	8009a24 <osThreadNew+0x11a>
            hTask = NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a24:	693b      	ldr	r3, [r7, #16]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3728      	adds	r7, #40	@ 0x28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a36:	f3ef 8305 	mrs	r3, IPSR
 8009a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <osDelay+0x1c>
    stat = osErrorISR;
 8009a42:	f06f 0305 	mvn.w	r3, #5
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	e007      	b.n	8009a5a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 feef 	bl	800b838 <vTaskDelay>
    }
  }

  return (stat);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a70:	f3ef 8305 	mrs	r3, IPSR
 8009a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a76:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d174      	bne.n	8009b66 <osMutexNew+0x102>
    if (attr != NULL) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <osMutexNew+0x26>
      type = attr->attr_bits;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	e001      	b.n	8009a8e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <osMutexNew+0x3a>
      rmtx = 1U;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	e001      	b.n	8009aa2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d15c      	bne.n	8009b66 <osMutexNew+0x102>
      mem = -1;
 8009aac:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d015      	beq.n	8009ae4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d006      	beq.n	8009ace <osMutexNew+0x6a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b4f      	cmp	r3, #79	@ 0x4f
 8009ac6:	d902      	bls.n	8009ace <osMutexNew+0x6a>
          mem = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	613b      	str	r3, [r7, #16]
 8009acc:	e00c      	b.n	8009ae8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d108      	bne.n	8009ae8 <osMutexNew+0x84>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <osMutexNew+0x84>
            mem = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	e001      	b.n	8009ae8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d112      	bne.n	8009b14 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	4619      	mov	r1, r3
 8009afa:	2004      	movs	r0, #4
 8009afc:	f000 fd71 	bl	800a5e2 <xQueueCreateMutexStatic>
 8009b00:	61f8      	str	r0, [r7, #28]
 8009b02:	e016      	b.n	8009b32 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	f000 fd69 	bl	800a5e2 <xQueueCreateMutexStatic>
 8009b10:	61f8      	str	r0, [r7, #28]
 8009b12:	e00e      	b.n	8009b32 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009b20:	2004      	movs	r0, #4
 8009b22:	f000 fd46 	bl	800a5b2 <xQueueCreateMutex>
 8009b26:	61f8      	str	r0, [r7, #28]
 8009b28:	e003      	b.n	8009b32 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	f000 fd41 	bl	800a5b2 <xQueueCreateMutex>
 8009b30:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00c      	beq.n	8009b52 <osMutexNew+0xee>
        if (attr != NULL) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <osMutexNew+0xe2>
          name = attr->name;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	e001      	b.n	8009b4a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	69f8      	ldr	r0, [r7, #28]
 8009b4e:	f001 fc2d 	bl	800b3ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <osMutexNew+0x102>
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	f043 0301 	orr.w	r3, r3, #1
 8009b64:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009b66:	69fb      	ldr	r3, [r7, #28]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b8e:	f3ef 8305 	mrs	r3, IPSR
 8009b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009b9a:	f06f 0305 	mvn.w	r3, #5
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	e02c      	b.n	8009bfc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d103      	bne.n	8009bb0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009ba8:	f06f 0303 	mvn.w	r3, #3
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	e025      	b.n	8009bfc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d011      	beq.n	8009bda <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6938      	ldr	r0, [r7, #16]
 8009bba:	f000 fd62 	bl	800a682 <xQueueTakeMutexRecursive>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d01b      	beq.n	8009bfc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009bca:	f06f 0301 	mvn.w	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e014      	b.n	8009bfc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009bd2:	f06f 0302 	mvn.w	r3, #2
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	e010      	b.n	8009bfc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6938      	ldr	r0, [r7, #16]
 8009bde:	f001 f907 	bl	800adf0 <xQueueSemaphoreTake>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d009      	beq.n	8009bfc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d003      	beq.n	8009bf6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009bee:	f06f 0301 	mvn.w	r3, #1
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	e002      	b.n	8009bfc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009bf6:	f06f 0302 	mvn.w	r3, #2
 8009bfa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009bfc:	697b      	ldr	r3, [r7, #20]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f023 0301 	bic.w	r3, r3, #1
 8009c14:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c22:	f3ef 8305 	mrs	r3, IPSR
 8009c26:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c28:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <osMutexRelease+0x30>
    stat = osErrorISR;
 8009c2e:	f06f 0305 	mvn.w	r3, #5
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e01f      	b.n	8009c76 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009c3c:	f06f 0303 	mvn.w	r3, #3
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	e018      	b.n	8009c76 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009c4a:	6938      	ldr	r0, [r7, #16]
 8009c4c:	f000 fce4 	bl	800a618 <xQueueGiveMutexRecursive>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d00f      	beq.n	8009c76 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009c56:	f06f 0302 	mvn.w	r3, #2
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	e00b      	b.n	8009c76 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2200      	movs	r2, #0
 8009c62:	2100      	movs	r1, #0
 8009c64:	6938      	ldr	r0, [r7, #16]
 8009c66:	f000 fdb1 	bl	800a7cc <xQueueGenericSend>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d002      	beq.n	8009c76 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009c70:	f06f 0302 	mvn.w	r3, #2
 8009c74:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009c76:	697b      	ldr	r3, [r7, #20]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	@ 0x28
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c90:	f3ef 8305 	mrs	r3, IPSR
 8009c94:	613b      	str	r3, [r7, #16]
  return(result);
 8009c96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d175      	bne.n	8009d88 <osSemaphoreNew+0x108>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d072      	beq.n	8009d88 <osSemaphoreNew+0x108>
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d86e      	bhi.n	8009d88 <osSemaphoreNew+0x108>
    mem = -1;
 8009caa:	f04f 33ff 	mov.w	r3, #4294967295
 8009cae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d015      	beq.n	8009ce2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d006      	beq.n	8009ccc <osSemaphoreNew+0x4c>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	2b4f      	cmp	r3, #79	@ 0x4f
 8009cc4:	d902      	bls.n	8009ccc <osSemaphoreNew+0x4c>
        mem = 1;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	61bb      	str	r3, [r7, #24]
 8009cca:	e00c      	b.n	8009ce6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d108      	bne.n	8009ce6 <osSemaphoreNew+0x66>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <osSemaphoreNew+0x66>
          mem = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	e001      	b.n	8009ce6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d04c      	beq.n	8009d88 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d128      	bne.n	8009d46 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d10a      	bne.n	8009d10 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2203      	movs	r2, #3
 8009d00:	9200      	str	r2, [sp, #0]
 8009d02:	2200      	movs	r2, #0
 8009d04:	2100      	movs	r1, #0
 8009d06:	2001      	movs	r0, #1
 8009d08:	f000 fb5e 	bl	800a3c8 <xQueueGenericCreateStatic>
 8009d0c:	61f8      	str	r0, [r7, #28]
 8009d0e:	e005      	b.n	8009d1c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009d10:	2203      	movs	r2, #3
 8009d12:	2100      	movs	r1, #0
 8009d14:	2001      	movs	r0, #1
 8009d16:	f000 fbd4 	bl	800a4c2 <xQueueGenericCreate>
 8009d1a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d022      	beq.n	8009d68 <osSemaphoreNew+0xe8>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01f      	beq.n	8009d68 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d28:	2300      	movs	r3, #0
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	69f8      	ldr	r0, [r7, #28]
 8009d30:	f000 fd4c 	bl	800a7cc <xQueueGenericSend>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d016      	beq.n	8009d68 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d3a:	69f8      	ldr	r0, [r7, #28]
 8009d3c:	f001 f9ea 	bl	800b114 <vQueueDelete>
            hSemaphore = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	e010      	b.n	8009d68 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d108      	bne.n	8009d5e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	461a      	mov	r2, r3
 8009d52:	68b9      	ldr	r1, [r7, #8]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fccb 	bl	800a6f0 <xQueueCreateCountingSemaphoreStatic>
 8009d5a:	61f8      	str	r0, [r7, #28]
 8009d5c:	e004      	b.n	8009d68 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 fcfe 	bl	800a762 <xQueueCreateCountingSemaphore>
 8009d66:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	e001      	b.n	8009d80 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009d80:	6979      	ldr	r1, [r7, #20]
 8009d82:	69f8      	ldr	r0, [r7, #28]
 8009d84:	f001 fb12 	bl	800b3ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009d88:	69fb      	ldr	r3, [r7, #28]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3720      	adds	r7, #32
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d103      	bne.n	8009db4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009dac:	f06f 0303 	mvn.w	r3, #3
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	e039      	b.n	8009e28 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db4:	f3ef 8305 	mrs	r3, IPSR
 8009db8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d022      	beq.n	8009e06 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009dc6:	f06f 0303 	mvn.w	r3, #3
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	e02c      	b.n	8009e28 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f001 f918 	bl	800b010 <xQueueReceiveFromISR>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d003      	beq.n	8009dee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009de6:	f06f 0302 	mvn.w	r3, #2
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	e01c      	b.n	8009e28 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d019      	beq.n	8009e28 <osSemaphoreAcquire+0x94>
 8009df4:	4b0f      	ldr	r3, [pc, #60]	@ (8009e34 <osSemaphoreAcquire+0xa0>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	e010      	b.n	8009e28 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6938      	ldr	r0, [r7, #16]
 8009e0a:	f000 fff1 	bl	800adf0 <xQueueSemaphoreTake>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d009      	beq.n	8009e28 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009e1a:	f06f 0301 	mvn.w	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e002      	b.n	8009e28 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009e22:	f06f 0302 	mvn.w	r3, #2
 8009e26:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009e28:	697b      	ldr	r3, [r7, #20]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009e4e:	f06f 0303 	mvn.w	r3, #3
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	e02c      	b.n	8009eb0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e56:	f3ef 8305 	mrs	r3, IPSR
 8009e5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01a      	beq.n	8009e98 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009e66:	f107 0308 	add.w	r3, r7, #8
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6938      	ldr	r0, [r7, #16]
 8009e6e:	f000 fe4d 	bl	800ab0c <xQueueGiveFromISR>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d003      	beq.n	8009e80 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009e78:	f06f 0302 	mvn.w	r3, #2
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e017      	b.n	8009eb0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d014      	beq.n	8009eb0 <osSemaphoreRelease+0x78>
 8009e86:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <osSemaphoreRelease+0x84>)
 8009e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	e00b      	b.n	8009eb0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f000 fc94 	bl	800a7cc <xQueueGenericSend>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d002      	beq.n	8009eb0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009eaa:	f06f 0302 	mvn.w	r3, #2
 8009eae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009eb0:	697b      	ldr	r3, [r7, #20]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	e000ed04 	.word	0xe000ed04

08009ec0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	@ 0x28
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ed0:	f3ef 8305 	mrs	r3, IPSR
 8009ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8009ed6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d15f      	bne.n	8009f9c <osMessageQueueNew+0xdc>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d05c      	beq.n	8009f9c <osMessageQueueNew+0xdc>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d059      	beq.n	8009f9c <osMessageQueueNew+0xdc>
    mem = -1;
 8009ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d029      	beq.n	8009f48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d012      	beq.n	8009f22 <osMessageQueueNew+0x62>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f02:	d90e      	bls.n	8009f22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00a      	beq.n	8009f22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	695a      	ldr	r2, [r3, #20]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	fb01 f303 	mul.w	r3, r1, r3
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d302      	bcc.n	8009f22 <osMessageQueueNew+0x62>
        mem = 1;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	61bb      	str	r3, [r7, #24]
 8009f20:	e014      	b.n	8009f4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d110      	bne.n	8009f4c <osMessageQueueNew+0x8c>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10c      	bne.n	8009f4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d108      	bne.n	8009f4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d104      	bne.n	8009f4c <osMessageQueueNew+0x8c>
          mem = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	61bb      	str	r3, [r7, #24]
 8009f46:	e001      	b.n	8009f4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d10b      	bne.n	8009f6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691a      	ldr	r2, [r3, #16]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	9100      	str	r1, [sp, #0]
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 fa31 	bl	800a3c8 <xQueueGenericCreateStatic>
 8009f66:	61f8      	str	r0, [r7, #28]
 8009f68:	e008      	b.n	8009f7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d105      	bne.n	8009f7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009f70:	2200      	movs	r2, #0
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 faa4 	bl	800a4c2 <xQueueGenericCreate>
 8009f7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00c      	beq.n	8009f9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	617b      	str	r3, [r7, #20]
 8009f8e:	e001      	b.n	8009f94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	69f8      	ldr	r0, [r7, #28]
 8009f98:	f001 fa08 	bl	800b3ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009f9c:	69fb      	ldr	r3, [r7, #28]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc0:	f3ef 8305 	mrs	r3, IPSR
 8009fc4:	617b      	str	r3, [r7, #20]
  return(result);
 8009fc6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d028      	beq.n	800a01e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <osMessageQueuePut+0x36>
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <osMessageQueuePut+0x36>
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009fde:	f06f 0303 	mvn.w	r3, #3
 8009fe2:	61fb      	str	r3, [r7, #28]
 8009fe4:	e038      	b.n	800a058 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009fea:	f107 0210 	add.w	r2, r7, #16
 8009fee:	2300      	movs	r3, #0
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	69b8      	ldr	r0, [r7, #24]
 8009ff4:	f000 fcec 	bl	800a9d0 <xQueueGenericSendFromISR>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d003      	beq.n	800a006 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009ffe:	f06f 0302 	mvn.w	r3, #2
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	e028      	b.n	800a058 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d025      	beq.n	800a058 <osMessageQueuePut+0xb0>
 800a00c:	4b15      	ldr	r3, [pc, #84]	@ (800a064 <osMessageQueuePut+0xbc>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	e01c      	b.n	800a058 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <osMessageQueuePut+0x82>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d103      	bne.n	800a032 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a02a:	f06f 0303 	mvn.w	r3, #3
 800a02e:	61fb      	str	r3, [r7, #28]
 800a030:	e012      	b.n	800a058 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a032:	2300      	movs	r3, #0
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	68b9      	ldr	r1, [r7, #8]
 800a038:	69b8      	ldr	r0, [r7, #24]
 800a03a:	f000 fbc7 	bl	800a7cc <xQueueGenericSend>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b01      	cmp	r3, #1
 800a042:	d009      	beq.n	800a058 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a04a:	f06f 0301 	mvn.w	r3, #1
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	e002      	b.n	800a058 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a052:	f06f 0302 	mvn.w	r3, #2
 800a056:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a058:	69fb      	ldr	r3, [r7, #28]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3720      	adds	r7, #32
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a07e:	f3ef 8305 	mrs	r3, IPSR
 800a082:	617b      	str	r3, [r7, #20]
  return(result);
 800a084:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a086:	2b00      	cmp	r3, #0
 800a088:	d028      	beq.n	800a0dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d005      	beq.n	800a09c <osMessageQueueGet+0x34>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <osMessageQueueGet+0x34>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a09c:	f06f 0303 	mvn.w	r3, #3
 800a0a0:	61fb      	str	r3, [r7, #28]
 800a0a2:	e037      	b.n	800a114 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a0a8:	f107 0310 	add.w	r3, r7, #16
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	69b8      	ldr	r0, [r7, #24]
 800a0b2:	f000 ffad 	bl	800b010 <xQueueReceiveFromISR>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d003      	beq.n	800a0c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a0bc:	f06f 0302 	mvn.w	r3, #2
 800a0c0:	61fb      	str	r3, [r7, #28]
 800a0c2:	e027      	b.n	800a114 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d024      	beq.n	800a114 <osMessageQueueGet+0xac>
 800a0ca:	4b15      	ldr	r3, [pc, #84]	@ (800a120 <osMessageQueueGet+0xb8>)
 800a0cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	e01b      	b.n	800a114 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <osMessageQueueGet+0x80>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d103      	bne.n	800a0f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a0e8:	f06f 0303 	mvn.w	r3, #3
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	e011      	b.n	800a114 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	69b8      	ldr	r0, [r7, #24]
 800a0f6:	f000 fd99 	bl	800ac2c <xQueueReceive>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d009      	beq.n	800a114 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a106:	f06f 0301 	mvn.w	r3, #1
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	e002      	b.n	800a114 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a10e:	f06f 0302 	mvn.w	r3, #2
 800a112:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a114:	69fb      	ldr	r3, [r7, #28]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3720      	adds	r7, #32
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	e000ed04 	.word	0xe000ed04

0800a124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4a07      	ldr	r2, [pc, #28]	@ (800a150 <vApplicationGetIdleTaskMemory+0x2c>)
 800a134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4a06      	ldr	r2, [pc, #24]	@ (800a154 <vApplicationGetIdleTaskMemory+0x30>)
 800a13a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2280      	movs	r2, #128	@ 0x80
 800a140:	601a      	str	r2, [r3, #0]
}
 800a142:	bf00      	nop
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20009008 	.word	0x20009008
 800a154:	200090c0 	.word	0x200090c0

0800a158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4a07      	ldr	r2, [pc, #28]	@ (800a184 <vApplicationGetTimerTaskMemory+0x2c>)
 800a168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	4a06      	ldr	r2, [pc, #24]	@ (800a188 <vApplicationGetTimerTaskMemory+0x30>)
 800a16e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a176:	601a      	str	r2, [r3, #0]
}
 800a178:	bf00      	nop
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	200092c0 	.word	0x200092c0
 800a188:	20009378 	.word	0x20009378

0800a18c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f103 0208 	add.w	r2, r3, #8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f103 0208 	add.w	r2, r3, #8
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f103 0208 	add.w	r2, r3, #8
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1da:	bf00      	nop
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d103      	bne.n	800a24e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	e00c      	b.n	800a268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3308      	adds	r3, #8
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e002      	b.n	800a25c <vListInsert+0x2e>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	429a      	cmp	r2, r3
 800a266:	d2f6      	bcs.n	800a256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	601a      	str	r2, [r3, #0]
}
 800a294:	bf00      	nop
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	6892      	ldr	r2, [r2, #8]
 800a2b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6852      	ldr	r2, [r2, #4]
 800a2c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d103      	bne.n	800a2d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	1e5a      	subs	r2, r3, #1
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10b      	bne.n	800a320 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a31a:	bf00      	nop
 800a31c:	bf00      	nop
 800a31e:	e7fd      	b.n	800a31c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a320:	f002 fdb2 	bl	800ce88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32c:	68f9      	ldr	r1, [r7, #12]
 800a32e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a330:	fb01 f303 	mul.w	r3, r1, r3
 800a334:	441a      	add	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a350:	3b01      	subs	r3, #1
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	441a      	add	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	22ff      	movs	r2, #255	@ 0xff
 800a364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	22ff      	movs	r2, #255	@ 0xff
 800a36c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d114      	bne.n	800a3a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d01a      	beq.n	800a3b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3310      	adds	r3, #16
 800a382:	4618      	mov	r0, r3
 800a384:	f001 fd3e 	bl	800be04 <xTaskRemoveFromEventList>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d012      	beq.n	800a3b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a38e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c4 <xQueueGenericReset+0xd0>)
 800a390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	e009      	b.n	800a3b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3310      	adds	r3, #16
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fef1 	bl	800a18c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3324      	adds	r3, #36	@ 0x24
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7ff feec 	bl	800a18c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3b4:	f002 fd9a 	bl	800ceec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3b8:	2301      	movs	r3, #1
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	e000ed04 	.word	0xe000ed04

0800a3c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08e      	sub	sp, #56	@ 0x38
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10b      	bne.n	800a3f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	e7fd      	b.n	800a3f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10b      	bne.n	800a412 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	e7fd      	b.n	800a40e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <xQueueGenericCreateStatic+0x56>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <xQueueGenericCreateStatic+0x5a>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <xQueueGenericCreateStatic+0x5c>
 800a422:	2300      	movs	r3, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10b      	bne.n	800a440 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	623b      	str	r3, [r7, #32]
}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	e7fd      	b.n	800a43c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d102      	bne.n	800a44c <xQueueGenericCreateStatic+0x84>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <xQueueGenericCreateStatic+0x88>
 800a44c:	2301      	movs	r3, #1
 800a44e:	e000      	b.n	800a452 <xQueueGenericCreateStatic+0x8a>
 800a450:	2300      	movs	r3, #0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10b      	bne.n	800a46e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	61fb      	str	r3, [r7, #28]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a46e:	2350      	movs	r3, #80	@ 0x50
 800a470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b50      	cmp	r3, #80	@ 0x50
 800a476:	d00b      	beq.n	800a490 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	61bb      	str	r3, [r7, #24]
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	e7fd      	b.n	800a48c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a490:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00d      	beq.n	800a4b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 f840 	bl	800a538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3730      	adds	r7, #48	@ 0x30
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b08a      	sub	sp, #40	@ 0x28
 800a4c6:	af02      	add	r7, sp, #8
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10b      	bne.n	800a4ee <xQueueGenericCreate+0x2c>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	613b      	str	r3, [r7, #16]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	fb02 f303 	mul.w	r3, r2, r3
 800a4f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	3350      	adds	r3, #80	@ 0x50
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f002 fde5 	bl	800d0cc <pvPortMalloc>
 800a502:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d011      	beq.n	800a52e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	3350      	adds	r3, #80	@ 0x50
 800a512:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a51c:	79fa      	ldrb	r2, [r7, #7]
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	4613      	mov	r3, r2
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 f805 	bl	800a538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a52e:	69bb      	ldr	r3, [r7, #24]
	}
 800a530:	4618      	mov	r0, r3
 800a532:	3720      	adds	r7, #32
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d103      	bne.n	800a554 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	e002      	b.n	800a55a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a566:	2101      	movs	r1, #1
 800a568:	69b8      	ldr	r0, [r7, #24]
 800a56a:	f7ff fec3 	bl	800a2f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00e      	beq.n	800a5aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f911 	bl	800a7cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b086      	sub	sp, #24
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6939      	ldr	r1, [r7, #16]
 800a5ca:	6978      	ldr	r0, [r7, #20]
 800a5cc:	f7ff ff79 	bl	800a4c2 <xQueueGenericCreate>
 800a5d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff ffd3 	bl	800a57e <prvInitialiseMutex>

		return xNewQueue;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
	}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b088      	sub	sp, #32
 800a5e6:	af02      	add	r7, sp, #8
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	6039      	str	r1, [r7, #0]
 800a5ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	6939      	ldr	r1, [r7, #16]
 800a600:	6978      	ldr	r0, [r7, #20]
 800a602:	f7ff fee1 	bl	800a3c8 <xQueueGenericCreateStatic>
 800a606:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f7ff ffb8 	bl	800a57e <prvInitialiseMutex>

		return xNewQueue;
 800a60e:	68fb      	ldr	r3, [r7, #12]
	}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	60fb      	str	r3, [r7, #12]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	689c      	ldr	r4, [r3, #8]
 800a646:	f001 fda3 	bl	800c190 <xTaskGetCurrentTaskHandle>
 800a64a:	4603      	mov	r3, r0
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d111      	bne.n	800a674 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d105      	bne.n	800a66e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a662:	2300      	movs	r3, #0
 800a664:	2200      	movs	r2, #0
 800a666:	2100      	movs	r1, #0
 800a668:	6938      	ldr	r0, [r7, #16]
 800a66a:	f000 f8af 	bl	800a7cc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a66e:	2301      	movs	r3, #1
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e001      	b.n	800a678 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a678:	697b      	ldr	r3, [r7, #20]
	}
 800a67a:	4618      	mov	r0, r3
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd90      	pop	{r4, r7, pc}

0800a682 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a682:	b590      	push	{r4, r7, lr}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10b      	bne.n	800a6ae <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	e7fd      	b.n	800a6aa <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	689c      	ldr	r4, [r3, #8]
 800a6b2:	f001 fd6d 	bl	800c190 <xTaskGetCurrentTaskHandle>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	d107      	bne.n	800a6cc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	e00c      	b.n	800a6e6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6938      	ldr	r0, [r7, #16]
 800a6d0:	f000 fb8e 	bl	800adf0 <xQueueSemaphoreTake>
 800a6d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a6e6:	697b      	ldr	r3, [r7, #20]
	}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd90      	pop	{r4, r7, pc}

0800a6f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	@ 0x28
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	61bb      	str	r3, [r7, #24]
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop
 800a718:	e7fd      	b.n	800a716 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d90b      	bls.n	800a73a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	617b      	str	r3, [r7, #20]
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop
 800a738:	e7fd      	b.n	800a736 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a73a:	2302      	movs	r3, #2
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f7ff fe3f 	bl	800a3c8 <xQueueGenericCreateStatic>
 800a74a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a758:	69fb      	ldr	r3, [r7, #28]
	}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a762:	b580      	push	{r7, lr}
 800a764:	b086      	sub	sp, #24
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10b      	bne.n	800a78a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	613b      	str	r3, [r7, #16]
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop
 800a788:	e7fd      	b.n	800a786 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d90b      	bls.n	800a7aa <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60fb      	str	r3, [r7, #12]
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	e7fd      	b.n	800a7a6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fe87 	bl	800a4c2 <xQueueGenericCreate>
 800a7b4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7c2:	697b      	ldr	r3, [r7, #20]
	}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08e      	sub	sp, #56	@ 0x38
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10b      	bne.n	800a800 <xQueueGenericSend+0x34>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7fa:	bf00      	nop
 800a7fc:	bf00      	nop
 800a7fe:	e7fd      	b.n	800a7fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <xQueueGenericSend+0x42>
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <xQueueGenericSend+0x46>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <xQueueGenericSend+0x48>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10b      	bne.n	800a830 <xQueueGenericSend+0x64>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	e7fd      	b.n	800a82c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d103      	bne.n	800a83e <xQueueGenericSend+0x72>
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <xQueueGenericSend+0x76>
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <xQueueGenericSend+0x78>
 800a842:	2300      	movs	r3, #0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10b      	bne.n	800a860 <xQueueGenericSend+0x94>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	623b      	str	r3, [r7, #32]
}
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
 800a85e:	e7fd      	b.n	800a85c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a860:	f001 fca6 	bl	800c1b0 <xTaskGetSchedulerState>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <xQueueGenericSend+0xa4>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <xQueueGenericSend+0xa8>
 800a870:	2301      	movs	r3, #1
 800a872:	e000      	b.n	800a876 <xQueueGenericSend+0xaa>
 800a874:	2300      	movs	r3, #0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10b      	bne.n	800a892 <xQueueGenericSend+0xc6>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	61fb      	str	r3, [r7, #28]
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	e7fd      	b.n	800a88e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a892:	f002 faf9 	bl	800ce88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d302      	bcc.n	800a8a8 <xQueueGenericSend+0xdc>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d129      	bne.n	800a8fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ae:	f000 fc6d 	bl	800b18c <prvCopyDataToQueue>
 800a8b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d010      	beq.n	800a8de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	3324      	adds	r3, #36	@ 0x24
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f001 fa9f 	bl	800be04 <xTaskRemoveFromEventList>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d013      	beq.n	800a8f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8cc:	4b3f      	ldr	r3, [pc, #252]	@ (800a9cc <xQueueGenericSend+0x200>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	e00a      	b.n	800a8f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d007      	beq.n	800a8f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8e4:	4b39      	ldr	r3, [pc, #228]	@ (800a9cc <xQueueGenericSend+0x200>)
 800a8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8f4:	f002 fafa 	bl	800ceec <vPortExitCritical>
				return pdPASS;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e063      	b.n	800a9c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d103      	bne.n	800a90a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a902:	f002 faf3 	bl	800ceec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a906:	2300      	movs	r3, #0
 800a908:	e05c      	b.n	800a9c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d106      	bne.n	800a91e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a910:	f107 0314 	add.w	r3, r7, #20
 800a914:	4618      	mov	r0, r3
 800a916:	f001 fad9 	bl	800becc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a91a:	2301      	movs	r3, #1
 800a91c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a91e:	f002 fae5 	bl	800ceec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a922:	f001 f82f 	bl	800b984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a926:	f002 faaf 	bl	800ce88 <vPortEnterCritical>
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a930:	b25b      	sxtb	r3, r3
 800a932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a936:	d103      	bne.n	800a940 <xQueueGenericSend+0x174>
 800a938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a946:	b25b      	sxtb	r3, r3
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d103      	bne.n	800a956 <xQueueGenericSend+0x18a>
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a956:	f002 fac9 	bl	800ceec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a95a:	1d3a      	adds	r2, r7, #4
 800a95c:	f107 0314 	add.w	r3, r7, #20
 800a960:	4611      	mov	r1, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f001 fac8 	bl	800bef8 <xTaskCheckForTimeOut>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d124      	bne.n	800a9b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a96e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a970:	f000 fd04 	bl	800b37c <prvIsQueueFull>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d018      	beq.n	800a9ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	3310      	adds	r3, #16
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	4611      	mov	r1, r2
 800a982:	4618      	mov	r0, r3
 800a984:	f001 f9ec 	bl	800bd60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a98a:	f000 fc8f 	bl	800b2ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a98e:	f001 f807 	bl	800b9a0 <xTaskResumeAll>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	f47f af7c 	bne.w	800a892 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a99a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9cc <xQueueGenericSend+0x200>)
 800a99c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	e772      	b.n	800a892 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ae:	f000 fc7d 	bl	800b2ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9b2:	f000 fff5 	bl	800b9a0 <xTaskResumeAll>
 800a9b6:	e76c      	b.n	800a892 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ba:	f000 fc77 	bl	800b2ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9be:	f000 ffef 	bl	800b9a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3738      	adds	r7, #56	@ 0x38
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	e000ed04 	.word	0xe000ed04

0800a9d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b090      	sub	sp, #64	@ 0x40
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	e7fd      	b.n	800a9fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <xQueueGenericSendFromISR+0x3e>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <xQueueGenericSendFromISR+0x42>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <xQueueGenericSendFromISR+0x44>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10b      	bne.n	800aa30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa2a:	bf00      	nop
 800aa2c:	bf00      	nop
 800aa2e:	e7fd      	b.n	800aa2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d103      	bne.n	800aa3e <xQueueGenericSendFromISR+0x6e>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d101      	bne.n	800aa42 <xQueueGenericSendFromISR+0x72>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <xQueueGenericSendFromISR+0x74>
 800aa42:	2300      	movs	r3, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	623b      	str	r3, [r7, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	e7fd      	b.n	800aa5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa60:	f002 faf2 	bl	800d048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa64:	f3ef 8211 	mrs	r2, BASEPRI
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	61fa      	str	r2, [r7, #28]
 800aa7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d302      	bcc.n	800aa92 <xQueueGenericSendFromISR+0xc2>
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d12f      	bne.n	800aaf2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aaa8:	f000 fb70 	bl	800b18c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aaac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab4:	d112      	bne.n	800aadc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d016      	beq.n	800aaec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac0:	3324      	adds	r3, #36	@ 0x24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 f99e 	bl	800be04 <xTaskRemoveFromEventList>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00e      	beq.n	800aaec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00b      	beq.n	800aaec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e007      	b.n	800aaec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aadc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aae0:	3301      	adds	r3, #1
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	b25a      	sxtb	r2, r3
 800aae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aaec:	2301      	movs	r3, #1
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aaf0:	e001      	b.n	800aaf6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3740      	adds	r7, #64	@ 0x40
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08e      	sub	sp, #56	@ 0x38
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10b      	bne.n	800ab38 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	623b      	str	r3, [r7, #32]
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	e7fd      	b.n	800ab34 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	61fb      	str	r3, [r7, #28]
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	e7fd      	b.n	800ab54 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d103      	bne.n	800ab68 <xQueueGiveFromISR+0x5c>
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <xQueueGiveFromISR+0x60>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <xQueueGiveFromISR+0x62>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10b      	bne.n	800ab8a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	61bb      	str	r3, [r7, #24]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab8a:	f002 fa5d 	bl	800d048 <vPortValidateInterruptPriority>
	__asm volatile
 800ab8e:	f3ef 8211 	mrs	r2, BASEPRI
 800ab92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	617a      	str	r2, [r7, #20]
 800aba4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aba6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d22b      	bcs.n	800ac12 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd4:	d112      	bne.n	800abfc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d016      	beq.n	800ac0c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe0:	3324      	adds	r3, #36	@ 0x24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 f90e 	bl	800be04 <xTaskRemoveFromEventList>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00e      	beq.n	800ac0c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2201      	movs	r2, #1
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	e007      	b.n	800ac0c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac00:	3301      	adds	r3, #1
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	b25a      	sxtb	r2, r3
 800ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac10:	e001      	b.n	800ac16 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f383 8811 	msr	BASEPRI, r3
}
 800ac20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3738      	adds	r7, #56	@ 0x38
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08c      	sub	sp, #48	@ 0x30
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10b      	bne.n	800ac5e <xQueueReceive+0x32>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	623b      	str	r3, [r7, #32]
}
 800ac58:	bf00      	nop
 800ac5a:	bf00      	nop
 800ac5c:	e7fd      	b.n	800ac5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <xQueueReceive+0x40>
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <xQueueReceive+0x44>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <xQueueReceive+0x46>
 800ac70:	2300      	movs	r3, #0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10b      	bne.n	800ac8e <xQueueReceive+0x62>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	61fb      	str	r3, [r7, #28]
}
 800ac88:	bf00      	nop
 800ac8a:	bf00      	nop
 800ac8c:	e7fd      	b.n	800ac8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac8e:	f001 fa8f 	bl	800c1b0 <xTaskGetSchedulerState>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d102      	bne.n	800ac9e <xQueueReceive+0x72>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <xQueueReceive+0x76>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <xQueueReceive+0x78>
 800aca2:	2300      	movs	r3, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <xQueueReceive+0x94>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	61bb      	str	r3, [r7, #24]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acc0:	f002 f8e2 	bl	800ce88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	2b00      	cmp	r3, #0
 800acce:	d01f      	beq.n	800ad10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acd0:	68b9      	ldr	r1, [r7, #8]
 800acd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd4:	f000 fac4 	bl	800b260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	1e5a      	subs	r2, r3, #1
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00f      	beq.n	800ad08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ace8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acea:	3310      	adds	r3, #16
 800acec:	4618      	mov	r0, r3
 800acee:	f001 f889 	bl	800be04 <xTaskRemoveFromEventList>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d007      	beq.n	800ad08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acf8:	4b3c      	ldr	r3, [pc, #240]	@ (800adec <xQueueReceive+0x1c0>)
 800acfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad08:	f002 f8f0 	bl	800ceec <vPortExitCritical>
				return pdPASS;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e069      	b.n	800ade4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d103      	bne.n	800ad1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad16:	f002 f8e9 	bl	800ceec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e062      	b.n	800ade4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad24:	f107 0310 	add.w	r3, r7, #16
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 f8cf 	bl	800becc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad32:	f002 f8db 	bl	800ceec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad36:	f000 fe25 	bl	800b984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad3a:	f002 f8a5 	bl	800ce88 <vPortEnterCritical>
 800ad3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad44:	b25b      	sxtb	r3, r3
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4a:	d103      	bne.n	800ad54 <xQueueReceive+0x128>
 800ad4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d103      	bne.n	800ad6a <xQueueReceive+0x13e>
 800ad62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad6a:	f002 f8bf 	bl	800ceec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad6e:	1d3a      	adds	r2, r7, #4
 800ad70:	f107 0310 	add.w	r3, r7, #16
 800ad74:	4611      	mov	r1, r2
 800ad76:	4618      	mov	r0, r3
 800ad78:	f001 f8be 	bl	800bef8 <xTaskCheckForTimeOut>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d123      	bne.n	800adca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad84:	f000 fae4 	bl	800b350 <prvIsQueueEmpty>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d017      	beq.n	800adbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad90:	3324      	adds	r3, #36	@ 0x24
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	4611      	mov	r1, r2
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 ffe2 	bl	800bd60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad9e:	f000 fa85 	bl	800b2ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ada2:	f000 fdfd 	bl	800b9a0 <xTaskResumeAll>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d189      	bne.n	800acc0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800adac:	4b0f      	ldr	r3, [pc, #60]	@ (800adec <xQueueReceive+0x1c0>)
 800adae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	e780      	b.n	800acc0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc0:	f000 fa74 	bl	800b2ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adc4:	f000 fdec 	bl	800b9a0 <xTaskResumeAll>
 800adc8:	e77a      	b.n	800acc0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800adca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adcc:	f000 fa6e 	bl	800b2ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800add0:	f000 fde6 	bl	800b9a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800add6:	f000 fabb 	bl	800b350 <prvIsQueueEmpty>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	f43f af6f 	beq.w	800acc0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ade2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3730      	adds	r7, #48	@ 0x30
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	e000ed04 	.word	0xe000ed04

0800adf0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08e      	sub	sp, #56	@ 0x38
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	623b      	str	r3, [r7, #32]
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	61fb      	str	r3, [r7, #28]
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae44:	f001 f9b4 	bl	800c1b0 <xTaskGetSchedulerState>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d102      	bne.n	800ae54 <xQueueSemaphoreTake+0x64>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <xQueueSemaphoreTake+0x68>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e000      	b.n	800ae5a <xQueueSemaphoreTake+0x6a>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61bb      	str	r3, [r7, #24]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae76:	f002 f807 	bl	800ce88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d024      	beq.n	800aed0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae88:	1e5a      	subs	r2, r3, #1
 800ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d104      	bne.n	800aea0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae96:	f001 fb05 	bl	800c4a4 <pvTaskIncrementMutexHeldCount>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00f      	beq.n	800aec8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	3310      	adds	r3, #16
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 ffa9 	bl	800be04 <xTaskRemoveFromEventList>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d007      	beq.n	800aec8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aeb8:	4b54      	ldr	r3, [pc, #336]	@ (800b00c <xQueueSemaphoreTake+0x21c>)
 800aeba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aec8:	f002 f810 	bl	800ceec <vPortExitCritical>
				return pdPASS;
 800aecc:	2301      	movs	r3, #1
 800aece:	e098      	b.n	800b002 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d112      	bne.n	800aefc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00b      	beq.n	800aef4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	617b      	str	r3, [r7, #20]
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	e7fd      	b.n	800aef0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aef4:	f001 fffa 	bl	800ceec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e082      	b.n	800b002 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af02:	f107 030c 	add.w	r3, r7, #12
 800af06:	4618      	mov	r0, r3
 800af08:	f000 ffe0 	bl	800becc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af0c:	2301      	movs	r3, #1
 800af0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af10:	f001 ffec 	bl	800ceec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af14:	f000 fd36 	bl	800b984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af18:	f001 ffb6 	bl	800ce88 <vPortEnterCritical>
 800af1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af22:	b25b      	sxtb	r3, r3
 800af24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af28:	d103      	bne.n	800af32 <xQueueSemaphoreTake+0x142>
 800af2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af38:	b25b      	sxtb	r3, r3
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d103      	bne.n	800af48 <xQueueSemaphoreTake+0x158>
 800af40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af48:	f001 ffd0 	bl	800ceec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af4c:	463a      	mov	r2, r7
 800af4e:	f107 030c 	add.w	r3, r7, #12
 800af52:	4611      	mov	r1, r2
 800af54:	4618      	mov	r0, r3
 800af56:	f000 ffcf 	bl	800bef8 <xTaskCheckForTimeOut>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d132      	bne.n	800afc6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af62:	f000 f9f5 	bl	800b350 <prvIsQueueEmpty>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d026      	beq.n	800afba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d109      	bne.n	800af88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800af74:	f001 ff88 	bl	800ce88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f001 f935 	bl	800c1ec <xTaskPriorityInherit>
 800af82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800af84:	f001 ffb2 	bl	800ceec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	3324      	adds	r3, #36	@ 0x24
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f000 fee5 	bl	800bd60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af98:	f000 f988 	bl	800b2ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af9c:	f000 fd00 	bl	800b9a0 <xTaskResumeAll>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f47f af67 	bne.w	800ae76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800afa8:	4b18      	ldr	r3, [pc, #96]	@ (800b00c <xQueueSemaphoreTake+0x21c>)
 800afaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	e75d      	b.n	800ae76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800afba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afbc:	f000 f976 	bl	800b2ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afc0:	f000 fcee 	bl	800b9a0 <xTaskResumeAll>
 800afc4:	e757      	b.n	800ae76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800afc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afc8:	f000 f970 	bl	800b2ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afcc:	f000 fce8 	bl	800b9a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afd2:	f000 f9bd 	bl	800b350 <prvIsQueueEmpty>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f43f af4c 	beq.w	800ae76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00d      	beq.n	800b000 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800afe4:	f001 ff50 	bl	800ce88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800afe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afea:	f000 f8b7 	bl	800b15c <prvGetDisinheritPriorityAfterTimeout>
 800afee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 f9d0 	bl	800c39c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800affc:	f001 ff76 	bl	800ceec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b002:	4618      	mov	r0, r3
 800b004:	3738      	adds	r7, #56	@ 0x38
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	e000ed04 	.word	0xe000ed04

0800b010 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b08e      	sub	sp, #56	@ 0x38
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10b      	bne.n	800b03e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	623b      	str	r3, [r7, #32]
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	e7fd      	b.n	800b03a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d103      	bne.n	800b04c <xQueueReceiveFromISR+0x3c>
 800b044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <xQueueReceiveFromISR+0x40>
 800b04c:	2301      	movs	r3, #1
 800b04e:	e000      	b.n	800b052 <xQueueReceiveFromISR+0x42>
 800b050:	2300      	movs	r3, #0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	61fb      	str	r3, [r7, #28]
}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	e7fd      	b.n	800b06a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b06e:	f001 ffeb 	bl	800d048 <vPortValidateInterruptPriority>
	__asm volatile
 800b072:	f3ef 8211 	mrs	r2, BASEPRI
 800b076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	61ba      	str	r2, [r7, #24]
 800b088:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b08a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b08c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b092:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b096:	2b00      	cmp	r3, #0
 800b098:	d02f      	beq.n	800b0fa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0a8:	f000 f8da 	bl	800b260 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ae:	1e5a      	subs	r2, r3, #1
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0bc:	d112      	bne.n	800b0e4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d016      	beq.n	800b0f4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	3310      	adds	r3, #16
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fe9a 	bl	800be04 <xTaskRemoveFromEventList>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00e      	beq.n	800b0f4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e007      	b.n	800b0f4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	b25a      	sxtb	r2, r3
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0f8:	e001      	b.n	800b0fe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b100:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f383 8811 	msr	BASEPRI, r3
}
 800b108:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3738      	adds	r7, #56	@ 0x38
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10b      	bne.n	800b13e <vQueueDelete+0x2a>
	__asm volatile
 800b126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	60bb      	str	r3, [r7, #8]
}
 800b138:	bf00      	nop
 800b13a:	bf00      	nop
 800b13c:	e7fd      	b.n	800b13a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 f95e 	bl	800b400 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f002 f860 	bl	800d214 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b154:	bf00      	nop
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d006      	beq.n	800b17a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	e001      	b.n	800b17e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b17a:	2300      	movs	r3, #0
 800b17c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b17e:	68fb      	ldr	r3, [r7, #12]
	}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b198:	2300      	movs	r3, #0
 800b19a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10d      	bne.n	800b1c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d14d      	bne.n	800b24e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 f880 	bl	800c2bc <xTaskPriorityDisinherit>
 800b1bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	609a      	str	r2, [r3, #8]
 800b1c4:	e043      	b.n	800b24e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d119      	bne.n	800b200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6858      	ldr	r0, [r3, #4]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	f00d f93f 	bl	801845a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e4:	441a      	add	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d32b      	bcc.n	800b24e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	605a      	str	r2, [r3, #4]
 800b1fe:	e026      	b.n	800b24e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	68d8      	ldr	r0, [r3, #12]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b208:	461a      	mov	r2, r3
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	f00d f925 	bl	801845a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b218:	425b      	negs	r3, r3
 800b21a:	441a      	add	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d207      	bcs.n	800b23c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b234:	425b      	negs	r3, r3
 800b236:	441a      	add	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d105      	bne.n	800b24e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b256:	697b      	ldr	r3, [r7, #20]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d018      	beq.n	800b2a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68da      	ldr	r2, [r3, #12]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27a:	441a      	add	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68da      	ldr	r2, [r3, #12]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d303      	bcc.n	800b294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68d9      	ldr	r1, [r3, #12]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b29c:	461a      	mov	r2, r3
 800b29e:	6838      	ldr	r0, [r7, #0]
 800b2a0:	f00d f8db 	bl	801845a <memcpy>
	}
}
 800b2a4:	bf00      	nop
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2b4:	f001 fde8 	bl	800ce88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2c0:	e011      	b.n	800b2e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d012      	beq.n	800b2f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3324      	adds	r3, #36	@ 0x24
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fd98 	bl	800be04 <xTaskRemoveFromEventList>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2da:	f000 fe71 	bl	800bfc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	dce9      	bgt.n	800b2c2 <prvUnlockQueue+0x16>
 800b2ee:	e000      	b.n	800b2f2 <prvUnlockQueue+0x46>
					break;
 800b2f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	22ff      	movs	r2, #255	@ 0xff
 800b2f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b2fa:	f001 fdf7 	bl	800ceec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2fe:	f001 fdc3 	bl	800ce88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b30a:	e011      	b.n	800b330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d012      	beq.n	800b33a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3310      	adds	r3, #16
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fd73 	bl	800be04 <xTaskRemoveFromEventList>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b324:	f000 fe4c 	bl	800bfc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b334:	2b00      	cmp	r3, #0
 800b336:	dce9      	bgt.n	800b30c <prvUnlockQueue+0x60>
 800b338:	e000      	b.n	800b33c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b33a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	22ff      	movs	r2, #255	@ 0xff
 800b340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b344:	f001 fdd2 	bl	800ceec <vPortExitCritical>
}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b358:	f001 fd96 	bl	800ce88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
 800b368:	e001      	b.n	800b36e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b36e:	f001 fdbd 	bl	800ceec <vPortExitCritical>

	return xReturn;
 800b372:	68fb      	ldr	r3, [r7, #12]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b384:	f001 fd80 	bl	800ce88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b390:	429a      	cmp	r2, r3
 800b392:	d102      	bne.n	800b39a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b394:	2301      	movs	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	e001      	b.n	800b39e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b39e:	f001 fda5 	bl	800ceec <vPortExitCritical>

	return xReturn;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	e014      	b.n	800b3e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b3fc <vQueueAddToRegistry+0x50>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10b      	bne.n	800b3e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3c8:	490c      	ldr	r1, [pc, #48]	@ (800b3fc <vQueueAddToRegistry+0x50>)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3d2:	4a0a      	ldr	r2, [pc, #40]	@ (800b3fc <vQueueAddToRegistry+0x50>)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	4413      	add	r3, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3de:	e006      	b.n	800b3ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b07      	cmp	r3, #7
 800b3ea:	d9e7      	bls.n	800b3bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	20009778 	.word	0x20009778

0800b400 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	e016      	b.n	800b43c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b40e:	4a10      	ldr	r2, [pc, #64]	@ (800b450 <vQueueUnregisterQueue+0x50>)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	4413      	add	r3, r2
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d10b      	bne.n	800b436 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b41e:	4a0c      	ldr	r2, [pc, #48]	@ (800b450 <vQueueUnregisterQueue+0x50>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2100      	movs	r1, #0
 800b424:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b428:	4a09      	ldr	r2, [pc, #36]	@ (800b450 <vQueueUnregisterQueue+0x50>)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	4413      	add	r3, r2
 800b430:	2200      	movs	r2, #0
 800b432:	605a      	str	r2, [r3, #4]
				break;
 800b434:	e006      	b.n	800b444 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b07      	cmp	r3, #7
 800b440:	d9e5      	bls.n	800b40e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	20009778 	.word	0x20009778

0800b454 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b464:	f001 fd10 	bl	800ce88 <vPortEnterCritical>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b46e:	b25b      	sxtb	r3, r3
 800b470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b474:	d103      	bne.n	800b47e <vQueueWaitForMessageRestricted+0x2a>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b484:	b25b      	sxtb	r3, r3
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48a:	d103      	bne.n	800b494 <vQueueWaitForMessageRestricted+0x40>
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b494:	f001 fd2a 	bl	800ceec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	3324      	adds	r3, #36	@ 0x24
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 fc7f 	bl	800bdac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4ae:	6978      	ldr	r0, [r7, #20]
 800b4b0:	f7ff fefc 	bl	800b2ac <prvUnlockQueue>
	}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08e      	sub	sp, #56	@ 0x38
 800b4c0:	af04      	add	r7, sp, #16
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10b      	bne.n	800b4e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	623b      	str	r3, [r7, #32]
}
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	e7fd      	b.n	800b4e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10b      	bne.n	800b506 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	61fb      	str	r3, [r7, #28]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b506:	23b8      	movs	r3, #184	@ 0xb8
 800b508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2bb8      	cmp	r3, #184	@ 0xb8
 800b50e:	d00b      	beq.n	800b528 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	61bb      	str	r3, [r7, #24]
}
 800b522:	bf00      	nop
 800b524:	bf00      	nop
 800b526:	e7fd      	b.n	800b524 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b528:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01e      	beq.n	800b56e <xTaskCreateStatic+0xb2>
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	2b00      	cmp	r3, #0
 800b534:	d01b      	beq.n	800b56e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b538:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b53e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	2202      	movs	r2, #2
 800b544:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b548:	2300      	movs	r3, #0
 800b54a:	9303      	str	r3, [sp, #12]
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	9302      	str	r3, [sp, #8]
 800b550:	f107 0314 	add.w	r3, r7, #20
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f851 	bl	800b608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b568:	f000 f8f6 	bl	800b758 <prvAddNewTaskToReadyList>
 800b56c:	e001      	b.n	800b572 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b572:	697b      	ldr	r3, [r7, #20]
	}
 800b574:	4618      	mov	r0, r3
 800b576:	3728      	adds	r7, #40	@ 0x28
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08c      	sub	sp, #48	@ 0x30
 800b580:	af04      	add	r7, sp, #16
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	4613      	mov	r3, r2
 800b58a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fd9b 	bl	800d0cc <pvPortMalloc>
 800b596:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00e      	beq.n	800b5bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b59e:	20b8      	movs	r0, #184	@ 0xb8
 800b5a0:	f001 fd94 	bl	800d0cc <pvPortMalloc>
 800b5a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d003      	beq.n	800b5b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5b2:	e005      	b.n	800b5c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5b4:	6978      	ldr	r0, [r7, #20]
 800b5b6:	f001 fe2d 	bl	800d214 <vPortFree>
 800b5ba:	e001      	b.n	800b5c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d017      	beq.n	800b5f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5ce:	88fa      	ldrh	r2, [r7, #6]
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	9303      	str	r3, [sp, #12]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	9302      	str	r3, [sp, #8]
 800b5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5da:	9301      	str	r3, [sp, #4]
 800b5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f80f 	bl	800b608 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5ea:	69f8      	ldr	r0, [r7, #28]
 800b5ec:	f000 f8b4 	bl	800b758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	61bb      	str	r3, [r7, #24]
 800b5f4:	e002      	b.n	800b5fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5fc:	69bb      	ldr	r3, [r7, #24]
	}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3720      	adds	r7, #32
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b088      	sub	sp, #32
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b618:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	461a      	mov	r2, r3
 800b620:	21a5      	movs	r1, #165	@ 0xa5
 800b622:	f00c fe4e 	bl	80182c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b630:	3b01      	subs	r3, #1
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	f023 0307 	bic.w	r3, r3, #7
 800b63e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00b      	beq.n	800b662 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	617b      	str	r3, [r7, #20]
}
 800b65c:	bf00      	nop
 800b65e:	bf00      	nop
 800b660:	e7fd      	b.n	800b65e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01f      	beq.n	800b6a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b668:	2300      	movs	r3, #0
 800b66a:	61fb      	str	r3, [r7, #28]
 800b66c:	e012      	b.n	800b694 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	4413      	add	r3, r2
 800b674:	7819      	ldrb	r1, [r3, #0]
 800b676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	4413      	add	r3, r2
 800b67c:	3334      	adds	r3, #52	@ 0x34
 800b67e:	460a      	mov	r2, r1
 800b680:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	4413      	add	r3, r2
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d006      	beq.n	800b69c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	3301      	adds	r3, #1
 800b692:	61fb      	str	r3, [r7, #28]
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	2b1f      	cmp	r3, #31
 800b698:	d9e9      	bls.n	800b66e <prvInitialiseNewTask+0x66>
 800b69a:	e000      	b.n	800b69e <prvInitialiseNewTask+0x96>
			{
				break;
 800b69c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b6a6:	e003      	b.n	800b6b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	2b37      	cmp	r3, #55	@ 0x37
 800b6b4:	d901      	bls.n	800b6ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6b6:	2337      	movs	r3, #55	@ 0x37
 800b6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6c4:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe fd7b 	bl	800a1cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d8:	3318      	adds	r3, #24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fd76 	bl	800a1cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b700:	2200      	movs	r2, #0
 800b702:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	3364      	adds	r3, #100	@ 0x64
 800b70a:	224c      	movs	r2, #76	@ 0x4c
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f00c fdd7 	bl	80182c2 <memset>
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	4a0d      	ldr	r2, [pc, #52]	@ (800b74c <prvInitialiseNewTask+0x144>)
 800b718:	669a      	str	r2, [r3, #104]	@ 0x68
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	4a0c      	ldr	r2, [pc, #48]	@ (800b750 <prvInitialiseNewTask+0x148>)
 800b71e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	4a0c      	ldr	r2, [pc, #48]	@ (800b754 <prvInitialiseNewTask+0x14c>)
 800b724:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	68f9      	ldr	r1, [r7, #12]
 800b72a:	69b8      	ldr	r0, [r7, #24]
 800b72c:	f001 fa7c 	bl	800cc28 <pxPortInitialiseStack>
 800b730:	4602      	mov	r2, r0
 800b732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b734:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b742:	bf00      	nop
 800b744:	3720      	adds	r7, #32
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	2000f2d8 	.word	0x2000f2d8
 800b750:	2000f340 	.word	0x2000f340
 800b754:	2000f3a8 	.word	0x2000f3a8

0800b758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b760:	f001 fb92 	bl	800ce88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b764:	4b2d      	ldr	r3, [pc, #180]	@ (800b81c <prvAddNewTaskToReadyList+0xc4>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	4a2c      	ldr	r2, [pc, #176]	@ (800b81c <prvAddNewTaskToReadyList+0xc4>)
 800b76c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b76e:	4b2c      	ldr	r3, [pc, #176]	@ (800b820 <prvAddNewTaskToReadyList+0xc8>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d109      	bne.n	800b78a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b776:	4a2a      	ldr	r2, [pc, #168]	@ (800b820 <prvAddNewTaskToReadyList+0xc8>)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b77c:	4b27      	ldr	r3, [pc, #156]	@ (800b81c <prvAddNewTaskToReadyList+0xc4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d110      	bne.n	800b7a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b784:	f000 fc40 	bl	800c008 <prvInitialiseTaskLists>
 800b788:	e00d      	b.n	800b7a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b78a:	4b26      	ldr	r3, [pc, #152]	@ (800b824 <prvAddNewTaskToReadyList+0xcc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b792:	4b23      	ldr	r3, [pc, #140]	@ (800b820 <prvAddNewTaskToReadyList+0xc8>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d802      	bhi.n	800b7a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b820 <prvAddNewTaskToReadyList+0xc8>)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7a6:	4b20      	ldr	r3, [pc, #128]	@ (800b828 <prvAddNewTaskToReadyList+0xd0>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	4a1e      	ldr	r2, [pc, #120]	@ (800b828 <prvAddNewTaskToReadyList+0xd0>)
 800b7ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7b0:	4b1d      	ldr	r3, [pc, #116]	@ (800b828 <prvAddNewTaskToReadyList+0xd0>)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b82c <prvAddNewTaskToReadyList+0xd4>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d903      	bls.n	800b7cc <prvAddNewTaskToReadyList+0x74>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c8:	4a18      	ldr	r2, [pc, #96]	@ (800b82c <prvAddNewTaskToReadyList+0xd4>)
 800b7ca:	6013      	str	r3, [r2, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4a15      	ldr	r2, [pc, #84]	@ (800b830 <prvAddNewTaskToReadyList+0xd8>)
 800b7da:	441a      	add	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fe fcff 	bl	800a1e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7e8:	f001 fb80 	bl	800ceec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b824 <prvAddNewTaskToReadyList+0xcc>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00e      	beq.n	800b812 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b820 <prvAddNewTaskToReadyList+0xc8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d207      	bcs.n	800b812 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b802:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <prvAddNewTaskToReadyList+0xdc>)
 800b804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20009c8c 	.word	0x20009c8c
 800b820:	200097b8 	.word	0x200097b8
 800b824:	20009c98 	.word	0x20009c98
 800b828:	20009ca8 	.word	0x20009ca8
 800b82c:	20009c94 	.word	0x20009c94
 800b830:	200097bc 	.word	0x200097bc
 800b834:	e000ed04 	.word	0xe000ed04

0800b838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d018      	beq.n	800b87c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b84a:	4b14      	ldr	r3, [pc, #80]	@ (800b89c <vTaskDelay+0x64>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00b      	beq.n	800b86a <vTaskDelay+0x32>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60bb      	str	r3, [r7, #8]
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	e7fd      	b.n	800b866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b86a:	f000 f88b 	bl	800b984 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b86e:	2100      	movs	r1, #0
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fe2b 	bl	800c4cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b876:	f000 f893 	bl	800b9a0 <xTaskResumeAll>
 800b87a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d107      	bne.n	800b892 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b882:	4b07      	ldr	r3, [pc, #28]	@ (800b8a0 <vTaskDelay+0x68>)
 800b884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	20009cb4 	.word	0x20009cb4
 800b8a0:	e000ed04 	.word	0xe000ed04

0800b8a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08a      	sub	sp, #40	@ 0x28
 800b8a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8b2:	463a      	mov	r2, r7
 800b8b4:	1d39      	adds	r1, r7, #4
 800b8b6:	f107 0308 	add.w	r3, r7, #8
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fc32 	bl	800a124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	9202      	str	r2, [sp, #8]
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	460a      	mov	r2, r1
 800b8d2:	4924      	ldr	r1, [pc, #144]	@ (800b964 <vTaskStartScheduler+0xc0>)
 800b8d4:	4824      	ldr	r0, [pc, #144]	@ (800b968 <vTaskStartScheduler+0xc4>)
 800b8d6:	f7ff fdf1 	bl	800b4bc <xTaskCreateStatic>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4a23      	ldr	r2, [pc, #140]	@ (800b96c <vTaskStartScheduler+0xc8>)
 800b8de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8e0:	4b22      	ldr	r3, [pc, #136]	@ (800b96c <vTaskStartScheduler+0xc8>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e001      	b.n	800b8f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d102      	bne.n	800b8fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8f8:	f000 fe3c 	bl	800c574 <xTimerCreateTimerTask>
 800b8fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d11b      	bne.n	800b93c <vTaskStartScheduler+0x98>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	613b      	str	r3, [r7, #16]
}
 800b916:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b918:	4b15      	ldr	r3, [pc, #84]	@ (800b970 <vTaskStartScheduler+0xcc>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3364      	adds	r3, #100	@ 0x64
 800b91e:	4a15      	ldr	r2, [pc, #84]	@ (800b974 <vTaskStartScheduler+0xd0>)
 800b920:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b922:	4b15      	ldr	r3, [pc, #84]	@ (800b978 <vTaskStartScheduler+0xd4>)
 800b924:	f04f 32ff 	mov.w	r2, #4294967295
 800b928:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b92a:	4b14      	ldr	r3, [pc, #80]	@ (800b97c <vTaskStartScheduler+0xd8>)
 800b92c:	2201      	movs	r2, #1
 800b92e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b930:	4b13      	ldr	r3, [pc, #76]	@ (800b980 <vTaskStartScheduler+0xdc>)
 800b932:	2200      	movs	r2, #0
 800b934:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b936:	f001 fa03 	bl	800cd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b93a:	e00f      	b.n	800b95c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b942:	d10b      	bne.n	800b95c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	60fb      	str	r3, [r7, #12]
}
 800b956:	bf00      	nop
 800b958:	bf00      	nop
 800b95a:	e7fd      	b.n	800b958 <vTaskStartScheduler+0xb4>
}
 800b95c:	bf00      	nop
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	08019140 	.word	0x08019140
 800b968:	0800bfd9 	.word	0x0800bfd9
 800b96c:	20009cb0 	.word	0x20009cb0
 800b970:	200097b8 	.word	0x200097b8
 800b974:	2000013c 	.word	0x2000013c
 800b978:	20009cac 	.word	0x20009cac
 800b97c:	20009c98 	.word	0x20009c98
 800b980:	20009c90 	.word	0x20009c90

0800b984 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b988:	4b04      	ldr	r3, [pc, #16]	@ (800b99c <vTaskSuspendAll+0x18>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3301      	adds	r3, #1
 800b98e:	4a03      	ldr	r2, [pc, #12]	@ (800b99c <vTaskSuspendAll+0x18>)
 800b990:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b992:	bf00      	nop
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	20009cb4 	.word	0x20009cb4

0800b9a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9ae:	4b42      	ldr	r3, [pc, #264]	@ (800bab8 <xTaskResumeAll+0x118>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10b      	bne.n	800b9ce <xTaskResumeAll+0x2e>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	603b      	str	r3, [r7, #0]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9ce:	f001 fa5b 	bl	800ce88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9d2:	4b39      	ldr	r3, [pc, #228]	@ (800bab8 <xTaskResumeAll+0x118>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	4a37      	ldr	r2, [pc, #220]	@ (800bab8 <xTaskResumeAll+0x118>)
 800b9da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9dc:	4b36      	ldr	r3, [pc, #216]	@ (800bab8 <xTaskResumeAll+0x118>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d162      	bne.n	800baaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9e4:	4b35      	ldr	r3, [pc, #212]	@ (800babc <xTaskResumeAll+0x11c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d05e      	beq.n	800baaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9ec:	e02f      	b.n	800ba4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ee:	4b34      	ldr	r3, [pc, #208]	@ (800bac0 <xTaskResumeAll+0x120>)
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3318      	adds	r3, #24
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fc50 	bl	800a2a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fe fc4b 	bl	800a2a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba0e:	4b2d      	ldr	r3, [pc, #180]	@ (800bac4 <xTaskResumeAll+0x124>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d903      	bls.n	800ba1e <xTaskResumeAll+0x7e>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bac4 <xTaskResumeAll+0x124>)
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a27      	ldr	r2, [pc, #156]	@ (800bac8 <xTaskResumeAll+0x128>)
 800ba2c:	441a      	add	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f7fe fbd6 	bl	800a1e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba3e:	4b23      	ldr	r3, [pc, #140]	@ (800bacc <xTaskResumeAll+0x12c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d302      	bcc.n	800ba4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ba48:	4b21      	ldr	r3, [pc, #132]	@ (800bad0 <xTaskResumeAll+0x130>)
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba4e:	4b1c      	ldr	r3, [pc, #112]	@ (800bac0 <xTaskResumeAll+0x120>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1cb      	bne.n	800b9ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba5c:	f000 fb78 	bl	800c150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba60:	4b1c      	ldr	r3, [pc, #112]	@ (800bad4 <xTaskResumeAll+0x134>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d010      	beq.n	800ba8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba6c:	f000 f858 	bl	800bb20 <xTaskIncrementTick>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba76:	4b16      	ldr	r3, [pc, #88]	@ (800bad0 <xTaskResumeAll+0x130>)
 800ba78:	2201      	movs	r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f1      	bne.n	800ba6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba88:	4b12      	ldr	r3, [pc, #72]	@ (800bad4 <xTaskResumeAll+0x134>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba8e:	4b10      	ldr	r3, [pc, #64]	@ (800bad0 <xTaskResumeAll+0x130>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d009      	beq.n	800baaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bad8 <xTaskResumeAll+0x138>)
 800ba9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baaa:	f001 fa1f 	bl	800ceec <vPortExitCritical>

	return xAlreadyYielded;
 800baae:	68bb      	ldr	r3, [r7, #8]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20009cb4 	.word	0x20009cb4
 800babc:	20009c8c 	.word	0x20009c8c
 800bac0:	20009c4c 	.word	0x20009c4c
 800bac4:	20009c94 	.word	0x20009c94
 800bac8:	200097bc 	.word	0x200097bc
 800bacc:	200097b8 	.word	0x200097b8
 800bad0:	20009ca0 	.word	0x20009ca0
 800bad4:	20009c9c 	.word	0x20009c9c
 800bad8:	e000ed04 	.word	0xe000ed04

0800badc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bae2:	4b05      	ldr	r3, [pc, #20]	@ (800baf8 <xTaskGetTickCount+0x1c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bae8:	687b      	ldr	r3, [r7, #4]
}
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	20009c90 	.word	0x20009c90

0800bafc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb02:	f001 faa1 	bl	800d048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb06:	2300      	movs	r3, #0
 800bb08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb0a:	4b04      	ldr	r3, [pc, #16]	@ (800bb1c <xTaskGetTickCountFromISR+0x20>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb10:	683b      	ldr	r3, [r7, #0]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20009c90 	.word	0x20009c90

0800bb20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb26:	2300      	movs	r3, #0
 800bb28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb2a:	4b4f      	ldr	r3, [pc, #316]	@ (800bc68 <xTaskIncrementTick+0x148>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f040 8090 	bne.w	800bc54 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb34:	4b4d      	ldr	r3, [pc, #308]	@ (800bc6c <xTaskIncrementTick+0x14c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb3c:	4a4b      	ldr	r2, [pc, #300]	@ (800bc6c <xTaskIncrementTick+0x14c>)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d121      	bne.n	800bb8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb48:	4b49      	ldr	r3, [pc, #292]	@ (800bc70 <xTaskIncrementTick+0x150>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00b      	beq.n	800bb6a <xTaskIncrementTick+0x4a>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	603b      	str	r3, [r7, #0]
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop
 800bb68:	e7fd      	b.n	800bb66 <xTaskIncrementTick+0x46>
 800bb6a:	4b41      	ldr	r3, [pc, #260]	@ (800bc70 <xTaskIncrementTick+0x150>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	4b40      	ldr	r3, [pc, #256]	@ (800bc74 <xTaskIncrementTick+0x154>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a3e      	ldr	r2, [pc, #248]	@ (800bc70 <xTaskIncrementTick+0x150>)
 800bb76:	6013      	str	r3, [r2, #0]
 800bb78:	4a3e      	ldr	r2, [pc, #248]	@ (800bc74 <xTaskIncrementTick+0x154>)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	4b3e      	ldr	r3, [pc, #248]	@ (800bc78 <xTaskIncrementTick+0x158>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a3c      	ldr	r2, [pc, #240]	@ (800bc78 <xTaskIncrementTick+0x158>)
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	f000 fae2 	bl	800c150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb8c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc7c <xTaskIncrementTick+0x15c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d349      	bcc.n	800bc2a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb96:	4b36      	ldr	r3, [pc, #216]	@ (800bc70 <xTaskIncrementTick+0x150>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba0:	4b36      	ldr	r3, [pc, #216]	@ (800bc7c <xTaskIncrementTick+0x15c>)
 800bba2:	f04f 32ff 	mov.w	r2, #4294967295
 800bba6:	601a      	str	r2, [r3, #0]
					break;
 800bba8:	e03f      	b.n	800bc2a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbaa:	4b31      	ldr	r3, [pc, #196]	@ (800bc70 <xTaskIncrementTick+0x150>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d203      	bcs.n	800bbca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbc2:	4a2e      	ldr	r2, [pc, #184]	@ (800bc7c <xTaskIncrementTick+0x15c>)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbc8:	e02f      	b.n	800bc2a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe fb66 	bl	800a2a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d004      	beq.n	800bbe6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	3318      	adds	r3, #24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fb5d 	bl	800a2a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbea:	4b25      	ldr	r3, [pc, #148]	@ (800bc80 <xTaskIncrementTick+0x160>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d903      	bls.n	800bbfa <xTaskIncrementTick+0xda>
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf6:	4a22      	ldr	r2, [pc, #136]	@ (800bc80 <xTaskIncrementTick+0x160>)
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4a1f      	ldr	r2, [pc, #124]	@ (800bc84 <xTaskIncrementTick+0x164>)
 800bc08:	441a      	add	r2, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4610      	mov	r0, r2
 800bc12:	f7fe fae8 	bl	800a1e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1a:	4b1b      	ldr	r3, [pc, #108]	@ (800bc88 <xTaskIncrementTick+0x168>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d3b8      	bcc.n	800bb96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bc24:	2301      	movs	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc28:	e7b5      	b.n	800bb96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc2a:	4b17      	ldr	r3, [pc, #92]	@ (800bc88 <xTaskIncrementTick+0x168>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc30:	4914      	ldr	r1, [pc, #80]	@ (800bc84 <xTaskIncrementTick+0x164>)
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d901      	bls.n	800bc46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bc42:	2301      	movs	r3, #1
 800bc44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc46:	4b11      	ldr	r3, [pc, #68]	@ (800bc8c <xTaskIncrementTick+0x16c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d007      	beq.n	800bc5e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	e004      	b.n	800bc5e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc54:	4b0e      	ldr	r3, [pc, #56]	@ (800bc90 <xTaskIncrementTick+0x170>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	4a0d      	ldr	r2, [pc, #52]	@ (800bc90 <xTaskIncrementTick+0x170>)
 800bc5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc5e:	697b      	ldr	r3, [r7, #20]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20009cb4 	.word	0x20009cb4
 800bc6c:	20009c90 	.word	0x20009c90
 800bc70:	20009c44 	.word	0x20009c44
 800bc74:	20009c48 	.word	0x20009c48
 800bc78:	20009ca4 	.word	0x20009ca4
 800bc7c:	20009cac 	.word	0x20009cac
 800bc80:	20009c94 	.word	0x20009c94
 800bc84:	200097bc 	.word	0x200097bc
 800bc88:	200097b8 	.word	0x200097b8
 800bc8c:	20009ca0 	.word	0x20009ca0
 800bc90:	20009c9c 	.word	0x20009c9c

0800bc94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc9a:	4b2b      	ldr	r3, [pc, #172]	@ (800bd48 <vTaskSwitchContext+0xb4>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bca2:	4b2a      	ldr	r3, [pc, #168]	@ (800bd4c <vTaskSwitchContext+0xb8>)
 800bca4:	2201      	movs	r2, #1
 800bca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bca8:	e047      	b.n	800bd3a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bcaa:	4b28      	ldr	r3, [pc, #160]	@ (800bd4c <vTaskSwitchContext+0xb8>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb0:	4b27      	ldr	r3, [pc, #156]	@ (800bd50 <vTaskSwitchContext+0xbc>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	e011      	b.n	800bcdc <vTaskSwitchContext+0x48>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10b      	bne.n	800bcd6 <vTaskSwitchContext+0x42>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	607b      	str	r3, [r7, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <vTaskSwitchContext+0x3e>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	491d      	ldr	r1, [pc, #116]	@ (800bd54 <vTaskSwitchContext+0xc0>)
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4613      	mov	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	440b      	add	r3, r1
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0e3      	beq.n	800bcb8 <vTaskSwitchContext+0x24>
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4a16      	ldr	r2, [pc, #88]	@ (800bd54 <vTaskSwitchContext+0xc0>)
 800bcfc:	4413      	add	r3, r2
 800bcfe:	60bb      	str	r3, [r7, #8]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	605a      	str	r2, [r3, #4]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	3308      	adds	r3, #8
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d104      	bne.n	800bd20 <vTaskSwitchContext+0x8c>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	605a      	str	r2, [r3, #4]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	4a0c      	ldr	r2, [pc, #48]	@ (800bd58 <vTaskSwitchContext+0xc4>)
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	4a09      	ldr	r2, [pc, #36]	@ (800bd50 <vTaskSwitchContext+0xbc>)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd30:	4b09      	ldr	r3, [pc, #36]	@ (800bd58 <vTaskSwitchContext+0xc4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3364      	adds	r3, #100	@ 0x64
 800bd36:	4a09      	ldr	r2, [pc, #36]	@ (800bd5c <vTaskSwitchContext+0xc8>)
 800bd38:	6013      	str	r3, [r2, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	20009cb4 	.word	0x20009cb4
 800bd4c:	20009ca0 	.word	0x20009ca0
 800bd50:	20009c94 	.word	0x20009c94
 800bd54:	200097bc 	.word	0x200097bc
 800bd58:	200097b8 	.word	0x200097b8
 800bd5c:	2000013c 	.word	0x2000013c

0800bd60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10b      	bne.n	800bd88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	60fb      	str	r3, [r7, #12]
}
 800bd82:	bf00      	nop
 800bd84:	bf00      	nop
 800bd86:	e7fd      	b.n	800bd84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd88:	4b07      	ldr	r3, [pc, #28]	@ (800bda8 <vTaskPlaceOnEventList+0x48>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3318      	adds	r3, #24
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7fe fa4c 	bl	800a22e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd96:	2101      	movs	r1, #1
 800bd98:	6838      	ldr	r0, [r7, #0]
 800bd9a:	f000 fb97 	bl	800c4cc <prvAddCurrentTaskToDelayedList>
}
 800bd9e:	bf00      	nop
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	200097b8 	.word	0x200097b8

0800bdac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	617b      	str	r3, [r7, #20]
}
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop
 800bdd4:	e7fd      	b.n	800bdd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdd6:	4b0a      	ldr	r3, [pc, #40]	@ (800be00 <vTaskPlaceOnEventListRestricted+0x54>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3318      	adds	r3, #24
 800bddc:	4619      	mov	r1, r3
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f7fe fa01 	bl	800a1e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bdea:	f04f 33ff 	mov.w	r3, #4294967295
 800bdee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	68b8      	ldr	r0, [r7, #8]
 800bdf4:	f000 fb6a 	bl	800c4cc <prvAddCurrentTaskToDelayedList>
	}
 800bdf8:	bf00      	nop
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	200097b8 	.word	0x200097b8

0800be04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10b      	bne.n	800be32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	60fb      	str	r3, [r7, #12]
}
 800be2c:	bf00      	nop
 800be2e:	bf00      	nop
 800be30:	e7fd      	b.n	800be2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3318      	adds	r3, #24
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fa32 	bl	800a2a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be3c:	4b1d      	ldr	r3, [pc, #116]	@ (800beb4 <xTaskRemoveFromEventList+0xb0>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d11d      	bne.n	800be80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	3304      	adds	r3, #4
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fa29 	bl	800a2a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be52:	4b19      	ldr	r3, [pc, #100]	@ (800beb8 <xTaskRemoveFromEventList+0xb4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	429a      	cmp	r2, r3
 800be58:	d903      	bls.n	800be62 <xTaskRemoveFromEventList+0x5e>
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5e:	4a16      	ldr	r2, [pc, #88]	@ (800beb8 <xTaskRemoveFromEventList+0xb4>)
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be66:	4613      	mov	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4a13      	ldr	r2, [pc, #76]	@ (800bebc <xTaskRemoveFromEventList+0xb8>)
 800be70:	441a      	add	r2, r3
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	3304      	adds	r3, #4
 800be76:	4619      	mov	r1, r3
 800be78:	4610      	mov	r0, r2
 800be7a:	f7fe f9b4 	bl	800a1e6 <vListInsertEnd>
 800be7e:	e005      	b.n	800be8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	3318      	adds	r3, #24
 800be84:	4619      	mov	r1, r3
 800be86:	480e      	ldr	r0, [pc, #56]	@ (800bec0 <xTaskRemoveFromEventList+0xbc>)
 800be88:	f7fe f9ad 	bl	800a1e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be90:	4b0c      	ldr	r3, [pc, #48]	@ (800bec4 <xTaskRemoveFromEventList+0xc0>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be96:	429a      	cmp	r2, r3
 800be98:	d905      	bls.n	800bea6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be9a:	2301      	movs	r3, #1
 800be9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bec8 <xTaskRemoveFromEventList+0xc4>)
 800bea0:	2201      	movs	r2, #1
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	e001      	b.n	800beaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800beaa:	697b      	ldr	r3, [r7, #20]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20009cb4 	.word	0x20009cb4
 800beb8:	20009c94 	.word	0x20009c94
 800bebc:	200097bc 	.word	0x200097bc
 800bec0:	20009c4c 	.word	0x20009c4c
 800bec4:	200097b8 	.word	0x200097b8
 800bec8:	20009ca0 	.word	0x20009ca0

0800becc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bed4:	4b06      	ldr	r3, [pc, #24]	@ (800bef0 <vTaskInternalSetTimeOutState+0x24>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bedc:	4b05      	ldr	r3, [pc, #20]	@ (800bef4 <vTaskInternalSetTimeOutState+0x28>)
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	605a      	str	r2, [r3, #4]
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	20009ca4 	.word	0x20009ca4
 800bef4:	20009c90 	.word	0x20009c90

0800bef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	613b      	str	r3, [r7, #16]
}
 800bf1a:	bf00      	nop
 800bf1c:	bf00      	nop
 800bf1e:	e7fd      	b.n	800bf1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10b      	bne.n	800bf3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	60fb      	str	r3, [r7, #12]
}
 800bf38:	bf00      	nop
 800bf3a:	bf00      	nop
 800bf3c:	e7fd      	b.n	800bf3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bf3e:	f000 ffa3 	bl	800ce88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf42:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb8 <xTaskCheckForTimeOut+0xc0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5a:	d102      	bne.n	800bf62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	e023      	b.n	800bfaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <xTaskCheckForTimeOut+0xc4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d007      	beq.n	800bf7e <xTaskCheckForTimeOut+0x86>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d302      	bcc.n	800bf7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	61fb      	str	r3, [r7, #28]
 800bf7c:	e015      	b.n	800bfaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d20b      	bcs.n	800bfa0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	1ad2      	subs	r2, r2, r3
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7ff ff99 	bl	800becc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	61fb      	str	r3, [r7, #28]
 800bf9e:	e004      	b.n	800bfaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfaa:	f000 ff9f 	bl	800ceec <vPortExitCritical>

	return xReturn;
 800bfae:	69fb      	ldr	r3, [r7, #28]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3720      	adds	r7, #32
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20009c90 	.word	0x20009c90
 800bfbc:	20009ca4 	.word	0x20009ca4

0800bfc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfc4:	4b03      	ldr	r3, [pc, #12]	@ (800bfd4 <vTaskMissedYield+0x14>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]
}
 800bfca:	bf00      	nop
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	20009ca0 	.word	0x20009ca0

0800bfd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfe0:	f000 f852 	bl	800c088 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfe4:	4b06      	ldr	r3, [pc, #24]	@ (800c000 <prvIdleTask+0x28>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d9f9      	bls.n	800bfe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfec:	4b05      	ldr	r3, [pc, #20]	@ (800c004 <prvIdleTask+0x2c>)
 800bfee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bffc:	e7f0      	b.n	800bfe0 <prvIdleTask+0x8>
 800bffe:	bf00      	nop
 800c000:	200097bc 	.word	0x200097bc
 800c004:	e000ed04 	.word	0xe000ed04

0800c008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c00e:	2300      	movs	r3, #0
 800c010:	607b      	str	r3, [r7, #4]
 800c012:	e00c      	b.n	800c02e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	4613      	mov	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4a12      	ldr	r2, [pc, #72]	@ (800c068 <prvInitialiseTaskLists+0x60>)
 800c020:	4413      	add	r3, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe f8b2 	bl	800a18c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	3301      	adds	r3, #1
 800c02c:	607b      	str	r3, [r7, #4]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b37      	cmp	r3, #55	@ 0x37
 800c032:	d9ef      	bls.n	800c014 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c034:	480d      	ldr	r0, [pc, #52]	@ (800c06c <prvInitialiseTaskLists+0x64>)
 800c036:	f7fe f8a9 	bl	800a18c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c03a:	480d      	ldr	r0, [pc, #52]	@ (800c070 <prvInitialiseTaskLists+0x68>)
 800c03c:	f7fe f8a6 	bl	800a18c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c040:	480c      	ldr	r0, [pc, #48]	@ (800c074 <prvInitialiseTaskLists+0x6c>)
 800c042:	f7fe f8a3 	bl	800a18c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c046:	480c      	ldr	r0, [pc, #48]	@ (800c078 <prvInitialiseTaskLists+0x70>)
 800c048:	f7fe f8a0 	bl	800a18c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c04c:	480b      	ldr	r0, [pc, #44]	@ (800c07c <prvInitialiseTaskLists+0x74>)
 800c04e:	f7fe f89d 	bl	800a18c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c052:	4b0b      	ldr	r3, [pc, #44]	@ (800c080 <prvInitialiseTaskLists+0x78>)
 800c054:	4a05      	ldr	r2, [pc, #20]	@ (800c06c <prvInitialiseTaskLists+0x64>)
 800c056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c058:	4b0a      	ldr	r3, [pc, #40]	@ (800c084 <prvInitialiseTaskLists+0x7c>)
 800c05a:	4a05      	ldr	r2, [pc, #20]	@ (800c070 <prvInitialiseTaskLists+0x68>)
 800c05c:	601a      	str	r2, [r3, #0]
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	200097bc 	.word	0x200097bc
 800c06c:	20009c1c 	.word	0x20009c1c
 800c070:	20009c30 	.word	0x20009c30
 800c074:	20009c4c 	.word	0x20009c4c
 800c078:	20009c60 	.word	0x20009c60
 800c07c:	20009c78 	.word	0x20009c78
 800c080:	20009c44 	.word	0x20009c44
 800c084:	20009c48 	.word	0x20009c48

0800c088 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c08e:	e019      	b.n	800c0c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c090:	f000 fefa 	bl	800ce88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c094:	4b10      	ldr	r3, [pc, #64]	@ (800c0d8 <prvCheckTasksWaitingTermination+0x50>)
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe f8fd 	bl	800a2a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c0dc <prvCheckTasksWaitingTermination+0x54>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	4a0b      	ldr	r2, [pc, #44]	@ (800c0dc <prvCheckTasksWaitingTermination+0x54>)
 800c0ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e0 <prvCheckTasksWaitingTermination+0x58>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c0e0 <prvCheckTasksWaitingTermination+0x58>)
 800c0b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0ba:	f000 ff17 	bl	800ceec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f810 	bl	800c0e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0c4:	4b06      	ldr	r3, [pc, #24]	@ (800c0e0 <prvCheckTasksWaitingTermination+0x58>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1e1      	bne.n	800c090 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20009c60 	.word	0x20009c60
 800c0dc:	20009c8c 	.word	0x20009c8c
 800c0e0:	20009c74 	.word	0x20009c74

0800c0e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3364      	adds	r3, #100	@ 0x64
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f00c f8ff 	bl	80182f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d108      	bne.n	800c112 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c104:	4618      	mov	r0, r3
 800c106:	f001 f885 	bl	800d214 <vPortFree>
				vPortFree( pxTCB );
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 f882 	bl	800d214 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c110:	e019      	b.n	800c146 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d103      	bne.n	800c124 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 f879 	bl	800d214 <vPortFree>
	}
 800c122:	e010      	b.n	800c146 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d00b      	beq.n	800c146 <prvDeleteTCB+0x62>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	60fb      	str	r3, [r7, #12]
}
 800c140:	bf00      	nop
 800c142:	bf00      	nop
 800c144:	e7fd      	b.n	800c142 <prvDeleteTCB+0x5e>
	}
 800c146:	bf00      	nop
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c156:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <prvResetNextTaskUnblockTime+0x38>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d104      	bne.n	800c16a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c160:	4b0a      	ldr	r3, [pc, #40]	@ (800c18c <prvResetNextTaskUnblockTime+0x3c>)
 800c162:	f04f 32ff 	mov.w	r2, #4294967295
 800c166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c168:	e008      	b.n	800c17c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c16a:	4b07      	ldr	r3, [pc, #28]	@ (800c188 <prvResetNextTaskUnblockTime+0x38>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4a04      	ldr	r2, [pc, #16]	@ (800c18c <prvResetNextTaskUnblockTime+0x3c>)
 800c17a:	6013      	str	r3, [r2, #0]
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	20009c44 	.word	0x20009c44
 800c18c:	20009cac 	.word	0x20009cac

0800c190 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c196:	4b05      	ldr	r3, [pc, #20]	@ (800c1ac <xTaskGetCurrentTaskHandle+0x1c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c19c:	687b      	ldr	r3, [r7, #4]
	}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	200097b8 	.word	0x200097b8

0800c1b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c1e4 <xTaskGetSchedulerState+0x34>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d102      	bne.n	800c1c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	607b      	str	r3, [r7, #4]
 800c1c2:	e008      	b.n	800c1d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1c4:	4b08      	ldr	r3, [pc, #32]	@ (800c1e8 <xTaskGetSchedulerState+0x38>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	607b      	str	r3, [r7, #4]
 800c1d0:	e001      	b.n	800c1d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1d6:	687b      	ldr	r3, [r7, #4]
	}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	20009c98 	.word	0x20009c98
 800c1e8:	20009cb4 	.word	0x20009cb4

0800c1ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d051      	beq.n	800c2a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c206:	4b2a      	ldr	r3, [pc, #168]	@ (800c2b0 <xTaskPriorityInherit+0xc4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d241      	bcs.n	800c294 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	db06      	blt.n	800c226 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c218:	4b25      	ldr	r3, [pc, #148]	@ (800c2b0 <xTaskPriorityInherit+0xc4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	6959      	ldr	r1, [r3, #20]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c22e:	4613      	mov	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4a1f      	ldr	r2, [pc, #124]	@ (800c2b4 <xTaskPriorityInherit+0xc8>)
 800c238:	4413      	add	r3, r2
 800c23a:	4299      	cmp	r1, r3
 800c23c:	d122      	bne.n	800c284 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	3304      	adds	r3, #4
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe f82c 	bl	800a2a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c248:	4b19      	ldr	r3, [pc, #100]	@ (800c2b0 <xTaskPriorityInherit+0xc4>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c256:	4b18      	ldr	r3, [pc, #96]	@ (800c2b8 <xTaskPriorityInherit+0xcc>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d903      	bls.n	800c266 <xTaskPriorityInherit+0x7a>
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c262:	4a15      	ldr	r2, [pc, #84]	@ (800c2b8 <xTaskPriorityInherit+0xcc>)
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4a10      	ldr	r2, [pc, #64]	@ (800c2b4 <xTaskPriorityInherit+0xc8>)
 800c274:	441a      	add	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	3304      	adds	r3, #4
 800c27a:	4619      	mov	r1, r3
 800c27c:	4610      	mov	r0, r2
 800c27e:	f7fd ffb2 	bl	800a1e6 <vListInsertEnd>
 800c282:	e004      	b.n	800c28e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c284:	4b0a      	ldr	r3, [pc, #40]	@ (800c2b0 <xTaskPriorityInherit+0xc4>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c28e:	2301      	movs	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	e008      	b.n	800c2a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c298:	4b05      	ldr	r3, [pc, #20]	@ (800c2b0 <xTaskPriorityInherit+0xc4>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d201      	bcs.n	800c2a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
	}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	200097b8 	.word	0x200097b8
 800c2b4:	200097bc 	.word	0x200097bc
 800c2b8:	20009c94 	.word	0x20009c94

0800c2bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d058      	beq.n	800c384 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2d2:	4b2f      	ldr	r3, [pc, #188]	@ (800c390 <xTaskPriorityDisinherit+0xd4>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d00b      	beq.n	800c2f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	60fb      	str	r3, [r7, #12]
}
 800c2ee:	bf00      	nop
 800c2f0:	bf00      	nop
 800c2f2:	e7fd      	b.n	800c2f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10b      	bne.n	800c314 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	60bb      	str	r3, [r7, #8]
}
 800c30e:	bf00      	nop
 800c310:	bf00      	nop
 800c312:	e7fd      	b.n	800c310 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c318:	1e5a      	subs	r2, r3, #1
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c326:	429a      	cmp	r2, r3
 800c328:	d02c      	beq.n	800c384 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d128      	bne.n	800c384 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	3304      	adds	r3, #4
 800c336:	4618      	mov	r0, r3
 800c338:	f7fd ffb2 	bl	800a2a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c348:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c354:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <xTaskPriorityDisinherit+0xd8>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d903      	bls.n	800c364 <xTaskPriorityDisinherit+0xa8>
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c360:	4a0c      	ldr	r2, [pc, #48]	@ (800c394 <xTaskPriorityDisinherit+0xd8>)
 800c362:	6013      	str	r3, [r2, #0]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4a09      	ldr	r2, [pc, #36]	@ (800c398 <xTaskPriorityDisinherit+0xdc>)
 800c372:	441a      	add	r2, r3
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fd ff33 	bl	800a1e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c380:	2301      	movs	r3, #1
 800c382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c384:	697b      	ldr	r3, [r7, #20]
	}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	200097b8 	.word	0x200097b8
 800c394:	20009c94 	.word	0x20009c94
 800c398:	200097bc 	.word	0x200097bc

0800c39c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d06c      	beq.n	800c48e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10b      	bne.n	800c3d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	60fb      	str	r3, [r7, #12]
}
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	e7fd      	b.n	800c3d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d902      	bls.n	800c3e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	61fb      	str	r3, [r7, #28]
 800c3e2:	e002      	b.n	800c3ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d04c      	beq.n	800c48e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d147      	bne.n	800c48e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c3fe:	4b26      	ldr	r3, [pc, #152]	@ (800c498 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	429a      	cmp	r2, r3
 800c406:	d10b      	bne.n	800c420 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	60bb      	str	r3, [r7, #8]
}
 800c41a:	bf00      	nop
 800c41c:	bf00      	nop
 800c41e:	e7fd      	b.n	800c41c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c424:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	69fa      	ldr	r2, [r7, #28]
 800c42a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	db04      	blt.n	800c43e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	6959      	ldr	r1, [r3, #20]
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	4613      	mov	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4a13      	ldr	r2, [pc, #76]	@ (800c49c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c44e:	4413      	add	r3, r2
 800c450:	4299      	cmp	r1, r3
 800c452:	d11c      	bne.n	800c48e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	3304      	adds	r3, #4
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fd ff21 	bl	800a2a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c462:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d903      	bls.n	800c472 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46e:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4a07      	ldr	r2, [pc, #28]	@ (800c49c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c480:	441a      	add	r2, r3
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	3304      	adds	r3, #4
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f7fd feac 	bl	800a1e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c48e:	bf00      	nop
 800c490:	3720      	adds	r7, #32
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	200097b8 	.word	0x200097b8
 800c49c:	200097bc 	.word	0x200097bc
 800c4a0:	20009c94 	.word	0x20009c94

0800c4a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c4a8:	4b07      	ldr	r3, [pc, #28]	@ (800c4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c4b0:	4b05      	ldr	r3, [pc, #20]	@ (800c4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c4b6:	3201      	adds	r2, #1
 800c4b8:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		return pxCurrentTCB;
 800c4ba:	4b03      	ldr	r3, [pc, #12]	@ (800c4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
	}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr
 800c4c8:	200097b8 	.word	0x200097b8

0800c4cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4d6:	4b21      	ldr	r3, [pc, #132]	@ (800c55c <prvAddCurrentTaskToDelayedList+0x90>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4dc:	4b20      	ldr	r3, [pc, #128]	@ (800c560 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fd fedc 	bl	800a2a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	d10a      	bne.n	800c506 <prvAddCurrentTaskToDelayedList+0x3a>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d007      	beq.n	800c506 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c560 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	4819      	ldr	r0, [pc, #100]	@ (800c564 <prvAddCurrentTaskToDelayedList+0x98>)
 800c500:	f7fd fe71 	bl	800a1e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c504:	e026      	b.n	800c554 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4413      	add	r3, r2
 800c50c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c50e:	4b14      	ldr	r3, [pc, #80]	@ (800c560 <prvAddCurrentTaskToDelayedList+0x94>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d209      	bcs.n	800c532 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c51e:	4b12      	ldr	r3, [pc, #72]	@ (800c568 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <prvAddCurrentTaskToDelayedList+0x94>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3304      	adds	r3, #4
 800c528:	4619      	mov	r1, r3
 800c52a:	4610      	mov	r0, r2
 800c52c:	f7fd fe7f 	bl	800a22e <vListInsert>
}
 800c530:	e010      	b.n	800c554 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c532:	4b0e      	ldr	r3, [pc, #56]	@ (800c56c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	4b0a      	ldr	r3, [pc, #40]	@ (800c560 <prvAddCurrentTaskToDelayedList+0x94>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f7fd fe75 	bl	800a22e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c544:	4b0a      	ldr	r3, [pc, #40]	@ (800c570 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d202      	bcs.n	800c554 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c54e:	4a08      	ldr	r2, [pc, #32]	@ (800c570 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	6013      	str	r3, [r2, #0]
}
 800c554:	bf00      	nop
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20009c90 	.word	0x20009c90
 800c560:	200097b8 	.word	0x200097b8
 800c564:	20009c78 	.word	0x20009c78
 800c568:	20009c48 	.word	0x20009c48
 800c56c:	20009c44 	.word	0x20009c44
 800c570:	20009cac 	.word	0x20009cac

0800c574 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	@ 0x28
 800c578:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c57e:	f000 fb13 	bl	800cba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c582:	4b1d      	ldr	r3, [pc, #116]	@ (800c5f8 <xTimerCreateTimerTask+0x84>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d021      	beq.n	800c5ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c592:	1d3a      	adds	r2, r7, #4
 800c594:	f107 0108 	add.w	r1, r7, #8
 800c598:	f107 030c 	add.w	r3, r7, #12
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fd fddb 	bl	800a158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	9202      	str	r2, [sp, #8]
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	460a      	mov	r2, r1
 800c5b4:	4911      	ldr	r1, [pc, #68]	@ (800c5fc <xTimerCreateTimerTask+0x88>)
 800c5b6:	4812      	ldr	r0, [pc, #72]	@ (800c600 <xTimerCreateTimerTask+0x8c>)
 800c5b8:	f7fe ff80 	bl	800b4bc <xTaskCreateStatic>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	4a11      	ldr	r2, [pc, #68]	@ (800c604 <xTimerCreateTimerTask+0x90>)
 800c5c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c5c2:	4b10      	ldr	r3, [pc, #64]	@ (800c604 <xTimerCreateTimerTask+0x90>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10b      	bne.n	800c5ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	613b      	str	r3, [r7, #16]
}
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
 800c5ea:	e7fd      	b.n	800c5e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5ec:	697b      	ldr	r3, [r7, #20]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20009ce8 	.word	0x20009ce8
 800c5fc:	08019148 	.word	0x08019148
 800c600:	0800c741 	.word	0x0800c741
 800c604:	20009cec 	.word	0x20009cec

0800c608 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08a      	sub	sp, #40	@ 0x28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c616:	2300      	movs	r3, #0
 800c618:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10b      	bne.n	800c638 <xTimerGenericCommand+0x30>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	623b      	str	r3, [r7, #32]
}
 800c632:	bf00      	nop
 800c634:	bf00      	nop
 800c636:	e7fd      	b.n	800c634 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c638:	4b19      	ldr	r3, [pc, #100]	@ (800c6a0 <xTimerGenericCommand+0x98>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d02a      	beq.n	800c696 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	2b05      	cmp	r3, #5
 800c650:	dc18      	bgt.n	800c684 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c652:	f7ff fdad 	bl	800c1b0 <xTaskGetSchedulerState>
 800c656:	4603      	mov	r3, r0
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d109      	bne.n	800c670 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c65c:	4b10      	ldr	r3, [pc, #64]	@ (800c6a0 <xTimerGenericCommand+0x98>)
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	f107 0110 	add.w	r1, r7, #16
 800c664:	2300      	movs	r3, #0
 800c666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c668:	f7fe f8b0 	bl	800a7cc <xQueueGenericSend>
 800c66c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c66e:	e012      	b.n	800c696 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c670:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a0 <xTimerGenericCommand+0x98>)
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	f107 0110 	add.w	r1, r7, #16
 800c678:	2300      	movs	r3, #0
 800c67a:	2200      	movs	r2, #0
 800c67c:	f7fe f8a6 	bl	800a7cc <xQueueGenericSend>
 800c680:	6278      	str	r0, [r7, #36]	@ 0x24
 800c682:	e008      	b.n	800c696 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c684:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <xTimerGenericCommand+0x98>)
 800c686:	6818      	ldr	r0, [r3, #0]
 800c688:	f107 0110 	add.w	r1, r7, #16
 800c68c:	2300      	movs	r3, #0
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	f7fe f99e 	bl	800a9d0 <xQueueGenericSendFromISR>
 800c694:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3728      	adds	r7, #40	@ 0x28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20009ce8 	.word	0x20009ce8

0800c6a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b088      	sub	sp, #32
 800c6a8:	af02      	add	r7, sp, #8
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ae:	4b23      	ldr	r3, [pc, #140]	@ (800c73c <prvProcessExpiredTimer+0x98>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7fd fdef 	bl	800a2a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6c8:	f003 0304 	and.w	r3, r3, #4
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d023      	beq.n	800c718 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	699a      	ldr	r2, [r3, #24]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	18d1      	adds	r1, r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	6978      	ldr	r0, [r7, #20]
 800c6de:	f000 f8d5 	bl	800c88c <prvInsertTimerInActiveList>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d020      	beq.n	800c72a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	6978      	ldr	r0, [r7, #20]
 800c6f4:	f7ff ff88 	bl	800c608 <xTimerGenericCommand>
 800c6f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d114      	bne.n	800c72a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	60fb      	str	r3, [r7, #12]
}
 800c712:	bf00      	nop
 800c714:	bf00      	nop
 800c716:	e7fd      	b.n	800c714 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c71e:	f023 0301 	bic.w	r3, r3, #1
 800c722:	b2da      	uxtb	r2, r3
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	6978      	ldr	r0, [r7, #20]
 800c730:	4798      	blx	r3
}
 800c732:	bf00      	nop
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20009ce0 	.word	0x20009ce0

0800c740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c748:	f107 0308 	add.w	r3, r7, #8
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 f859 	bl	800c804 <prvGetNextExpireTime>
 800c752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	4619      	mov	r1, r3
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f805 	bl	800c768 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c75e:	f000 f8d7 	bl	800c910 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c762:	bf00      	nop
 800c764:	e7f0      	b.n	800c748 <prvTimerTask+0x8>
	...

0800c768 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c772:	f7ff f907 	bl	800b984 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c776:	f107 0308 	add.w	r3, r7, #8
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 f866 	bl	800c84c <prvSampleTimeNow>
 800c780:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d130      	bne.n	800c7ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <prvProcessTimerOrBlockTask+0x3c>
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	429a      	cmp	r2, r3
 800c794:	d806      	bhi.n	800c7a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c796:	f7ff f903 	bl	800b9a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c79a:	68f9      	ldr	r1, [r7, #12]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff ff81 	bl	800c6a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7a2:	e024      	b.n	800c7ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d008      	beq.n	800c7bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7aa:	4b13      	ldr	r3, [pc, #76]	@ (800c7f8 <prvProcessTimerOrBlockTask+0x90>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <prvProcessTimerOrBlockTask+0x50>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e000      	b.n	800c7ba <prvProcessTimerOrBlockTask+0x52>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c7fc <prvProcessTimerOrBlockTask+0x94>)
 800c7be:	6818      	ldr	r0, [r3, #0]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	f7fe fe43 	bl	800b454 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7ce:	f7ff f8e7 	bl	800b9a0 <xTaskResumeAll>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10a      	bne.n	800c7ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c7d8:	4b09      	ldr	r3, [pc, #36]	@ (800c800 <prvProcessTimerOrBlockTask+0x98>)
 800c7da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	f3bf 8f6f 	isb	sy
}
 800c7e8:	e001      	b.n	800c7ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c7ea:	f7ff f8d9 	bl	800b9a0 <xTaskResumeAll>
}
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20009ce4 	.word	0x20009ce4
 800c7fc:	20009ce8 	.word	0x20009ce8
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c80c:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <prvGetNextExpireTime+0x44>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <prvGetNextExpireTime+0x16>
 800c816:	2201      	movs	r2, #1
 800c818:	e000      	b.n	800c81c <prvGetNextExpireTime+0x18>
 800c81a:	2200      	movs	r2, #0
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d105      	bne.n	800c834 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c828:	4b07      	ldr	r3, [pc, #28]	@ (800c848 <prvGetNextExpireTime+0x44>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	60fb      	str	r3, [r7, #12]
 800c832:	e001      	b.n	800c838 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c838:	68fb      	ldr	r3, [r7, #12]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	20009ce0 	.word	0x20009ce0

0800c84c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c854:	f7ff f942 	bl	800badc <xTaskGetTickCount>
 800c858:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c85a:	4b0b      	ldr	r3, [pc, #44]	@ (800c888 <prvSampleTimeNow+0x3c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	429a      	cmp	r2, r3
 800c862:	d205      	bcs.n	800c870 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c864:	f000 f93a 	bl	800cadc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	e002      	b.n	800c876 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c876:	4a04      	ldr	r2, [pc, #16]	@ (800c888 <prvSampleTimeNow+0x3c>)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c87c:	68fb      	ldr	r3, [r7, #12]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20009cf0 	.word	0x20009cf0

0800c88c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d812      	bhi.n	800c8d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	1ad2      	subs	r2, r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d302      	bcc.n	800c8c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	e01b      	b.n	800c8fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8c6:	4b10      	ldr	r3, [pc, #64]	@ (800c908 <prvInsertTimerInActiveList+0x7c>)
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7fd fcac 	bl	800a22e <vListInsert>
 800c8d6:	e012      	b.n	800c8fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d206      	bcs.n	800c8ee <prvInsertTimerInActiveList+0x62>
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d302      	bcc.n	800c8ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e007      	b.n	800c8fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8ee:	4b07      	ldr	r3, [pc, #28]	@ (800c90c <prvInsertTimerInActiveList+0x80>)
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	f7fd fc98 	bl	800a22e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c8fe:	697b      	ldr	r3, [r7, #20]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3718      	adds	r7, #24
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	20009ce4 	.word	0x20009ce4
 800c90c:	20009ce0 	.word	0x20009ce0

0800c910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08e      	sub	sp, #56	@ 0x38
 800c914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c916:	e0ce      	b.n	800cab6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	da19      	bge.n	800c952 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c91e:	1d3b      	adds	r3, r7, #4
 800c920:	3304      	adds	r3, #4
 800c922:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10b      	bne.n	800c942 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	61fb      	str	r3, [r7, #28]
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	e7fd      	b.n	800c93e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c948:	6850      	ldr	r0, [r2, #4]
 800c94a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c94c:	6892      	ldr	r2, [r2, #8]
 800c94e:	4611      	mov	r1, r2
 800c950:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f2c0 80ae 	blt.w	800cab6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d004      	beq.n	800c970 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c968:	3304      	adds	r3, #4
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fd fc98 	bl	800a2a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c970:	463b      	mov	r3, r7
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff ff6a 	bl	800c84c <prvSampleTimeNow>
 800c978:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b09      	cmp	r3, #9
 800c97e:	f200 8097 	bhi.w	800cab0 <prvProcessReceivedCommands+0x1a0>
 800c982:	a201      	add	r2, pc, #4	@ (adr r2, 800c988 <prvProcessReceivedCommands+0x78>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800c9b1 	.word	0x0800c9b1
 800c98c:	0800c9b1 	.word	0x0800c9b1
 800c990:	0800c9b1 	.word	0x0800c9b1
 800c994:	0800ca27 	.word	0x0800ca27
 800c998:	0800ca3b 	.word	0x0800ca3b
 800c99c:	0800ca87 	.word	0x0800ca87
 800c9a0:	0800c9b1 	.word	0x0800c9b1
 800c9a4:	0800c9b1 	.word	0x0800c9b1
 800c9a8:	0800ca27 	.word	0x0800ca27
 800c9ac:	0800ca3b 	.word	0x0800ca3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9b6:	f043 0301 	orr.w	r3, r3, #1
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	18d1      	adds	r1, r2, r3
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9d0:	f7ff ff5c 	bl	800c88c <prvInsertTimerInActiveList>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d06c      	beq.n	800cab4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d061      	beq.n	800cab4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	441a      	add	r2, r3
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	2100      	movs	r1, #0
 800ca00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca02:	f7ff fe01 	bl	800c608 <xTimerGenericCommand>
 800ca06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d152      	bne.n	800cab4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ca0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	61bb      	str	r3, [r7, #24]
}
 800ca20:	bf00      	nop
 800ca22:	bf00      	nop
 800ca24:	e7fd      	b.n	800ca22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca2c:	f023 0301 	bic.w	r3, r3, #1
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca38:	e03d      	b.n	800cab6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca40:	f043 0301 	orr.w	r3, r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10b      	bne.n	800ca72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	617b      	str	r3, [r7, #20]
}
 800ca6c:	bf00      	nop
 800ca6e:	bf00      	nop
 800ca70:	e7fd      	b.n	800ca6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca74:	699a      	ldr	r2, [r3, #24]
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	18d1      	adds	r1, r2, r3
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca80:	f7ff ff04 	bl	800c88c <prvInsertTimerInActiveList>
					break;
 800ca84:	e017      	b.n	800cab6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d103      	bne.n	800ca9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ca94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca96:	f000 fbbd 	bl	800d214 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca9a:	e00c      	b.n	800cab6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caa2:	f023 0301 	bic.w	r3, r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800caae:	e002      	b.n	800cab6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <prvProcessReceivedCommands+0x1a6>
					break;
 800cab4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cab6:	4b08      	ldr	r3, [pc, #32]	@ (800cad8 <prvProcessReceivedCommands+0x1c8>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	1d39      	adds	r1, r7, #4
 800cabc:	2200      	movs	r2, #0
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe f8b4 	bl	800ac2c <xQueueReceive>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f47f af26 	bne.w	800c918 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cacc:	bf00      	nop
 800cace:	bf00      	nop
 800cad0:	3730      	adds	r7, #48	@ 0x30
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20009ce8 	.word	0x20009ce8

0800cadc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cae2:	e049      	b.n	800cb78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cae4:	4b2e      	ldr	r3, [pc, #184]	@ (800cba0 <prvSwitchTimerLists+0xc4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caee:	4b2c      	ldr	r3, [pc, #176]	@ (800cba0 <prvSwitchTimerLists+0xc4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3304      	adds	r3, #4
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd fbcf 	bl	800a2a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb10:	f003 0304 	and.w	r3, r3, #4
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d02f      	beq.n	800cb78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	4413      	add	r3, r2
 800cb20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d90e      	bls.n	800cb48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb36:	4b1a      	ldr	r3, [pc, #104]	@ (800cba0 <prvSwitchTimerLists+0xc4>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4610      	mov	r0, r2
 800cb42:	f7fd fb74 	bl	800a22e <vListInsert>
 800cb46:	e017      	b.n	800cb78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb48:	2300      	movs	r3, #0
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	693a      	ldr	r2, [r7, #16]
 800cb50:	2100      	movs	r1, #0
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff fd58 	bl	800c608 <xTimerGenericCommand>
 800cb58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	603b      	str	r3, [r7, #0]
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	e7fd      	b.n	800cb74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb78:	4b09      	ldr	r3, [pc, #36]	@ (800cba0 <prvSwitchTimerLists+0xc4>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1b0      	bne.n	800cae4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb82:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <prvSwitchTimerLists+0xc4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb88:	4b06      	ldr	r3, [pc, #24]	@ (800cba4 <prvSwitchTimerLists+0xc8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a04      	ldr	r2, [pc, #16]	@ (800cba0 <prvSwitchTimerLists+0xc4>)
 800cb8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb90:	4a04      	ldr	r2, [pc, #16]	@ (800cba4 <prvSwitchTimerLists+0xc8>)
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	6013      	str	r3, [r2, #0]
}
 800cb96:	bf00      	nop
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20009ce0 	.word	0x20009ce0
 800cba4:	20009ce4 	.word	0x20009ce4

0800cba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbae:	f000 f96b 	bl	800ce88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbb2:	4b15      	ldr	r3, [pc, #84]	@ (800cc08 <prvCheckForValidListAndQueue+0x60>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d120      	bne.n	800cbfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbba:	4814      	ldr	r0, [pc, #80]	@ (800cc0c <prvCheckForValidListAndQueue+0x64>)
 800cbbc:	f7fd fae6 	bl	800a18c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbc0:	4813      	ldr	r0, [pc, #76]	@ (800cc10 <prvCheckForValidListAndQueue+0x68>)
 800cbc2:	f7fd fae3 	bl	800a18c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cbc6:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <prvCheckForValidListAndQueue+0x6c>)
 800cbc8:	4a10      	ldr	r2, [pc, #64]	@ (800cc0c <prvCheckForValidListAndQueue+0x64>)
 800cbca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbcc:	4b12      	ldr	r3, [pc, #72]	@ (800cc18 <prvCheckForValidListAndQueue+0x70>)
 800cbce:	4a10      	ldr	r2, [pc, #64]	@ (800cc10 <prvCheckForValidListAndQueue+0x68>)
 800cbd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	4b11      	ldr	r3, [pc, #68]	@ (800cc1c <prvCheckForValidListAndQueue+0x74>)
 800cbd8:	4a11      	ldr	r2, [pc, #68]	@ (800cc20 <prvCheckForValidListAndQueue+0x78>)
 800cbda:	2110      	movs	r1, #16
 800cbdc:	200a      	movs	r0, #10
 800cbde:	f7fd fbf3 	bl	800a3c8 <xQueueGenericCreateStatic>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4a08      	ldr	r2, [pc, #32]	@ (800cc08 <prvCheckForValidListAndQueue+0x60>)
 800cbe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cbe8:	4b07      	ldr	r3, [pc, #28]	@ (800cc08 <prvCheckForValidListAndQueue+0x60>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cbf0:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <prvCheckForValidListAndQueue+0x60>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	490b      	ldr	r1, [pc, #44]	@ (800cc24 <prvCheckForValidListAndQueue+0x7c>)
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe fbd8 	bl	800b3ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbfc:	f000 f976 	bl	800ceec <vPortExitCritical>
}
 800cc00:	bf00      	nop
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	20009ce8 	.word	0x20009ce8
 800cc0c:	20009cb8 	.word	0x20009cb8
 800cc10:	20009ccc 	.word	0x20009ccc
 800cc14:	20009ce0 	.word	0x20009ce0
 800cc18:	20009ce4 	.word	0x20009ce4
 800cc1c:	20009d94 	.word	0x20009d94
 800cc20:	20009cf4 	.word	0x20009cf4
 800cc24:	08019150 	.word	0x08019150

0800cc28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3b04      	subs	r3, #4
 800cc38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cc40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3b04      	subs	r3, #4
 800cc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	f023 0201 	bic.w	r2, r3, #1
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3b04      	subs	r3, #4
 800cc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc58:	4a0c      	ldr	r2, [pc, #48]	@ (800cc8c <pxPortInitialiseStack+0x64>)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3b14      	subs	r3, #20
 800cc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3b04      	subs	r3, #4
 800cc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f06f 0202 	mvn.w	r2, #2
 800cc76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3b20      	subs	r3, #32
 800cc7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	0800cc91 	.word	0x0800cc91

0800cc90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc9a:	4b13      	ldr	r3, [pc, #76]	@ (800cce8 <prvTaskExitError+0x58>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca2:	d00b      	beq.n	800ccbc <prvTaskExitError+0x2c>
	__asm volatile
 800cca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	60fb      	str	r3, [r7, #12]
}
 800ccb6:	bf00      	nop
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <prvTaskExitError+0x28>
	__asm volatile
 800ccbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	60bb      	str	r3, [r7, #8]
}
 800ccce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccd0:	bf00      	nop
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0fc      	beq.n	800ccd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	200000bc 	.word	0x200000bc
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccf0:	4b07      	ldr	r3, [pc, #28]	@ (800cd10 <pxCurrentTCBConst2>)
 800ccf2:	6819      	ldr	r1, [r3, #0]
 800ccf4:	6808      	ldr	r0, [r1, #0]
 800ccf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfa:	f380 8809 	msr	PSP, r0
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f04f 0000 	mov.w	r0, #0
 800cd06:	f380 8811 	msr	BASEPRI, r0
 800cd0a:	4770      	bx	lr
 800cd0c:	f3af 8000 	nop.w

0800cd10 <pxCurrentTCBConst2>:
 800cd10:	200097b8 	.word	0x200097b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop

0800cd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd18:	4808      	ldr	r0, [pc, #32]	@ (800cd3c <prvPortStartFirstTask+0x24>)
 800cd1a:	6800      	ldr	r0, [r0, #0]
 800cd1c:	6800      	ldr	r0, [r0, #0]
 800cd1e:	f380 8808 	msr	MSP, r0
 800cd22:	f04f 0000 	mov.w	r0, #0
 800cd26:	f380 8814 	msr	CONTROL, r0
 800cd2a:	b662      	cpsie	i
 800cd2c:	b661      	cpsie	f
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	df00      	svc	0
 800cd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd3a:	bf00      	nop
 800cd3c:	e000ed08 	.word	0xe000ed08

0800cd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd46:	4b47      	ldr	r3, [pc, #284]	@ (800ce64 <xPortStartScheduler+0x124>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a47      	ldr	r2, [pc, #284]	@ (800ce68 <xPortStartScheduler+0x128>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d10b      	bne.n	800cd68 <xPortStartScheduler+0x28>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	613b      	str	r3, [r7, #16]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd68:	4b3e      	ldr	r3, [pc, #248]	@ (800ce64 <xPortStartScheduler+0x124>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a3f      	ldr	r2, [pc, #252]	@ (800ce6c <xPortStartScheduler+0x12c>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d10b      	bne.n	800cd8a <xPortStartScheduler+0x4a>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	60fb      	str	r3, [r7, #12]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd8a:	4b39      	ldr	r3, [pc, #228]	@ (800ce70 <xPortStartScheduler+0x130>)
 800cd8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	22ff      	movs	r2, #255	@ 0xff
 800cd9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cda4:	78fb      	ldrb	r3, [r7, #3]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	4b31      	ldr	r3, [pc, #196]	@ (800ce74 <xPortStartScheduler+0x134>)
 800cdb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdb2:	4b31      	ldr	r3, [pc, #196]	@ (800ce78 <xPortStartScheduler+0x138>)
 800cdb4:	2207      	movs	r2, #7
 800cdb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdb8:	e009      	b.n	800cdce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cdba:	4b2f      	ldr	r3, [pc, #188]	@ (800ce78 <xPortStartScheduler+0x138>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce78 <xPortStartScheduler+0x138>)
 800cdc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdc4:	78fb      	ldrb	r3, [r7, #3]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdce:	78fb      	ldrb	r3, [r7, #3]
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdd6:	2b80      	cmp	r3, #128	@ 0x80
 800cdd8:	d0ef      	beq.n	800cdba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdda:	4b27      	ldr	r3, [pc, #156]	@ (800ce78 <xPortStartScheduler+0x138>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f1c3 0307 	rsb	r3, r3, #7
 800cde2:	2b04      	cmp	r3, #4
 800cde4:	d00b      	beq.n	800cdfe <xPortStartScheduler+0xbe>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	60bb      	str	r3, [r7, #8]
}
 800cdf8:	bf00      	nop
 800cdfa:	bf00      	nop
 800cdfc:	e7fd      	b.n	800cdfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cdfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ce78 <xPortStartScheduler+0x138>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	021b      	lsls	r3, r3, #8
 800ce04:	4a1c      	ldr	r2, [pc, #112]	@ (800ce78 <xPortStartScheduler+0x138>)
 800ce06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce08:	4b1b      	ldr	r3, [pc, #108]	@ (800ce78 <xPortStartScheduler+0x138>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce10:	4a19      	ldr	r2, [pc, #100]	@ (800ce78 <xPortStartScheduler+0x138>)
 800ce12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce1c:	4b17      	ldr	r3, [pc, #92]	@ (800ce7c <xPortStartScheduler+0x13c>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a16      	ldr	r2, [pc, #88]	@ (800ce7c <xPortStartScheduler+0x13c>)
 800ce22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce28:	4b14      	ldr	r3, [pc, #80]	@ (800ce7c <xPortStartScheduler+0x13c>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a13      	ldr	r2, [pc, #76]	@ (800ce7c <xPortStartScheduler+0x13c>)
 800ce2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce34:	f000 f8da 	bl	800cfec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce38:	4b11      	ldr	r3, [pc, #68]	@ (800ce80 <xPortStartScheduler+0x140>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce3e:	f000 f8f9 	bl	800d034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce42:	4b10      	ldr	r3, [pc, #64]	@ (800ce84 <xPortStartScheduler+0x144>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a0f      	ldr	r2, [pc, #60]	@ (800ce84 <xPortStartScheduler+0x144>)
 800ce48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce4e:	f7ff ff63 	bl	800cd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce52:	f7fe ff1f 	bl	800bc94 <vTaskSwitchContext>
	prvTaskExitError();
 800ce56:	f7ff ff1b 	bl	800cc90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	e000ed00 	.word	0xe000ed00
 800ce68:	410fc271 	.word	0x410fc271
 800ce6c:	410fc270 	.word	0x410fc270
 800ce70:	e000e400 	.word	0xe000e400
 800ce74:	20009de4 	.word	0x20009de4
 800ce78:	20009de8 	.word	0x20009de8
 800ce7c:	e000ed20 	.word	0xe000ed20
 800ce80:	200000bc 	.word	0x200000bc
 800ce84:	e000ef34 	.word	0xe000ef34

0800ce88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	607b      	str	r3, [r7, #4]
}
 800cea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cea2:	4b10      	ldr	r3, [pc, #64]	@ (800cee4 <vPortEnterCritical+0x5c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	4a0e      	ldr	r2, [pc, #56]	@ (800cee4 <vPortEnterCritical+0x5c>)
 800ceaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ceac:	4b0d      	ldr	r3, [pc, #52]	@ (800cee4 <vPortEnterCritical+0x5c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d110      	bne.n	800ced6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <vPortEnterCritical+0x60>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00b      	beq.n	800ced6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	603b      	str	r3, [r7, #0]
}
 800ced0:	bf00      	nop
 800ced2:	bf00      	nop
 800ced4:	e7fd      	b.n	800ced2 <vPortEnterCritical+0x4a>
	}
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	200000bc 	.word	0x200000bc
 800cee8:	e000ed04 	.word	0xe000ed04

0800ceec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cef2:	4b12      	ldr	r3, [pc, #72]	@ (800cf3c <vPortExitCritical+0x50>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10b      	bne.n	800cf12 <vPortExitCritical+0x26>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	607b      	str	r3, [r7, #4]
}
 800cf0c:	bf00      	nop
 800cf0e:	bf00      	nop
 800cf10:	e7fd      	b.n	800cf0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf12:	4b0a      	ldr	r3, [pc, #40]	@ (800cf3c <vPortExitCritical+0x50>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3b01      	subs	r3, #1
 800cf18:	4a08      	ldr	r2, [pc, #32]	@ (800cf3c <vPortExitCritical+0x50>)
 800cf1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf1c:	4b07      	ldr	r3, [pc, #28]	@ (800cf3c <vPortExitCritical+0x50>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <vPortExitCritical+0x44>
 800cf24:	2300      	movs	r3, #0
 800cf26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f383 8811 	msr	BASEPRI, r3
}
 800cf2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	200000bc 	.word	0x200000bc

0800cf40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf40:	f3ef 8009 	mrs	r0, PSP
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	4b15      	ldr	r3, [pc, #84]	@ (800cfa0 <pxCurrentTCBConst>)
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	f01e 0f10 	tst.w	lr, #16
 800cf50:	bf08      	it	eq
 800cf52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5a:	6010      	str	r0, [r2, #0]
 800cf5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf64:	f380 8811 	msr	BASEPRI, r0
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f7fe fe90 	bl	800bc94 <vTaskSwitchContext>
 800cf74:	f04f 0000 	mov.w	r0, #0
 800cf78:	f380 8811 	msr	BASEPRI, r0
 800cf7c:	bc09      	pop	{r0, r3}
 800cf7e:	6819      	ldr	r1, [r3, #0]
 800cf80:	6808      	ldr	r0, [r1, #0]
 800cf82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf86:	f01e 0f10 	tst.w	lr, #16
 800cf8a:	bf08      	it	eq
 800cf8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf90:	f380 8809 	msr	PSP, r0
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	f3af 8000 	nop.w

0800cfa0 <pxCurrentTCBConst>:
 800cfa0:	200097b8 	.word	0x200097b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop

0800cfa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	607b      	str	r3, [r7, #4]
}
 800cfc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfc2:	f7fe fdad 	bl	800bb20 <xTaskIncrementTick>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d003      	beq.n	800cfd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfcc:	4b06      	ldr	r3, [pc, #24]	@ (800cfe8 <xPortSysTickHandler+0x40>)
 800cfce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	f383 8811 	msr	BASEPRI, r3
}
 800cfde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	e000ed04 	.word	0xe000ed04

0800cfec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfec:	b480      	push	{r7}
 800cfee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cff0:	4b0b      	ldr	r3, [pc, #44]	@ (800d020 <vPortSetupTimerInterrupt+0x34>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cff6:	4b0b      	ldr	r3, [pc, #44]	@ (800d024 <vPortSetupTimerInterrupt+0x38>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cffc:	4b0a      	ldr	r3, [pc, #40]	@ (800d028 <vPortSetupTimerInterrupt+0x3c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a0a      	ldr	r2, [pc, #40]	@ (800d02c <vPortSetupTimerInterrupt+0x40>)
 800d002:	fba2 2303 	umull	r2, r3, r2, r3
 800d006:	099b      	lsrs	r3, r3, #6
 800d008:	4a09      	ldr	r2, [pc, #36]	@ (800d030 <vPortSetupTimerInterrupt+0x44>)
 800d00a:	3b01      	subs	r3, #1
 800d00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d00e:	4b04      	ldr	r3, [pc, #16]	@ (800d020 <vPortSetupTimerInterrupt+0x34>)
 800d010:	2207      	movs	r2, #7
 800d012:	601a      	str	r2, [r3, #0]
}
 800d014:	bf00      	nop
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	e000e010 	.word	0xe000e010
 800d024:	e000e018 	.word	0xe000e018
 800d028:	20000000 	.word	0x20000000
 800d02c:	10624dd3 	.word	0x10624dd3
 800d030:	e000e014 	.word	0xe000e014

0800d034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d044 <vPortEnableVFP+0x10>
 800d038:	6801      	ldr	r1, [r0, #0]
 800d03a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d03e:	6001      	str	r1, [r0, #0]
 800d040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d042:	bf00      	nop
 800d044:	e000ed88 	.word	0xe000ed88

0800d048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d04e:	f3ef 8305 	mrs	r3, IPSR
 800d052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b0f      	cmp	r3, #15
 800d058:	d915      	bls.n	800d086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d05a:	4a18      	ldr	r2, [pc, #96]	@ (800d0bc <vPortValidateInterruptPriority+0x74>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4413      	add	r3, r2
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d064:	4b16      	ldr	r3, [pc, #88]	@ (800d0c0 <vPortValidateInterruptPriority+0x78>)
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	7afa      	ldrb	r2, [r7, #11]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d20b      	bcs.n	800d086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	607b      	str	r3, [r7, #4]
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	e7fd      	b.n	800d082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d086:	4b0f      	ldr	r3, [pc, #60]	@ (800d0c4 <vPortValidateInterruptPriority+0x7c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d08e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0c8 <vPortValidateInterruptPriority+0x80>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	429a      	cmp	r2, r3
 800d094:	d90b      	bls.n	800d0ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	603b      	str	r3, [r7, #0]
}
 800d0a8:	bf00      	nop
 800d0aa:	bf00      	nop
 800d0ac:	e7fd      	b.n	800d0aa <vPortValidateInterruptPriority+0x62>
	}
 800d0ae:	bf00      	nop
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	e000e3f0 	.word	0xe000e3f0
 800d0c0:	20009de4 	.word	0x20009de4
 800d0c4:	e000ed0c 	.word	0xe000ed0c
 800d0c8:	20009de8 	.word	0x20009de8

0800d0cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800d0d8:	4b48      	ldr	r3, [pc, #288]	@ (800d1fc <pvPortMalloc+0x130>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10b      	bne.n	800d0f8 <pvPortMalloc+0x2c>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	60fb      	str	r3, [r7, #12]
}
 800d0f2:	bf00      	nop
 800d0f4:	bf00      	nop
 800d0f6:	e7fd      	b.n	800d0f4 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800d0f8:	f7fe fc44 	bl	800b984 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0fc:	4b40      	ldr	r3, [pc, #256]	@ (800d200 <pvPortMalloc+0x134>)
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4013      	ands	r3, r2
 800d104:	2b00      	cmp	r3, #0
 800d106:	d172      	bne.n	800d1ee <pvPortMalloc+0x122>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00d      	beq.n	800d12a <pvPortMalloc+0x5e>
			{
				xWantedSize += xHeapStructSize;
 800d10e:	2208      	movs	r2, #8
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4413      	add	r3, r2
 800d114:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f003 0307 	and.w	r3, r3, #7
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d004      	beq.n	800d12a <pvPortMalloc+0x5e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f023 0307 	bic.w	r3, r3, #7
 800d126:	3308      	adds	r3, #8
 800d128:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d05e      	beq.n	800d1ee <pvPortMalloc+0x122>
 800d130:	4b34      	ldr	r3, [pc, #208]	@ (800d204 <pvPortMalloc+0x138>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	429a      	cmp	r2, r3
 800d138:	d859      	bhi.n	800d1ee <pvPortMalloc+0x122>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d13a:	4b33      	ldr	r3, [pc, #204]	@ (800d208 <pvPortMalloc+0x13c>)
 800d13c:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800d13e:	4b32      	ldr	r3, [pc, #200]	@ (800d208 <pvPortMalloc+0x13c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d144:	e004      	b.n	800d150 <pvPortMalloc+0x84>
				{
					pxPreviousBlock = pxBlock;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	429a      	cmp	r2, r3
 800d158:	d903      	bls.n	800d162 <pvPortMalloc+0x96>
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f1      	bne.n	800d146 <pvPortMalloc+0x7a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d162:	4b26      	ldr	r3, [pc, #152]	@ (800d1fc <pvPortMalloc+0x130>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	69fa      	ldr	r2, [r7, #28]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d040      	beq.n	800d1ee <pvPortMalloc+0x122>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2208      	movs	r2, #8
 800d172:	4413      	add	r3, r2
 800d174:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	1ad2      	subs	r2, r2, r3
 800d186:	2308      	movs	r3, #8
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d90f      	bls.n	800d1ae <pvPortMalloc+0xe2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4413      	add	r3, r2
 800d194:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	1ad2      	subs	r2, r2, r3
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800d1a8:	6938      	ldr	r0, [r7, #16]
 800d1aa:	f000 f897 	bl	800d2dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1ae:	4b15      	ldr	r3, [pc, #84]	@ (800d204 <pvPortMalloc+0x138>)
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	4a12      	ldr	r2, [pc, #72]	@ (800d204 <pvPortMalloc+0x138>)
 800d1ba:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1bc:	4b11      	ldr	r3, [pc, #68]	@ (800d204 <pvPortMalloc+0x138>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	4b12      	ldr	r3, [pc, #72]	@ (800d20c <pvPortMalloc+0x140>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d203      	bcs.n	800d1d0 <pvPortMalloc+0x104>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d204 <pvPortMalloc+0x138>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a0f      	ldr	r2, [pc, #60]	@ (800d20c <pvPortMalloc+0x140>)
 800d1ce:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d200 <pvPortMalloc+0x134>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d210 <pvPortMalloc+0x144>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	4a09      	ldr	r2, [pc, #36]	@ (800d210 <pvPortMalloc+0x144>)
 800d1ec:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1ee:	f7fe fbd7 	bl	800b9a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800d1f2:	697b      	ldr	r3, [r7, #20]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3720      	adds	r7, #32
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20009df4 	.word	0x20009df4
 800d200:	20009e08 	.word	0x20009e08
 800d204:	20009df8 	.word	0x20009df8
 800d208:	20009dec 	.word	0x20009dec
 800d20c:	20009dfc 	.word	0x20009dfc
 800d210:	20009e00 	.word	0x20009e00

0800d214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d04f      	beq.n	800d2c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d226:	2308      	movs	r3, #8
 800d228:	425b      	negs	r3, r3
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	4413      	add	r3, r2
 800d22e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	4b25      	ldr	r3, [pc, #148]	@ (800d2d0 <vPortFree+0xbc>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4013      	ands	r3, r2
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10b      	bne.n	800d25a <vPortFree+0x46>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	60fb      	str	r3, [r7, #12]
}
 800d254:	bf00      	nop
 800d256:	bf00      	nop
 800d258:	e7fd      	b.n	800d256 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00b      	beq.n	800d27a <vPortFree+0x66>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60bb      	str	r3, [r7, #8]
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop
 800d278:	e7fd      	b.n	800d276 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	4b14      	ldr	r3, [pc, #80]	@ (800d2d0 <vPortFree+0xbc>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4013      	ands	r3, r2
 800d284:	2b00      	cmp	r3, #0
 800d286:	d01e      	beq.n	800d2c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d11a      	bne.n	800d2c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d0 <vPortFree+0xbc>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	43db      	mvns	r3, r3
 800d29a:	401a      	ands	r2, r3
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2a0:	f7fe fb70 	bl	800b984 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d4 <vPortFree+0xc0>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	4a09      	ldr	r2, [pc, #36]	@ (800d2d4 <vPortFree+0xc0>)
 800d2b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2b2:	6938      	ldr	r0, [r7, #16]
 800d2b4:	f000 f812 	bl	800d2dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2b8:	4b07      	ldr	r3, [pc, #28]	@ (800d2d8 <vPortFree+0xc4>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	4a06      	ldr	r2, [pc, #24]	@ (800d2d8 <vPortFree+0xc4>)
 800d2c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2c2:	f7fe fb6d 	bl	800b9a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2c6:	bf00      	nop
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20009e08 	.word	0x20009e08
 800d2d4:	20009df8 	.word	0x20009df8
 800d2d8:	20009e04 	.word	0x20009e04

0800d2dc <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2e4:	4b28      	ldr	r3, [pc, #160]	@ (800d388 <prvInsertBlockIntoFreeList+0xac>)
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	e002      	b.n	800d2f0 <prvInsertBlockIntoFreeList+0x14>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d8f7      	bhi.n	800d2ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	4413      	add	r3, r2
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d108      	bne.n	800d31e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	441a      	add	r2, r3
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d118      	bne.n	800d364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b15      	ldr	r3, [pc, #84]	@ (800d38c <prvInsertBlockIntoFreeList+0xb0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d00d      	beq.n	800d35a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	441a      	add	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	601a      	str	r2, [r3, #0]
 800d358:	e008      	b.n	800d36c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d35a:	4b0c      	ldr	r3, [pc, #48]	@ (800d38c <prvInsertBlockIntoFreeList+0xb0>)
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	e003      	b.n	800d36c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	429a      	cmp	r2, r3
 800d372:	d002      	beq.n	800d37a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	20009dec 	.word	0x20009dec
 800d38c:	20009df4 	.word	0x20009df4

0800d390 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800d390:	b480      	push	{r7}
 800d392:	b08f      	sub	sp, #60	@ 0x3c
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800d398:	2300      	movs	r3, #0
 800d39a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	633b      	str	r3, [r7, #48]	@ 0x30
BaseType_t xDefinedRegions = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800d3a4:	4b5c      	ldr	r3, [pc, #368]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <vPortDefineHeapRegions+0x34>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	617b      	str	r3, [r7, #20]
}
 800d3be:	bf00      	nop
 800d3c0:	bf00      	nop
 800d3c2:	e7fd      	b.n	800d3c0 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800d3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	627b      	str	r3, [r7, #36]	@ 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800d3ce:	e07f      	b.n	800d4d0 <vPortDefineHeapRegions+0x140>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	62bb      	str	r3, [r7, #40]	@ 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3de:	f003 0307 	and.w	r3, r3, #7
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00e      	beq.n	800d404 <vPortDefineHeapRegions+0x74>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e8:	3307      	adds	r3, #7
 800d3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800d3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ee:	f023 0307 	bic.w	r3, r3, #7
 800d3f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d400:	4413      	add	r3, r2
 800d402:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		xAlignedHeap = xAddress;
 800d404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d406:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800d408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <vPortDefineHeapRegions+0x8c>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	4a42      	ldr	r2, [pc, #264]	@ (800d51c <vPortDefineHeapRegions+0x18c>)
 800d412:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800d414:	4b41      	ldr	r3, [pc, #260]	@ (800d51c <vPortDefineHeapRegions+0x18c>)
 800d416:	2200      	movs	r2, #0
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	e021      	b.n	800d460 <vPortDefineHeapRegions+0xd0>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800d41c:	4b3e      	ldr	r3, [pc, #248]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10b      	bne.n	800d43c <vPortDefineHeapRegions+0xac>
	__asm volatile
 800d424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	613b      	str	r3, [r7, #16]
}
 800d436:	bf00      	nop
 800d438:	bf00      	nop
 800d43a:	e7fd      	b.n	800d438 <vPortDefineHeapRegions+0xa8>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800d43c:	4b36      	ldr	r3, [pc, #216]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	461a      	mov	r2, r3
 800d442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d444:	4293      	cmp	r3, r2
 800d446:	d80b      	bhi.n	800d460 <vPortDefineHeapRegions+0xd0>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	60fb      	str	r3, [r7, #12]
}
 800d45a:	bf00      	nop
 800d45c:	bf00      	nop
 800d45e:	e7fd      	b.n	800d45c <vPortDefineHeapRegions+0xcc>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800d460:	4b2d      	ldr	r3, [pc, #180]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800d466:	69fa      	ldr	r2, [r7, #28]
 800d468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d46a:	4413      	add	r3, r2
 800d46c:	62bb      	str	r3, [r7, #40]	@ 0x28
		xAddress -= xHeapStructSize;
 800d46e:	2208      	movs	r2, #8
 800d470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d472:	1a9b      	subs	r3, r3, r2
 800d474:	62bb      	str	r3, [r7, #40]	@ 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800d476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d478:	f023 0307 	bic.w	r3, r3, #7
 800d47c:	62bb      	str	r3, [r7, #40]	@ 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800d47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d480:	4a25      	ldr	r2, [pc, #148]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d482:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800d484:	4b24      	ldr	r3, [pc, #144]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2200      	movs	r2, #0
 800d48a:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800d48c:	4b22      	ldr	r3, [pc, #136]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2200      	movs	r2, #0
 800d492:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d49c:	1ad2      	subs	r2, r2, r3
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800d4a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d518 <vPortDefineHeapRegions+0x188>)
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <vPortDefineHeapRegions+0x126>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	6a3a      	ldr	r2, [r7, #32]
 800d4b4:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4bc:	4413      	add	r3, r2
 800d4be:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800d4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	627b      	str	r3, [r7, #36]	@ 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f47f af7b 	bne.w	800d3d0 <vPortDefineHeapRegions+0x40>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800d4da:	4a11      	ldr	r2, [pc, #68]	@ (800d520 <vPortDefineHeapRegions+0x190>)
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800d4e0:	4a10      	ldr	r2, [pc, #64]	@ (800d524 <vPortDefineHeapRegions+0x194>)
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e4:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10b      	bne.n	800d504 <vPortDefineHeapRegions+0x174>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	60bb      	str	r3, [r7, #8]
}
 800d4fe:	bf00      	nop
 800d500:	bf00      	nop
 800d502:	e7fd      	b.n	800d500 <vPortDefineHeapRegions+0x170>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d504:	4b08      	ldr	r3, [pc, #32]	@ (800d528 <vPortDefineHeapRegions+0x198>)
 800d506:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d50a:	601a      	str	r2, [r3, #0]
}
 800d50c:	bf00      	nop
 800d50e:	373c      	adds	r7, #60	@ 0x3c
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	20009df4 	.word	0x20009df4
 800d51c:	20009dec 	.word	0x20009dec
 800d520:	20009dfc 	.word	0x20009dfc
 800d524:	20009df8 	.word	0x20009df8
 800d528:	20009e08 	.word	0x20009e08

0800d52c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d536:	f007 fac1 	bl	8014abc <sys_timeouts_sleeptime>
 800d53a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d542:	d10b      	bne.n	800d55c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d544:	4813      	ldr	r0, [pc, #76]	@ (800d594 <tcpip_timeouts_mbox_fetch+0x68>)
 800d546:	f00a f818 	bl	801757a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d54a:	2200      	movs	r2, #0
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f009 ffa0 	bl	8017494 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d554:	480f      	ldr	r0, [pc, #60]	@ (800d594 <tcpip_timeouts_mbox_fetch+0x68>)
 800d556:	f00a f801 	bl	801755c <sys_mutex_lock>
    return;
 800d55a:	e018      	b.n	800d58e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d102      	bne.n	800d568 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d562:	f007 fa71 	bl	8014a48 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d566:	e7e6      	b.n	800d536 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d568:	480a      	ldr	r0, [pc, #40]	@ (800d594 <tcpip_timeouts_mbox_fetch+0x68>)
 800d56a:	f00a f806 	bl	801757a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	6839      	ldr	r1, [r7, #0]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f009 ff8e 	bl	8017494 <sys_arch_mbox_fetch>
 800d578:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d57a:	4806      	ldr	r0, [pc, #24]	@ (800d594 <tcpip_timeouts_mbox_fetch+0x68>)
 800d57c:	f009 ffee 	bl	801755c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d586:	d102      	bne.n	800d58e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d588:	f007 fa5e 	bl	8014a48 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d58c:	e7d3      	b.n	800d536 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	20009e18 	.word	0x20009e18

0800d598 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d5a0:	4810      	ldr	r0, [pc, #64]	@ (800d5e4 <tcpip_thread+0x4c>)
 800d5a2:	f009 ffdb 	bl	801755c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d5a6:	4b10      	ldr	r3, [pc, #64]	@ (800d5e8 <tcpip_thread+0x50>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d5e8 <tcpip_thread+0x50>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a0e      	ldr	r2, [pc, #56]	@ (800d5ec <tcpip_thread+0x54>)
 800d5b4:	6812      	ldr	r2, [r2, #0]
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d5ba:	f107 030c 	add.w	r3, r7, #12
 800d5be:	4619      	mov	r1, r3
 800d5c0:	480b      	ldr	r0, [pc, #44]	@ (800d5f0 <tcpip_thread+0x58>)
 800d5c2:	f7ff ffb3 	bl	800d52c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d5cc:	4b09      	ldr	r3, [pc, #36]	@ (800d5f4 <tcpip_thread+0x5c>)
 800d5ce:	2291      	movs	r2, #145	@ 0x91
 800d5d0:	4909      	ldr	r1, [pc, #36]	@ (800d5f8 <tcpip_thread+0x60>)
 800d5d2:	480a      	ldr	r0, [pc, #40]	@ (800d5fc <tcpip_thread+0x64>)
 800d5d4:	f00a fe10 	bl	80181f8 <iprintf>
      continue;
 800d5d8:	e003      	b.n	800d5e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 f80f 	bl	800d600 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d5e2:	e7ea      	b.n	800d5ba <tcpip_thread+0x22>
 800d5e4:	20009e18 	.word	0x20009e18
 800d5e8:	20009e0c 	.word	0x20009e0c
 800d5ec:	20009e10 	.word	0x20009e10
 800d5f0:	20009e14 	.word	0x20009e14
 800d5f4:	08019158 	.word	0x08019158
 800d5f8:	08019188 	.word	0x08019188
 800d5fc:	080191a8 	.word	0x080191a8

0800d600 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d026      	beq.n	800d65e <tcpip_thread_handle_msg+0x5e>
 800d610:	2b02      	cmp	r3, #2
 800d612:	dc2b      	bgt.n	800d66c <tcpip_thread_handle_msg+0x6c>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <tcpip_thread_handle_msg+0x1e>
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d015      	beq.n	800d648 <tcpip_thread_handle_msg+0x48>
 800d61c:	e026      	b.n	800d66c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	6850      	ldr	r0, [r2, #4]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	6892      	ldr	r2, [r2, #8]
 800d62a:	4611      	mov	r1, r2
 800d62c:	4798      	blx	r3
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d004      	beq.n	800d63e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	f001 fd0b 	bl	800f054 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	2009      	movs	r0, #9
 800d642:	f000 fe63 	bl	800e30c <memp_free>
      break;
 800d646:	e018      	b.n	800d67a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	6892      	ldr	r2, [r2, #8]
 800d650:	4610      	mov	r0, r2
 800d652:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	2008      	movs	r0, #8
 800d658:	f000 fe58 	bl	800e30c <memp_free>
      break;
 800d65c:	e00d      	b.n	800d67a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	6892      	ldr	r2, [r2, #8]
 800d666:	4610      	mov	r0, r2
 800d668:	4798      	blx	r3
      break;
 800d66a:	e006      	b.n	800d67a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d66c:	4b05      	ldr	r3, [pc, #20]	@ (800d684 <tcpip_thread_handle_msg+0x84>)
 800d66e:	22cf      	movs	r2, #207	@ 0xcf
 800d670:	4905      	ldr	r1, [pc, #20]	@ (800d688 <tcpip_thread_handle_msg+0x88>)
 800d672:	4806      	ldr	r0, [pc, #24]	@ (800d68c <tcpip_thread_handle_msg+0x8c>)
 800d674:	f00a fdc0 	bl	80181f8 <iprintf>
      break;
 800d678:	bf00      	nop
  }
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	08019158 	.word	0x08019158
 800d688:	08019188 	.word	0x08019188
 800d68c:	080191a8 	.word	0x080191a8

0800d690 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d69c:	481a      	ldr	r0, [pc, #104]	@ (800d708 <tcpip_inpkt+0x78>)
 800d69e:	f009 ff2a 	bl	80174f6 <sys_mbox_valid>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d105      	bne.n	800d6b4 <tcpip_inpkt+0x24>
 800d6a8:	4b18      	ldr	r3, [pc, #96]	@ (800d70c <tcpip_inpkt+0x7c>)
 800d6aa:	22fc      	movs	r2, #252	@ 0xfc
 800d6ac:	4918      	ldr	r1, [pc, #96]	@ (800d710 <tcpip_inpkt+0x80>)
 800d6ae:	4819      	ldr	r0, [pc, #100]	@ (800d714 <tcpip_inpkt+0x84>)
 800d6b0:	f00a fda2 	bl	80181f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d6b4:	2009      	movs	r0, #9
 800d6b6:	f000 fdb3 	bl	800e220 <memp_malloc>
 800d6ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d102      	bne.n	800d6c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c6:	e01a      	b.n	800d6fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d6e0:	6979      	ldr	r1, [r7, #20]
 800d6e2:	4809      	ldr	r0, [pc, #36]	@ (800d708 <tcpip_inpkt+0x78>)
 800d6e4:	f009 febc 	bl	8017460 <sys_mbox_trypost>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d006      	beq.n	800d6fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d6ee:	6979      	ldr	r1, [r7, #20]
 800d6f0:	2009      	movs	r0, #9
 800d6f2:	f000 fe0b 	bl	800e30c <memp_free>
    return ERR_MEM;
 800d6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fa:	e000      	b.n	800d6fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d6fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20009e14 	.word	0x20009e14
 800d70c:	08019158 	.word	0x08019158
 800d710:	080191d0 	.word	0x080191d0
 800d714:	080191a8 	.word	0x080191a8

0800d718 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d728:	f003 0318 	and.w	r3, r3, #24
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d730:	4a08      	ldr	r2, [pc, #32]	@ (800d754 <tcpip_input+0x3c>)
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff ffab 	bl	800d690 <tcpip_inpkt>
 800d73a:	4603      	mov	r3, r0
 800d73c:	e005      	b.n	800d74a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d73e:	4a06      	ldr	r2, [pc, #24]	@ (800d758 <tcpip_input+0x40>)
 800d740:	6839      	ldr	r1, [r7, #0]
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff ffa4 	bl	800d690 <tcpip_inpkt>
 800d748:	4603      	mov	r3, r0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	08017281 	.word	0x08017281
 800d758:	08016189 	.word	0x08016189

0800d75c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d766:	4819      	ldr	r0, [pc, #100]	@ (800d7cc <tcpip_try_callback+0x70>)
 800d768:	f009 fec5 	bl	80174f6 <sys_mbox_valid>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d106      	bne.n	800d780 <tcpip_try_callback+0x24>
 800d772:	4b17      	ldr	r3, [pc, #92]	@ (800d7d0 <tcpip_try_callback+0x74>)
 800d774:	f240 125d 	movw	r2, #349	@ 0x15d
 800d778:	4916      	ldr	r1, [pc, #88]	@ (800d7d4 <tcpip_try_callback+0x78>)
 800d77a:	4817      	ldr	r0, [pc, #92]	@ (800d7d8 <tcpip_try_callback+0x7c>)
 800d77c:	f00a fd3c 	bl	80181f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d780:	2008      	movs	r0, #8
 800d782:	f000 fd4d 	bl	800e220 <memp_malloc>
 800d786:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d102      	bne.n	800d794 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	e017      	b.n	800d7c4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2201      	movs	r2, #1
 800d798:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d7a6:	68f9      	ldr	r1, [r7, #12]
 800d7a8:	4808      	ldr	r0, [pc, #32]	@ (800d7cc <tcpip_try_callback+0x70>)
 800d7aa:	f009 fe59 	bl	8017460 <sys_mbox_trypost>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d006      	beq.n	800d7c2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d7b4:	68f9      	ldr	r1, [r7, #12]
 800d7b6:	2008      	movs	r0, #8
 800d7b8:	f000 fda8 	bl	800e30c <memp_free>
    return ERR_MEM;
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c0:	e000      	b.n	800d7c4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20009e14 	.word	0x20009e14
 800d7d0:	08019158 	.word	0x08019158
 800d7d4:	080191d0 	.word	0x080191d0
 800d7d8:	080191a8 	.word	0x080191a8

0800d7dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d7e6:	f000 f871 	bl	800d8cc <lwip_init>

  tcpip_init_done = initfunc;
 800d7ea:	4a17      	ldr	r2, [pc, #92]	@ (800d848 <tcpip_init+0x6c>)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d7f0:	4a16      	ldr	r2, [pc, #88]	@ (800d84c <tcpip_init+0x70>)
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d7f6:	2106      	movs	r1, #6
 800d7f8:	4815      	ldr	r0, [pc, #84]	@ (800d850 <tcpip_init+0x74>)
 800d7fa:	f009 fe17 	bl	801742c <sys_mbox_new>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d006      	beq.n	800d812 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d804:	4b13      	ldr	r3, [pc, #76]	@ (800d854 <tcpip_init+0x78>)
 800d806:	f240 2261 	movw	r2, #609	@ 0x261
 800d80a:	4913      	ldr	r1, [pc, #76]	@ (800d858 <tcpip_init+0x7c>)
 800d80c:	4813      	ldr	r0, [pc, #76]	@ (800d85c <tcpip_init+0x80>)
 800d80e:	f00a fcf3 	bl	80181f8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d812:	4813      	ldr	r0, [pc, #76]	@ (800d860 <tcpip_init+0x84>)
 800d814:	f009 fe8c 	bl	8017530 <sys_mutex_new>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d006      	beq.n	800d82c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d81e:	4b0d      	ldr	r3, [pc, #52]	@ (800d854 <tcpip_init+0x78>)
 800d820:	f240 2265 	movw	r2, #613	@ 0x265
 800d824:	490f      	ldr	r1, [pc, #60]	@ (800d864 <tcpip_init+0x88>)
 800d826:	480d      	ldr	r0, [pc, #52]	@ (800d85c <tcpip_init+0x80>)
 800d828:	f00a fce6 	bl	80181f8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d82c:	2318      	movs	r3, #24
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d834:	2200      	movs	r2, #0
 800d836:	490c      	ldr	r1, [pc, #48]	@ (800d868 <tcpip_init+0x8c>)
 800d838:	480c      	ldr	r0, [pc, #48]	@ (800d86c <tcpip_init+0x90>)
 800d83a:	f009 feab 	bl	8017594 <sys_thread_new>
}
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20009e0c 	.word	0x20009e0c
 800d84c:	20009e10 	.word	0x20009e10
 800d850:	20009e14 	.word	0x20009e14
 800d854:	08019158 	.word	0x08019158
 800d858:	080191e0 	.word	0x080191e0
 800d85c:	080191a8 	.word	0x080191a8
 800d860:	20009e18 	.word	0x20009e18
 800d864:	08019204 	.word	0x08019204
 800d868:	0800d599 	.word	0x0800d599
 800d86c:	08019228 	.word	0x08019228

0800d870 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d87a:	88fb      	ldrh	r3, [r7, #6]
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	b21a      	sxth	r2, r3
 800d880:	88fb      	ldrh	r3, [r7, #6]
 800d882:	0a1b      	lsrs	r3, r3, #8
 800d884:	b29b      	uxth	r3, r3
 800d886:	b21b      	sxth	r3, r3
 800d888:	4313      	orrs	r3, r2
 800d88a:	b21b      	sxth	r3, r3
 800d88c:	b29b      	uxth	r3, r3
}
 800d88e:	4618      	mov	r0, r3
 800d890:	370c      	adds	r7, #12
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	061a      	lsls	r2, r3, #24
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	021b      	lsls	r3, r3, #8
 800d8aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d8ae:	431a      	orrs	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	0a1b      	lsrs	r3, r3, #8
 800d8b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	0e1b      	lsrs	r3, r3, #24
 800d8be:	4313      	orrs	r3, r2
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d8d6:	f009 fe1f 	bl	8017518 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d8da:	f000 f8d5 	bl	800da88 <mem_init>
  memp_init();
 800d8de:	f000 fc31 	bl	800e144 <memp_init>
  pbuf_init();
  netif_init();
 800d8e2:	f000 fd3d 	bl	800e360 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d8e6:	f007 f921 	bl	8014b2c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d8ea:	f001 fe4d 	bl	800f588 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d8ee:	f007 f863 	bl	80149b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d906:	4b05      	ldr	r3, [pc, #20]	@ (800d91c <ptr_to_mem+0x20>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	88fb      	ldrh	r3, [r7, #6]
 800d90c:	4413      	add	r3, r2
}
 800d90e:	4618      	mov	r0, r3
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	2000a488 	.word	0x2000a488

0800d920 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d928:	4b05      	ldr	r3, [pc, #20]	@ (800d940 <mem_to_ptr+0x20>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	b29b      	uxth	r3, r3
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	2000a488 	.word	0x2000a488

0800d944 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d94c:	4b45      	ldr	r3, [pc, #276]	@ (800da64 <plug_holes+0x120>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	429a      	cmp	r2, r3
 800d954:	d206      	bcs.n	800d964 <plug_holes+0x20>
 800d956:	4b44      	ldr	r3, [pc, #272]	@ (800da68 <plug_holes+0x124>)
 800d958:	f240 12df 	movw	r2, #479	@ 0x1df
 800d95c:	4943      	ldr	r1, [pc, #268]	@ (800da6c <plug_holes+0x128>)
 800d95e:	4844      	ldr	r0, [pc, #272]	@ (800da70 <plug_holes+0x12c>)
 800d960:	f00a fc4a 	bl	80181f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d964:	4b43      	ldr	r3, [pc, #268]	@ (800da74 <plug_holes+0x130>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d306      	bcc.n	800d97c <plug_holes+0x38>
 800d96e:	4b3e      	ldr	r3, [pc, #248]	@ (800da68 <plug_holes+0x124>)
 800d970:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d974:	4940      	ldr	r1, [pc, #256]	@ (800da78 <plug_holes+0x134>)
 800d976:	483e      	ldr	r0, [pc, #248]	@ (800da70 <plug_holes+0x12c>)
 800d978:	f00a fc3e 	bl	80181f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	791b      	ldrb	r3, [r3, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d006      	beq.n	800d992 <plug_holes+0x4e>
 800d984:	4b38      	ldr	r3, [pc, #224]	@ (800da68 <plug_holes+0x124>)
 800d986:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d98a:	493c      	ldr	r1, [pc, #240]	@ (800da7c <plug_holes+0x138>)
 800d98c:	4838      	ldr	r0, [pc, #224]	@ (800da70 <plug_holes+0x12c>)
 800d98e:	f00a fc33 	bl	80181f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d99a:	d906      	bls.n	800d9aa <plug_holes+0x66>
 800d99c:	4b32      	ldr	r3, [pc, #200]	@ (800da68 <plug_holes+0x124>)
 800d99e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d9a2:	4937      	ldr	r1, [pc, #220]	@ (800da80 <plug_holes+0x13c>)
 800d9a4:	4832      	ldr	r0, [pc, #200]	@ (800da70 <plug_holes+0x12c>)
 800d9a6:	f00a fc27 	bl	80181f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	881b      	ldrh	r3, [r3, #0]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff ffa4 	bl	800d8fc <ptr_to_mem>
 800d9b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d024      	beq.n	800da08 <plug_holes+0xc4>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	791b      	ldrb	r3, [r3, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d120      	bne.n	800da08 <plug_holes+0xc4>
 800d9c6:	4b2b      	ldr	r3, [pc, #172]	@ (800da74 <plug_holes+0x130>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d01b      	beq.n	800da08 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d9d0:	4b2c      	ldr	r3, [pc, #176]	@ (800da84 <plug_holes+0x140>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d102      	bne.n	800d9e0 <plug_holes+0x9c>
      lfree = mem;
 800d9da:	4a2a      	ldr	r2, [pc, #168]	@ (800da84 <plug_holes+0x140>)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	881a      	ldrh	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d9f0:	d00a      	beq.n	800da08 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff ff80 	bl	800d8fc <ptr_to_mem>
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff ff8e 	bl	800d920 <mem_to_ptr>
 800da04:	4603      	mov	r3, r0
 800da06:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	885b      	ldrh	r3, [r3, #2]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff ff75 	bl	800d8fc <ptr_to_mem>
 800da12:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d01f      	beq.n	800da5c <plug_holes+0x118>
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	791b      	ldrb	r3, [r3, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d11b      	bne.n	800da5c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800da24:	4b17      	ldr	r3, [pc, #92]	@ (800da84 <plug_holes+0x140>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d102      	bne.n	800da34 <plug_holes+0xf0>
      lfree = pmem;
 800da2e:	4a15      	ldr	r2, [pc, #84]	@ (800da84 <plug_holes+0x140>)
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	881a      	ldrh	r2, [r3, #0]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	881b      	ldrh	r3, [r3, #0]
 800da40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800da44:	d00a      	beq.n	800da5c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff ff56 	bl	800d8fc <ptr_to_mem>
 800da50:	4604      	mov	r4, r0
 800da52:	68b8      	ldr	r0, [r7, #8]
 800da54:	f7ff ff64 	bl	800d920 <mem_to_ptr>
 800da58:	4603      	mov	r3, r0
 800da5a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800da5c:	bf00      	nop
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	bd90      	pop	{r4, r7, pc}
 800da64:	2000a488 	.word	0x2000a488
 800da68:	08019238 	.word	0x08019238
 800da6c:	08019268 	.word	0x08019268
 800da70:	08019280 	.word	0x08019280
 800da74:	2000a48c 	.word	0x2000a48c
 800da78:	080192a8 	.word	0x080192a8
 800da7c:	080192c4 	.word	0x080192c4
 800da80:	080192e0 	.word	0x080192e0
 800da84:	2000a494 	.word	0x2000a494

0800da88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800da8e:	4b1f      	ldr	r3, [pc, #124]	@ (800db0c <mem_init+0x84>)
 800da90:	3303      	adds	r3, #3
 800da92:	f023 0303 	bic.w	r3, r3, #3
 800da96:	461a      	mov	r2, r3
 800da98:	4b1d      	ldr	r3, [pc, #116]	@ (800db10 <mem_init+0x88>)
 800da9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800da9c:	4b1c      	ldr	r3, [pc, #112]	@ (800db10 <mem_init+0x88>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800daa8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dab6:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800daba:	f7ff ff1f 	bl	800d8fc <ptr_to_mem>
 800dabe:	4603      	mov	r3, r0
 800dac0:	4a14      	ldr	r2, [pc, #80]	@ (800db14 <mem_init+0x8c>)
 800dac2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dac4:	4b13      	ldr	r3, [pc, #76]	@ (800db14 <mem_init+0x8c>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2201      	movs	r2, #1
 800daca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dacc:	4b11      	ldr	r3, [pc, #68]	@ (800db14 <mem_init+0x8c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dad4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dad6:	4b0f      	ldr	r3, [pc, #60]	@ (800db14 <mem_init+0x8c>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800dade:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dae0:	4b0b      	ldr	r3, [pc, #44]	@ (800db10 <mem_init+0x88>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a0c      	ldr	r2, [pc, #48]	@ (800db18 <mem_init+0x90>)
 800dae6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dae8:	480c      	ldr	r0, [pc, #48]	@ (800db1c <mem_init+0x94>)
 800daea:	f009 fd21 	bl	8017530 <sys_mutex_new>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d006      	beq.n	800db02 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800daf4:	4b0a      	ldr	r3, [pc, #40]	@ (800db20 <mem_init+0x98>)
 800daf6:	f240 221f 	movw	r2, #543	@ 0x21f
 800dafa:	490a      	ldr	r1, [pc, #40]	@ (800db24 <mem_init+0x9c>)
 800dafc:	480a      	ldr	r0, [pc, #40]	@ (800db28 <mem_init+0xa0>)
 800dafe:	f00a fb7b 	bl	80181f8 <iprintf>
  }
}
 800db02:	bf00      	nop
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	20009e34 	.word	0x20009e34
 800db10:	2000a488 	.word	0x2000a488
 800db14:	2000a48c 	.word	0x2000a48c
 800db18:	2000a494 	.word	0x2000a494
 800db1c:	2000a490 	.word	0x2000a490
 800db20:	08019238 	.word	0x08019238
 800db24:	0801930c 	.word	0x0801930c
 800db28:	08019280 	.word	0x08019280

0800db2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b086      	sub	sp, #24
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fef3 	bl	800d920 <mem_to_ptr>
 800db3a:	4603      	mov	r3, r0
 800db3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff feda 	bl	800d8fc <ptr_to_mem>
 800db48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	885b      	ldrh	r3, [r3, #2]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fed4 	bl	800d8fc <ptr_to_mem>
 800db54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800db5e:	d818      	bhi.n	800db92 <mem_link_valid+0x66>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	885b      	ldrh	r3, [r3, #2]
 800db64:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800db68:	d813      	bhi.n	800db92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800db6e:	8afa      	ldrh	r2, [r7, #22]
 800db70:	429a      	cmp	r2, r3
 800db72:	d004      	beq.n	800db7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	8afa      	ldrh	r2, [r7, #22]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d109      	bne.n	800db92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800db7e:	4b08      	ldr	r3, [pc, #32]	@ (800dba0 <mem_link_valid+0x74>)
 800db80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	429a      	cmp	r2, r3
 800db86:	d006      	beq.n	800db96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	885b      	ldrh	r3, [r3, #2]
 800db8c:	8afa      	ldrh	r2, [r7, #22]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d001      	beq.n	800db96 <mem_link_valid+0x6a>
    return 0;
 800db92:	2300      	movs	r3, #0
 800db94:	e000      	b.n	800db98 <mem_link_valid+0x6c>
  }
  return 1;
 800db96:	2301      	movs	r3, #1
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	2000a48c 	.word	0x2000a48c

0800dba4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d070      	beq.n	800dc94 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f003 0303 	and.w	r3, r3, #3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00d      	beq.n	800dbd8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dbbc:	4b37      	ldr	r3, [pc, #220]	@ (800dc9c <mem_free+0xf8>)
 800dbbe:	f240 2273 	movw	r2, #627	@ 0x273
 800dbc2:	4937      	ldr	r1, [pc, #220]	@ (800dca0 <mem_free+0xfc>)
 800dbc4:	4837      	ldr	r0, [pc, #220]	@ (800dca4 <mem_free+0x100>)
 800dbc6:	f00a fb17 	bl	80181f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dbca:	f009 fd03 	bl	80175d4 <sys_arch_protect>
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f009 fd0d 	bl	80175f0 <sys_arch_unprotect>
    return;
 800dbd6:	e05e      	b.n	800dc96 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	3b08      	subs	r3, #8
 800dbdc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dbde:	4b32      	ldr	r3, [pc, #200]	@ (800dca8 <mem_free+0x104>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d306      	bcc.n	800dbf6 <mem_free+0x52>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f103 020c 	add.w	r2, r3, #12
 800dbee:	4b2f      	ldr	r3, [pc, #188]	@ (800dcac <mem_free+0x108>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d90d      	bls.n	800dc12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dbf6:	4b29      	ldr	r3, [pc, #164]	@ (800dc9c <mem_free+0xf8>)
 800dbf8:	f240 227f 	movw	r2, #639	@ 0x27f
 800dbfc:	492c      	ldr	r1, [pc, #176]	@ (800dcb0 <mem_free+0x10c>)
 800dbfe:	4829      	ldr	r0, [pc, #164]	@ (800dca4 <mem_free+0x100>)
 800dc00:	f00a fafa 	bl	80181f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc04:	f009 fce6 	bl	80175d4 <sys_arch_protect>
 800dc08:	6138      	str	r0, [r7, #16]
 800dc0a:	6938      	ldr	r0, [r7, #16]
 800dc0c:	f009 fcf0 	bl	80175f0 <sys_arch_unprotect>
    return;
 800dc10:	e041      	b.n	800dc96 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dc12:	4828      	ldr	r0, [pc, #160]	@ (800dcb4 <mem_free+0x110>)
 800dc14:	f009 fca2 	bl	801755c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	791b      	ldrb	r3, [r3, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d110      	bne.n	800dc42 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dc20:	4b1e      	ldr	r3, [pc, #120]	@ (800dc9c <mem_free+0xf8>)
 800dc22:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800dc26:	4924      	ldr	r1, [pc, #144]	@ (800dcb8 <mem_free+0x114>)
 800dc28:	481e      	ldr	r0, [pc, #120]	@ (800dca4 <mem_free+0x100>)
 800dc2a:	f00a fae5 	bl	80181f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc2e:	4821      	ldr	r0, [pc, #132]	@ (800dcb4 <mem_free+0x110>)
 800dc30:	f009 fca3 	bl	801757a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc34:	f009 fcce 	bl	80175d4 <sys_arch_protect>
 800dc38:	6178      	str	r0, [r7, #20]
 800dc3a:	6978      	ldr	r0, [r7, #20]
 800dc3c:	f009 fcd8 	bl	80175f0 <sys_arch_unprotect>
    return;
 800dc40:	e029      	b.n	800dc96 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dc42:	69f8      	ldr	r0, [r7, #28]
 800dc44:	f7ff ff72 	bl	800db2c <mem_link_valid>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d110      	bne.n	800dc70 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dc4e:	4b13      	ldr	r3, [pc, #76]	@ (800dc9c <mem_free+0xf8>)
 800dc50:	f240 2295 	movw	r2, #661	@ 0x295
 800dc54:	4919      	ldr	r1, [pc, #100]	@ (800dcbc <mem_free+0x118>)
 800dc56:	4813      	ldr	r0, [pc, #76]	@ (800dca4 <mem_free+0x100>)
 800dc58:	f00a face 	bl	80181f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc5c:	4815      	ldr	r0, [pc, #84]	@ (800dcb4 <mem_free+0x110>)
 800dc5e:	f009 fc8c 	bl	801757a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc62:	f009 fcb7 	bl	80175d4 <sys_arch_protect>
 800dc66:	61b8      	str	r0, [r7, #24]
 800dc68:	69b8      	ldr	r0, [r7, #24]
 800dc6a:	f009 fcc1 	bl	80175f0 <sys_arch_unprotect>
    return;
 800dc6e:	e012      	b.n	800dc96 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	2200      	movs	r2, #0
 800dc74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dc76:	4b12      	ldr	r3, [pc, #72]	@ (800dcc0 <mem_free+0x11c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	69fa      	ldr	r2, [r7, #28]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d202      	bcs.n	800dc86 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dc80:	4a0f      	ldr	r2, [pc, #60]	@ (800dcc0 <mem_free+0x11c>)
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dc86:	69f8      	ldr	r0, [r7, #28]
 800dc88:	f7ff fe5c 	bl	800d944 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dc8c:	4809      	ldr	r0, [pc, #36]	@ (800dcb4 <mem_free+0x110>)
 800dc8e:	f009 fc74 	bl	801757a <sys_mutex_unlock>
 800dc92:	e000      	b.n	800dc96 <mem_free+0xf2>
    return;
 800dc94:	bf00      	nop
}
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	08019238 	.word	0x08019238
 800dca0:	08019328 	.word	0x08019328
 800dca4:	08019280 	.word	0x08019280
 800dca8:	2000a488 	.word	0x2000a488
 800dcac:	2000a48c 	.word	0x2000a48c
 800dcb0:	0801934c 	.word	0x0801934c
 800dcb4:	2000a490 	.word	0x2000a490
 800dcb8:	08019368 	.word	0x08019368
 800dcbc:	08019390 	.word	0x08019390
 800dcc0:	2000a494 	.word	0x2000a494

0800dcc4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	460b      	mov	r3, r1
 800dcce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dcd0:	887b      	ldrh	r3, [r7, #2]
 800dcd2:	3303      	adds	r3, #3
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	f023 0303 	bic.w	r3, r3, #3
 800dcda:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dcdc:	8bfb      	ldrh	r3, [r7, #30]
 800dcde:	2b0b      	cmp	r3, #11
 800dce0:	d801      	bhi.n	800dce6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800dce2:	230c      	movs	r3, #12
 800dce4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dce6:	8bfb      	ldrh	r3, [r7, #30]
 800dce8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dcec:	d803      	bhi.n	800dcf6 <mem_trim+0x32>
 800dcee:	8bfa      	ldrh	r2, [r7, #30]
 800dcf0:	887b      	ldrh	r3, [r7, #2]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d201      	bcs.n	800dcfa <mem_trim+0x36>
    return NULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e0d8      	b.n	800deac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dcfa:	4b6e      	ldr	r3, [pc, #440]	@ (800deb4 <mem_trim+0x1f0>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d304      	bcc.n	800dd0e <mem_trim+0x4a>
 800dd04:	4b6c      	ldr	r3, [pc, #432]	@ (800deb8 <mem_trim+0x1f4>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d306      	bcc.n	800dd1c <mem_trim+0x58>
 800dd0e:	4b6b      	ldr	r3, [pc, #428]	@ (800debc <mem_trim+0x1f8>)
 800dd10:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800dd14:	496a      	ldr	r1, [pc, #424]	@ (800dec0 <mem_trim+0x1fc>)
 800dd16:	486b      	ldr	r0, [pc, #428]	@ (800dec4 <mem_trim+0x200>)
 800dd18:	f00a fa6e 	bl	80181f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dd1c:	4b65      	ldr	r3, [pc, #404]	@ (800deb4 <mem_trim+0x1f0>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d304      	bcc.n	800dd30 <mem_trim+0x6c>
 800dd26:	4b64      	ldr	r3, [pc, #400]	@ (800deb8 <mem_trim+0x1f4>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d307      	bcc.n	800dd40 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd30:	f009 fc50 	bl	80175d4 <sys_arch_protect>
 800dd34:	60b8      	str	r0, [r7, #8]
 800dd36:	68b8      	ldr	r0, [r7, #8]
 800dd38:	f009 fc5a 	bl	80175f0 <sys_arch_unprotect>
    return rmem;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	e0b5      	b.n	800deac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	3b08      	subs	r3, #8
 800dd44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dd46:	69b8      	ldr	r0, [r7, #24]
 800dd48:	f7ff fdea 	bl	800d920 <mem_to_ptr>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	881a      	ldrh	r2, [r3, #0]
 800dd54:	8afb      	ldrh	r3, [r7, #22]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	3b08      	subs	r3, #8
 800dd5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800dd5e:	8bfa      	ldrh	r2, [r7, #30]
 800dd60:	8abb      	ldrh	r3, [r7, #20]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d906      	bls.n	800dd74 <mem_trim+0xb0>
 800dd66:	4b55      	ldr	r3, [pc, #340]	@ (800debc <mem_trim+0x1f8>)
 800dd68:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800dd6c:	4956      	ldr	r1, [pc, #344]	@ (800dec8 <mem_trim+0x204>)
 800dd6e:	4855      	ldr	r0, [pc, #340]	@ (800dec4 <mem_trim+0x200>)
 800dd70:	f00a fa42 	bl	80181f8 <iprintf>
  if (newsize > size) {
 800dd74:	8bfa      	ldrh	r2, [r7, #30]
 800dd76:	8abb      	ldrh	r3, [r7, #20]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d901      	bls.n	800dd80 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	e095      	b.n	800deac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800dd80:	8bfa      	ldrh	r2, [r7, #30]
 800dd82:	8abb      	ldrh	r3, [r7, #20]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d101      	bne.n	800dd8c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	e08f      	b.n	800deac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dd8c:	484f      	ldr	r0, [pc, #316]	@ (800decc <mem_trim+0x208>)
 800dd8e:	f009 fbe5 	bl	801755c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff fdb0 	bl	800d8fc <ptr_to_mem>
 800dd9c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	791b      	ldrb	r3, [r3, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d13f      	bne.n	800de26 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ddae:	d106      	bne.n	800ddbe <mem_trim+0xfa>
 800ddb0:	4b42      	ldr	r3, [pc, #264]	@ (800debc <mem_trim+0x1f8>)
 800ddb2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ddb6:	4946      	ldr	r1, [pc, #280]	@ (800ded0 <mem_trim+0x20c>)
 800ddb8:	4842      	ldr	r0, [pc, #264]	@ (800dec4 <mem_trim+0x200>)
 800ddba:	f00a fa1d 	bl	80181f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ddc4:	8afa      	ldrh	r2, [r7, #22]
 800ddc6:	8bfb      	ldrh	r3, [r7, #30]
 800ddc8:	4413      	add	r3, r2
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	3308      	adds	r3, #8
 800ddce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ddd0:	4b40      	ldr	r3, [pc, #256]	@ (800ded4 <mem_trim+0x210>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d106      	bne.n	800dde8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ddda:	89fb      	ldrh	r3, [r7, #14]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff fd8d 	bl	800d8fc <ptr_to_mem>
 800dde2:	4603      	mov	r3, r0
 800dde4:	4a3b      	ldr	r2, [pc, #236]	@ (800ded4 <mem_trim+0x210>)
 800dde6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dde8:	89fb      	ldrh	r3, [r7, #14]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7ff fd86 	bl	800d8fc <ptr_to_mem>
 800ddf0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	89ba      	ldrh	r2, [r7, #12]
 800ddfc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	8afa      	ldrh	r2, [r7, #22]
 800de02:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	89fa      	ldrh	r2, [r7, #14]
 800de08:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800de12:	d047      	beq.n	800dea4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	4618      	mov	r0, r3
 800de1a:	f7ff fd6f 	bl	800d8fc <ptr_to_mem>
 800de1e:	4602      	mov	r2, r0
 800de20:	89fb      	ldrh	r3, [r7, #14]
 800de22:	8053      	strh	r3, [r2, #2]
 800de24:	e03e      	b.n	800dea4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800de26:	8bfb      	ldrh	r3, [r7, #30]
 800de28:	f103 0214 	add.w	r2, r3, #20
 800de2c:	8abb      	ldrh	r3, [r7, #20]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d838      	bhi.n	800dea4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de32:	8afa      	ldrh	r2, [r7, #22]
 800de34:	8bfb      	ldrh	r3, [r7, #30]
 800de36:	4413      	add	r3, r2
 800de38:	b29b      	uxth	r3, r3
 800de3a:	3308      	adds	r3, #8
 800de3c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800de46:	d106      	bne.n	800de56 <mem_trim+0x192>
 800de48:	4b1c      	ldr	r3, [pc, #112]	@ (800debc <mem_trim+0x1f8>)
 800de4a:	f240 3216 	movw	r2, #790	@ 0x316
 800de4e:	4920      	ldr	r1, [pc, #128]	@ (800ded0 <mem_trim+0x20c>)
 800de50:	481c      	ldr	r0, [pc, #112]	@ (800dec4 <mem_trim+0x200>)
 800de52:	f00a f9d1 	bl	80181f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800de56:	89fb      	ldrh	r3, [r7, #14]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fd4f 	bl	800d8fc <ptr_to_mem>
 800de5e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800de60:	4b1c      	ldr	r3, [pc, #112]	@ (800ded4 <mem_trim+0x210>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	693a      	ldr	r2, [r7, #16]
 800de66:	429a      	cmp	r2, r3
 800de68:	d202      	bcs.n	800de70 <mem_trim+0x1ac>
      lfree = mem2;
 800de6a:	4a1a      	ldr	r2, [pc, #104]	@ (800ded4 <mem_trim+0x210>)
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2200      	movs	r2, #0
 800de74:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	881a      	ldrh	r2, [r3, #0]
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	8afa      	ldrh	r2, [r7, #22]
 800de82:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	89fa      	ldrh	r2, [r7, #14]
 800de88:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800de92:	d007      	beq.n	800dea4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	4618      	mov	r0, r3
 800de9a:	f7ff fd2f 	bl	800d8fc <ptr_to_mem>
 800de9e:	4602      	mov	r2, r0
 800dea0:	89fb      	ldrh	r3, [r7, #14]
 800dea2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dea4:	4809      	ldr	r0, [pc, #36]	@ (800decc <mem_trim+0x208>)
 800dea6:	f009 fb68 	bl	801757a <sys_mutex_unlock>
  return rmem;
 800deaa:	687b      	ldr	r3, [r7, #4]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3720      	adds	r7, #32
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2000a488 	.word	0x2000a488
 800deb8:	2000a48c 	.word	0x2000a48c
 800debc:	08019238 	.word	0x08019238
 800dec0:	080193c4 	.word	0x080193c4
 800dec4:	08019280 	.word	0x08019280
 800dec8:	080193dc 	.word	0x080193dc
 800decc:	2000a490 	.word	0x2000a490
 800ded0:	080193fc 	.word	0x080193fc
 800ded4:	2000a494 	.word	0x2000a494

0800ded8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	4603      	mov	r3, r0
 800dee0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dee2:	88fb      	ldrh	r3, [r7, #6]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <mem_malloc+0x14>
    return NULL;
 800dee8:	2300      	movs	r3, #0
 800deea:	e0e2      	b.n	800e0b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800deec:	88fb      	ldrh	r3, [r7, #6]
 800deee:	3303      	adds	r3, #3
 800def0:	b29b      	uxth	r3, r3
 800def2:	f023 0303 	bic.w	r3, r3, #3
 800def6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800def8:	8bbb      	ldrh	r3, [r7, #28]
 800defa:	2b0b      	cmp	r3, #11
 800defc:	d801      	bhi.n	800df02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800defe:	230c      	movs	r3, #12
 800df00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800df02:	8bbb      	ldrh	r3, [r7, #28]
 800df04:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800df08:	d803      	bhi.n	800df12 <mem_malloc+0x3a>
 800df0a:	8bba      	ldrh	r2, [r7, #28]
 800df0c:	88fb      	ldrh	r3, [r7, #6]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d201      	bcs.n	800df16 <mem_malloc+0x3e>
    return NULL;
 800df12:	2300      	movs	r3, #0
 800df14:	e0cd      	b.n	800e0b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800df16:	4869      	ldr	r0, [pc, #420]	@ (800e0bc <mem_malloc+0x1e4>)
 800df18:	f009 fb20 	bl	801755c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df1c:	4b68      	ldr	r3, [pc, #416]	@ (800e0c0 <mem_malloc+0x1e8>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4618      	mov	r0, r3
 800df22:	f7ff fcfd 	bl	800d920 <mem_to_ptr>
 800df26:	4603      	mov	r3, r0
 800df28:	83fb      	strh	r3, [r7, #30]
 800df2a:	e0b7      	b.n	800e09c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800df2c:	8bfb      	ldrh	r3, [r7, #30]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff fce4 	bl	800d8fc <ptr_to_mem>
 800df34:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	791b      	ldrb	r3, [r3, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f040 80a7 	bne.w	800e08e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	461a      	mov	r2, r3
 800df46:	8bfb      	ldrh	r3, [r7, #30]
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	f1a3 0208 	sub.w	r2, r3, #8
 800df4e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800df50:	429a      	cmp	r2, r3
 800df52:	f0c0 809c 	bcc.w	800e08e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	8bfb      	ldrh	r3, [r7, #30]
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	f1a3 0208 	sub.w	r2, r3, #8
 800df64:	8bbb      	ldrh	r3, [r7, #28]
 800df66:	3314      	adds	r3, #20
 800df68:	429a      	cmp	r2, r3
 800df6a:	d333      	bcc.n	800dfd4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800df6c:	8bfa      	ldrh	r2, [r7, #30]
 800df6e:	8bbb      	ldrh	r3, [r7, #28]
 800df70:	4413      	add	r3, r2
 800df72:	b29b      	uxth	r3, r3
 800df74:	3308      	adds	r3, #8
 800df76:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800df78:	8a7b      	ldrh	r3, [r7, #18]
 800df7a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800df7e:	d106      	bne.n	800df8e <mem_malloc+0xb6>
 800df80:	4b50      	ldr	r3, [pc, #320]	@ (800e0c4 <mem_malloc+0x1ec>)
 800df82:	f240 3287 	movw	r2, #903	@ 0x387
 800df86:	4950      	ldr	r1, [pc, #320]	@ (800e0c8 <mem_malloc+0x1f0>)
 800df88:	4850      	ldr	r0, [pc, #320]	@ (800e0cc <mem_malloc+0x1f4>)
 800df8a:	f00a f935 	bl	80181f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800df8e:	8a7b      	ldrh	r3, [r7, #18]
 800df90:	4618      	mov	r0, r3
 800df92:	f7ff fcb3 	bl	800d8fc <ptr_to_mem>
 800df96:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	881a      	ldrh	r2, [r3, #0]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	8bfa      	ldrh	r2, [r7, #30]
 800dfaa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	8a7a      	ldrh	r2, [r7, #18]
 800dfb0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	881b      	ldrh	r3, [r3, #0]
 800dfbc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800dfc0:	d00b      	beq.n	800dfda <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff fc98 	bl	800d8fc <ptr_to_mem>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	8a7b      	ldrh	r3, [r7, #18]
 800dfd0:	8053      	strh	r3, [r2, #2]
 800dfd2:	e002      	b.n	800dfda <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dfda:	4b39      	ldr	r3, [pc, #228]	@ (800e0c0 <mem_malloc+0x1e8>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d127      	bne.n	800e034 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800dfe4:	4b36      	ldr	r3, [pc, #216]	@ (800e0c0 <mem_malloc+0x1e8>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dfea:	e005      	b.n	800dff8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff fc83 	bl	800d8fc <ptr_to_mem>
 800dff6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	791b      	ldrb	r3, [r3, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d004      	beq.n	800e00a <mem_malloc+0x132>
 800e000:	4b33      	ldr	r3, [pc, #204]	@ (800e0d0 <mem_malloc+0x1f8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	429a      	cmp	r2, r3
 800e008:	d1f0      	bne.n	800dfec <mem_malloc+0x114>
          }
          lfree = cur;
 800e00a:	4a2d      	ldr	r2, [pc, #180]	@ (800e0c0 <mem_malloc+0x1e8>)
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e010:	4b2b      	ldr	r3, [pc, #172]	@ (800e0c0 <mem_malloc+0x1e8>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	4b2e      	ldr	r3, [pc, #184]	@ (800e0d0 <mem_malloc+0x1f8>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d00b      	beq.n	800e034 <mem_malloc+0x15c>
 800e01c:	4b28      	ldr	r3, [pc, #160]	@ (800e0c0 <mem_malloc+0x1e8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	791b      	ldrb	r3, [r3, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d006      	beq.n	800e034 <mem_malloc+0x15c>
 800e026:	4b27      	ldr	r3, [pc, #156]	@ (800e0c4 <mem_malloc+0x1ec>)
 800e028:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e02c:	4929      	ldr	r1, [pc, #164]	@ (800e0d4 <mem_malloc+0x1fc>)
 800e02e:	4827      	ldr	r0, [pc, #156]	@ (800e0cc <mem_malloc+0x1f4>)
 800e030:	f00a f8e2 	bl	80181f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e034:	4821      	ldr	r0, [pc, #132]	@ (800e0bc <mem_malloc+0x1e4>)
 800e036:	f009 faa0 	bl	801757a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e03a:	8bba      	ldrh	r2, [r7, #28]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	4413      	add	r3, r2
 800e040:	3308      	adds	r3, #8
 800e042:	4a23      	ldr	r2, [pc, #140]	@ (800e0d0 <mem_malloc+0x1f8>)
 800e044:	6812      	ldr	r2, [r2, #0]
 800e046:	4293      	cmp	r3, r2
 800e048:	d906      	bls.n	800e058 <mem_malloc+0x180>
 800e04a:	4b1e      	ldr	r3, [pc, #120]	@ (800e0c4 <mem_malloc+0x1ec>)
 800e04c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e050:	4921      	ldr	r1, [pc, #132]	@ (800e0d8 <mem_malloc+0x200>)
 800e052:	481e      	ldr	r0, [pc, #120]	@ (800e0cc <mem_malloc+0x1f4>)
 800e054:	f00a f8d0 	bl	80181f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f003 0303 	and.w	r3, r3, #3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <mem_malloc+0x198>
 800e062:	4b18      	ldr	r3, [pc, #96]	@ (800e0c4 <mem_malloc+0x1ec>)
 800e064:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e068:	491c      	ldr	r1, [pc, #112]	@ (800e0dc <mem_malloc+0x204>)
 800e06a:	4818      	ldr	r0, [pc, #96]	@ (800e0cc <mem_malloc+0x1f4>)
 800e06c:	f00a f8c4 	bl	80181f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f003 0303 	and.w	r3, r3, #3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d006      	beq.n	800e088 <mem_malloc+0x1b0>
 800e07a:	4b12      	ldr	r3, [pc, #72]	@ (800e0c4 <mem_malloc+0x1ec>)
 800e07c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e080:	4917      	ldr	r1, [pc, #92]	@ (800e0e0 <mem_malloc+0x208>)
 800e082:	4812      	ldr	r0, [pc, #72]	@ (800e0cc <mem_malloc+0x1f4>)
 800e084:	f00a f8b8 	bl	80181f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	3308      	adds	r3, #8
 800e08c:	e011      	b.n	800e0b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e08e:	8bfb      	ldrh	r3, [r7, #30]
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff fc33 	bl	800d8fc <ptr_to_mem>
 800e096:	4603      	mov	r3, r0
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e09c:	8bfa      	ldrh	r2, [r7, #30]
 800e09e:	8bbb      	ldrh	r3, [r7, #28]
 800e0a0:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	f4ff af41 	bcc.w	800df2c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e0aa:	4804      	ldr	r0, [pc, #16]	@ (800e0bc <mem_malloc+0x1e4>)
 800e0ac:	f009 fa65 	bl	801757a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3720      	adds	r7, #32
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	2000a490 	.word	0x2000a490
 800e0c0:	2000a494 	.word	0x2000a494
 800e0c4:	08019238 	.word	0x08019238
 800e0c8:	080193fc 	.word	0x080193fc
 800e0cc:	08019280 	.word	0x08019280
 800e0d0:	2000a48c 	.word	0x2000a48c
 800e0d4:	08019410 	.word	0x08019410
 800e0d8:	0801942c 	.word	0x0801942c
 800e0dc:	0801945c 	.word	0x0801945c
 800e0e0:	0801948c 	.word	0x0801948c

0800e0e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	3303      	adds	r3, #3
 800e0fa:	f023 0303 	bic.w	r3, r3, #3
 800e0fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e011      	b.n	800e12a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	461a      	mov	r2, r3
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	4413      	add	r3, r2
 800e122:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3301      	adds	r3, #1
 800e128:	60fb      	str	r3, [r7, #12]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	885b      	ldrh	r3, [r3, #2]
 800e12e:	461a      	mov	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4293      	cmp	r3, r2
 800e134:	dbe7      	blt.n	800e106 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e136:	bf00      	nop
 800e138:	bf00      	nop
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e14a:	2300      	movs	r3, #0
 800e14c:	80fb      	strh	r3, [r7, #6]
 800e14e:	e009      	b.n	800e164 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e150:	88fb      	ldrh	r3, [r7, #6]
 800e152:	4a08      	ldr	r2, [pc, #32]	@ (800e174 <memp_init+0x30>)
 800e154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ffc3 	bl	800e0e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e15e:	88fb      	ldrh	r3, [r7, #6]
 800e160:	3301      	adds	r3, #1
 800e162:	80fb      	strh	r3, [r7, #6]
 800e164:	88fb      	ldrh	r3, [r7, #6]
 800e166:	2b0c      	cmp	r3, #12
 800e168:	d9f2      	bls.n	800e150 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e16a:	bf00      	nop
 800e16c:	bf00      	nop
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	0801bd0c 	.word	0x0801bd0c

0800e178 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e180:	f009 fa28 	bl	80175d4 <sys_arch_protect>
 800e184:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d015      	beq.n	800e1c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	6812      	ldr	r2, [r2, #0]
 800e19c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	f003 0303 	and.w	r3, r3, #3
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d006      	beq.n	800e1b6 <do_memp_malloc_pool+0x3e>
 800e1a8:	4b09      	ldr	r3, [pc, #36]	@ (800e1d0 <do_memp_malloc_pool+0x58>)
 800e1aa:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e1ae:	4909      	ldr	r1, [pc, #36]	@ (800e1d4 <do_memp_malloc_pool+0x5c>)
 800e1b0:	4809      	ldr	r0, [pc, #36]	@ (800e1d8 <do_memp_malloc_pool+0x60>)
 800e1b2:	f00a f821 	bl	80181f8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f009 fa1a 	bl	80175f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	e003      	b.n	800e1c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f009 fa15 	bl	80175f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	080194b0 	.word	0x080194b0
 800e1d4:	080194e0 	.word	0x080194e0
 800e1d8:	08019504 	.word	0x08019504

0800e1dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d106      	bne.n	800e1f8 <memp_malloc_pool+0x1c>
 800e1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e214 <memp_malloc_pool+0x38>)
 800e1ec:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e1f0:	4909      	ldr	r1, [pc, #36]	@ (800e218 <memp_malloc_pool+0x3c>)
 800e1f2:	480a      	ldr	r0, [pc, #40]	@ (800e21c <memp_malloc_pool+0x40>)
 800e1f4:	f00a f800 	bl	80181f8 <iprintf>
  if (desc == NULL) {
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <memp_malloc_pool+0x26>
    return NULL;
 800e1fe:	2300      	movs	r3, #0
 800e200:	e003      	b.n	800e20a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7ff ffb8 	bl	800e178 <do_memp_malloc_pool>
 800e208:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	080194b0 	.word	0x080194b0
 800e218:	0801952c 	.word	0x0801952c
 800e21c:	08019504 	.word	0x08019504

0800e220 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	4603      	mov	r3, r0
 800e228:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e22a:	79fb      	ldrb	r3, [r7, #7]
 800e22c:	2b0c      	cmp	r3, #12
 800e22e:	d908      	bls.n	800e242 <memp_malloc+0x22>
 800e230:	4b0a      	ldr	r3, [pc, #40]	@ (800e25c <memp_malloc+0x3c>)
 800e232:	f240 1257 	movw	r2, #343	@ 0x157
 800e236:	490a      	ldr	r1, [pc, #40]	@ (800e260 <memp_malloc+0x40>)
 800e238:	480a      	ldr	r0, [pc, #40]	@ (800e264 <memp_malloc+0x44>)
 800e23a:	f009 ffdd 	bl	80181f8 <iprintf>
 800e23e:	2300      	movs	r3, #0
 800e240:	e008      	b.n	800e254 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e242:	79fb      	ldrb	r3, [r7, #7]
 800e244:	4a08      	ldr	r2, [pc, #32]	@ (800e268 <memp_malloc+0x48>)
 800e246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff ff94 	bl	800e178 <do_memp_malloc_pool>
 800e250:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e252:	68fb      	ldr	r3, [r7, #12]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	080194b0 	.word	0x080194b0
 800e260:	08019540 	.word	0x08019540
 800e264:	08019504 	.word	0x08019504
 800e268:	0801bd0c 	.word	0x0801bd0c

0800e26c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	f003 0303 	and.w	r3, r3, #3
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d006      	beq.n	800e28e <do_memp_free_pool+0x22>
 800e280:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b8 <do_memp_free_pool+0x4c>)
 800e282:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e286:	490d      	ldr	r1, [pc, #52]	@ (800e2bc <do_memp_free_pool+0x50>)
 800e288:	480d      	ldr	r0, [pc, #52]	@ (800e2c0 <do_memp_free_pool+0x54>)
 800e28a:	f009 ffb5 	bl	80181f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e292:	f009 f99f 	bl	80175d4 <sys_arch_protect>
 800e296:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e2aa:	68b8      	ldr	r0, [r7, #8]
 800e2ac:	f009 f9a0 	bl	80175f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e2b0:	bf00      	nop
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	080194b0 	.word	0x080194b0
 800e2bc:	08019560 	.word	0x08019560
 800e2c0:	08019504 	.word	0x08019504

0800e2c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d106      	bne.n	800e2e2 <memp_free_pool+0x1e>
 800e2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e300 <memp_free_pool+0x3c>)
 800e2d6:	f240 1295 	movw	r2, #405	@ 0x195
 800e2da:	490a      	ldr	r1, [pc, #40]	@ (800e304 <memp_free_pool+0x40>)
 800e2dc:	480a      	ldr	r0, [pc, #40]	@ (800e308 <memp_free_pool+0x44>)
 800e2de:	f009 ff8b 	bl	80181f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d007      	beq.n	800e2f8 <memp_free_pool+0x34>
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d004      	beq.n	800e2f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e2ee:	6839      	ldr	r1, [r7, #0]
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff ffbb 	bl	800e26c <do_memp_free_pool>
 800e2f6:	e000      	b.n	800e2fa <memp_free_pool+0x36>
    return;
 800e2f8:	bf00      	nop
}
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	080194b0 	.word	0x080194b0
 800e304:	0801952c 	.word	0x0801952c
 800e308:	08019504 	.word	0x08019504

0800e30c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	6039      	str	r1, [r7, #0]
 800e316:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	2b0c      	cmp	r3, #12
 800e31c:	d907      	bls.n	800e32e <memp_free+0x22>
 800e31e:	4b0c      	ldr	r3, [pc, #48]	@ (800e350 <memp_free+0x44>)
 800e320:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e324:	490b      	ldr	r1, [pc, #44]	@ (800e354 <memp_free+0x48>)
 800e326:	480c      	ldr	r0, [pc, #48]	@ (800e358 <memp_free+0x4c>)
 800e328:	f009 ff66 	bl	80181f8 <iprintf>
 800e32c:	e00c      	b.n	800e348 <memp_free+0x3c>

  if (mem == NULL) {
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d008      	beq.n	800e346 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	4a09      	ldr	r2, [pc, #36]	@ (800e35c <memp_free+0x50>)
 800e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff ff94 	bl	800e26c <do_memp_free_pool>
 800e344:	e000      	b.n	800e348 <memp_free+0x3c>
    return;
 800e346:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	080194b0 	.word	0x080194b0
 800e354:	08019580 	.word	0x08019580
 800e358:	08019504 	.word	0x08019504
 800e35c:	0801bd0c 	.word	0x0801bd0c

0800e360 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e364:	bf00      	nop
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
	...

0800e370 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d108      	bne.n	800e396 <netif_add+0x26>
 800e384:	4b57      	ldr	r3, [pc, #348]	@ (800e4e4 <netif_add+0x174>)
 800e386:	f240 1227 	movw	r2, #295	@ 0x127
 800e38a:	4957      	ldr	r1, [pc, #348]	@ (800e4e8 <netif_add+0x178>)
 800e38c:	4857      	ldr	r0, [pc, #348]	@ (800e4ec <netif_add+0x17c>)
 800e38e:	f009 ff33 	bl	80181f8 <iprintf>
 800e392:	2300      	movs	r3, #0
 800e394:	e0a2      	b.n	800e4dc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d108      	bne.n	800e3ae <netif_add+0x3e>
 800e39c:	4b51      	ldr	r3, [pc, #324]	@ (800e4e4 <netif_add+0x174>)
 800e39e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e3a2:	4953      	ldr	r1, [pc, #332]	@ (800e4f0 <netif_add+0x180>)
 800e3a4:	4851      	ldr	r0, [pc, #324]	@ (800e4ec <netif_add+0x17c>)
 800e3a6:	f009 ff27 	bl	80181f8 <iprintf>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	e096      	b.n	800e4dc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e3b4:	4b4f      	ldr	r3, [pc, #316]	@ (800e4f4 <netif_add+0x184>)
 800e3b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d101      	bne.n	800e3c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e3be:	4b4d      	ldr	r3, [pc, #308]	@ (800e4f4 <netif_add+0x184>)
 800e3c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d101      	bne.n	800e3cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e3c8:	4b4a      	ldr	r3, [pc, #296]	@ (800e4f4 <netif_add+0x184>)
 800e3ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	4a45      	ldr	r2, [pc, #276]	@ (800e4f8 <netif_add+0x188>)
 800e3e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6a3a      	ldr	r2, [r7, #32]
 800e3fc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e3fe:	4b3f      	ldr	r3, [pc, #252]	@ (800e4fc <netif_add+0x18c>)
 800e400:	781a      	ldrb	r2, [r3, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e40c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f000 f913 	bl	800e640 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	4798      	blx	r3
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <netif_add+0xba>
    return NULL;
 800e426:	2300      	movs	r3, #0
 800e428:	e058      	b.n	800e4dc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e430:	2bff      	cmp	r3, #255	@ 0xff
 800e432:	d103      	bne.n	800e43c <netif_add+0xcc>
        netif->num = 0;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e440:	4b2f      	ldr	r3, [pc, #188]	@ (800e500 <netif_add+0x190>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	617b      	str	r3, [r7, #20]
 800e446:	e02b      	b.n	800e4a0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d106      	bne.n	800e45e <netif_add+0xee>
 800e450:	4b24      	ldr	r3, [pc, #144]	@ (800e4e4 <netif_add+0x174>)
 800e452:	f240 128b 	movw	r2, #395	@ 0x18b
 800e456:	492b      	ldr	r1, [pc, #172]	@ (800e504 <netif_add+0x194>)
 800e458:	4824      	ldr	r0, [pc, #144]	@ (800e4ec <netif_add+0x17c>)
 800e45a:	f009 fecd 	bl	80181f8 <iprintf>
        num_netifs++;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	3301      	adds	r3, #1
 800e462:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	2bff      	cmp	r3, #255	@ 0xff
 800e468:	dd06      	ble.n	800e478 <netif_add+0x108>
 800e46a:	4b1e      	ldr	r3, [pc, #120]	@ (800e4e4 <netif_add+0x174>)
 800e46c:	f240 128d 	movw	r2, #397	@ 0x18d
 800e470:	4925      	ldr	r1, [pc, #148]	@ (800e508 <netif_add+0x198>)
 800e472:	481e      	ldr	r0, [pc, #120]	@ (800e4ec <netif_add+0x17c>)
 800e474:	f009 fec0 	bl	80181f8 <iprintf>
        if (netif2->num == netif->num) {
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e484:	429a      	cmp	r2, r3
 800e486:	d108      	bne.n	800e49a <netif_add+0x12a>
          netif->num++;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e48e:	3301      	adds	r3, #1
 800e490:	b2da      	uxtb	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800e498:	e005      	b.n	800e4a6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	617b      	str	r3, [r7, #20]
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1d0      	bne.n	800e448 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1be      	bne.n	800e42a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4b2:	2bfe      	cmp	r3, #254	@ 0xfe
 800e4b4:	d103      	bne.n	800e4be <netif_add+0x14e>
    netif_num = 0;
 800e4b6:	4b11      	ldr	r3, [pc, #68]	@ (800e4fc <netif_add+0x18c>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	e006      	b.n	800e4cc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800e4fc <netif_add+0x18c>)
 800e4ca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e500 <netif_add+0x190>)
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e4d4:	4a0a      	ldr	r2, [pc, #40]	@ (800e500 <netif_add+0x190>)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e4da:	68fb      	ldr	r3, [r7, #12]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	0801959c 	.word	0x0801959c
 800e4e8:	08019630 	.word	0x08019630
 800e4ec:	080195ec 	.word	0x080195ec
 800e4f0:	0801964c 	.word	0x0801964c
 800e4f4:	0801bd80 	.word	0x0801bd80
 800e4f8:	0800e91b 	.word	0x0800e91b
 800e4fc:	2000d56c 	.word	0x2000d56c
 800e500:	2000d564 	.word	0x2000d564
 800e504:	08019670 	.word	0x08019670
 800e508:	08019684 	.word	0x08019684

0800e50c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f002 fb7f 	bl	8010c1c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f006 fc8d 	bl	8014e40 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e526:	bf00      	nop
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <netif_do_set_ipaddr+0x20>
 800e542:	4b1d      	ldr	r3, [pc, #116]	@ (800e5b8 <netif_do_set_ipaddr+0x88>)
 800e544:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e548:	491c      	ldr	r1, [pc, #112]	@ (800e5bc <netif_do_set_ipaddr+0x8c>)
 800e54a:	481d      	ldr	r0, [pc, #116]	@ (800e5c0 <netif_do_set_ipaddr+0x90>)
 800e54c:	f009 fe54 	bl	80181f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d106      	bne.n	800e564 <netif_do_set_ipaddr+0x34>
 800e556:	4b18      	ldr	r3, [pc, #96]	@ (800e5b8 <netif_do_set_ipaddr+0x88>)
 800e558:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e55c:	4917      	ldr	r1, [pc, #92]	@ (800e5bc <netif_do_set_ipaddr+0x8c>)
 800e55e:	4818      	ldr	r0, [pc, #96]	@ (800e5c0 <netif_do_set_ipaddr+0x90>)
 800e560:	f009 fe4a 	bl	80181f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3304      	adds	r3, #4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d01c      	beq.n	800e5ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	3304      	adds	r3, #4
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e582:	f107 0314 	add.w	r3, r7, #20
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff ffbf 	bl	800e50c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <netif_do_set_ipaddr+0x6a>
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	e000      	b.n	800e59c <netif_do_set_ipaddr+0x6c>
 800e59a:	2300      	movs	r3, #0
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e5a0:	2101      	movs	r1, #1
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f000 f8d2 	bl	800e74c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e000      	b.n	800e5ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0801959c 	.word	0x0801959c
 800e5bc:	080196b4 	.word	0x080196b4
 800e5c0:	080195ec 	.word	0x080195ec

0800e5c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d00a      	beq.n	800e5f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <netif_do_set_netmask+0x26>
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	e000      	b.n	800e5ec <netif_do_set_netmask+0x28>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e000      	b.n	800e5f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e602:	b480      	push	{r7}
 800e604:	b085      	sub	sp, #20
 800e606:	af00      	add	r7, sp, #0
 800e608:	60f8      	str	r0, [r7, #12]
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	330c      	adds	r3, #12
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d00a      	beq.n	800e632 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <netif_do_set_gw+0x26>
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	e000      	b.n	800e62a <netif_do_set_gw+0x28>
 800e628:	2300      	movs	r3, #0
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e632:	2300      	movs	r3, #0
}
 800e634:	4618      	mov	r0, r3
 800e636:	3714      	adds	r7, #20
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b088      	sub	sp, #32
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d101      	bne.n	800e660 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e65c:	4b1c      	ldr	r3, [pc, #112]	@ (800e6d0 <netif_set_addr+0x90>)
 800e65e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d101      	bne.n	800e66a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e666:	4b1a      	ldr	r3, [pc, #104]	@ (800e6d0 <netif_set_addr+0x90>)
 800e668:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d101      	bne.n	800e674 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e670:	4b17      	ldr	r3, [pc, #92]	@ (800e6d0 <netif_set_addr+0x90>)
 800e672:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d003      	beq.n	800e682 <netif_set_addr+0x42>
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d101      	bne.n	800e686 <netif_set_addr+0x46>
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <netif_set_addr+0x48>
 800e686:	2300      	movs	r3, #0
 800e688:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d006      	beq.n	800e69e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e690:	f107 0310 	add.w	r3, r7, #16
 800e694:	461a      	mov	r2, r3
 800e696:	68b9      	ldr	r1, [r7, #8]
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f7ff ff49 	bl	800e530 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	6879      	ldr	r1, [r7, #4]
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7ff ff8e 	bl	800e5c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f7ff ffa8 	bl	800e602 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e6b8:	f107 0310 	add.w	r3, r7, #16
 800e6bc:	461a      	mov	r2, r3
 800e6be:	68b9      	ldr	r1, [r7, #8]
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f7ff ff35 	bl	800e530 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e6c6:	bf00      	nop
 800e6c8:	3720      	adds	r7, #32
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	0801bd80 	.word	0x0801bd80

0800e6d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e6dc:	4a04      	ldr	r2, [pc, #16]	@ (800e6f0 <netif_set_default+0x1c>)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e6e2:	bf00      	nop
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	2000d568 	.word	0x2000d568

0800e6f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d107      	bne.n	800e712 <netif_set_up+0x1e>
 800e702:	4b0f      	ldr	r3, [pc, #60]	@ (800e740 <netif_set_up+0x4c>)
 800e704:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e708:	490e      	ldr	r1, [pc, #56]	@ (800e744 <netif_set_up+0x50>)
 800e70a:	480f      	ldr	r0, [pc, #60]	@ (800e748 <netif_set_up+0x54>)
 800e70c:	f009 fd74 	bl	80181f8 <iprintf>
 800e710:	e013      	b.n	800e73a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10c      	bne.n	800e73a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e726:	f043 0301 	orr.w	r3, r3, #1
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e732:	2103      	movs	r1, #3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 f809 	bl	800e74c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	0801959c 	.word	0x0801959c
 800e744:	08019724 	.word	0x08019724
 800e748:	080195ec 	.word	0x080195ec

0800e74c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <netif_issue_reports+0x20>
 800e75e:	4b18      	ldr	r3, [pc, #96]	@ (800e7c0 <netif_issue_reports+0x74>)
 800e760:	f240 326d 	movw	r2, #877	@ 0x36d
 800e764:	4917      	ldr	r1, [pc, #92]	@ (800e7c4 <netif_issue_reports+0x78>)
 800e766:	4818      	ldr	r0, [pc, #96]	@ (800e7c8 <netif_issue_reports+0x7c>)
 800e768:	f009 fd46 	bl	80181f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e772:	f003 0304 	and.w	r3, r3, #4
 800e776:	2b00      	cmp	r3, #0
 800e778:	d01e      	beq.n	800e7b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e780:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e784:	2b00      	cmp	r3, #0
 800e786:	d017      	beq.n	800e7b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e788:	78fb      	ldrb	r3, [r7, #3]
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d013      	beq.n	800e7ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	3304      	adds	r3, #4
 800e796:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d00e      	beq.n	800e7ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7a2:	f003 0308 	and.w	r3, r3, #8
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d007      	beq.n	800e7ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f007 faaf 	bl	8015d14 <etharp_request>
 800e7b6:	e000      	b.n	800e7ba <netif_issue_reports+0x6e>
    return;
 800e7b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	0801959c 	.word	0x0801959c
 800e7c4:	08019740 	.word	0x08019740
 800e7c8:	080195ec 	.word	0x080195ec

0800e7cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d107      	bne.n	800e7ea <netif_set_down+0x1e>
 800e7da:	4b12      	ldr	r3, [pc, #72]	@ (800e824 <netif_set_down+0x58>)
 800e7dc:	f240 329b 	movw	r2, #923	@ 0x39b
 800e7e0:	4911      	ldr	r1, [pc, #68]	@ (800e828 <netif_set_down+0x5c>)
 800e7e2:	4812      	ldr	r0, [pc, #72]	@ (800e82c <netif_set_down+0x60>)
 800e7e4:	f009 fd08 	bl	80181f8 <iprintf>
 800e7e8:	e019      	b.n	800e81e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7f0:	f003 0301 	and.w	r3, r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d012      	beq.n	800e81e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7fe:	f023 0301 	bic.w	r3, r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e810:	f003 0308 	and.w	r3, r3, #8
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f006 fe39 	bl	8015490 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	0801959c 	.word	0x0801959c
 800e828:	08019764 	.word	0x08019764
 800e82c:	080195ec 	.word	0x080195ec

0800e830 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d107      	bne.n	800e84e <netif_set_link_up+0x1e>
 800e83e:	4b13      	ldr	r3, [pc, #76]	@ (800e88c <netif_set_link_up+0x5c>)
 800e840:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e844:	4912      	ldr	r1, [pc, #72]	@ (800e890 <netif_set_link_up+0x60>)
 800e846:	4813      	ldr	r0, [pc, #76]	@ (800e894 <netif_set_link_up+0x64>)
 800e848:	f009 fcd6 	bl	80181f8 <iprintf>
 800e84c:	e01b      	b.n	800e886 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e854:	f003 0304 	and.w	r3, r3, #4
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d114      	bne.n	800e886 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e862:	f043 0304 	orr.w	r3, r3, #4
 800e866:	b2da      	uxtb	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e86e:	2103      	movs	r1, #3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7ff ff6b 	bl	800e74c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	69db      	ldr	r3, [r3, #28]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <netif_set_link_up+0x56>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	69db      	ldr	r3, [r3, #28]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	0801959c 	.word	0x0801959c
 800e890:	08019784 	.word	0x08019784
 800e894:	080195ec 	.word	0x080195ec

0800e898 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d107      	bne.n	800e8b6 <netif_set_link_down+0x1e>
 800e8a6:	4b11      	ldr	r3, [pc, #68]	@ (800e8ec <netif_set_link_down+0x54>)
 800e8a8:	f240 4206 	movw	r2, #1030	@ 0x406
 800e8ac:	4910      	ldr	r1, [pc, #64]	@ (800e8f0 <netif_set_link_down+0x58>)
 800e8ae:	4811      	ldr	r0, [pc, #68]	@ (800e8f4 <netif_set_link_down+0x5c>)
 800e8b0:	f009 fca2 	bl	80181f8 <iprintf>
 800e8b4:	e017      	b.n	800e8e6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d010      	beq.n	800e8e6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e8ca:	f023 0304 	bic.w	r3, r3, #4
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <netif_set_link_down+0x4e>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	69db      	ldr	r3, [r3, #28]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	0801959c 	.word	0x0801959c
 800e8f0:	080197a8 	.word	0x080197a8
 800e8f4:	080195ec 	.word	0x080195ec

0800e8f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	61da      	str	r2, [r3, #28]
  }
}
 800e90e:	bf00      	nop
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b085      	sub	sp, #20
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e926:	f06f 030b 	mvn.w	r3, #11
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3714      	adds	r7, #20
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
	...

0800e938 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d013      	beq.n	800e970 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e948:	4b0d      	ldr	r3, [pc, #52]	@ (800e980 <netif_get_by_index+0x48>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	e00c      	b.n	800e96a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e956:	3301      	adds	r3, #1
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	79fa      	ldrb	r2, [r7, #7]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d101      	bne.n	800e964 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	e006      	b.n	800e972 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	60fb      	str	r3, [r7, #12]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1ef      	bne.n	800e950 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3714      	adds	r7, #20
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	2000d564 	.word	0x2000d564

0800e984 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e98a:	f008 fe23 	bl	80175d4 <sys_arch_protect>
 800e98e:	6038      	str	r0, [r7, #0]
 800e990:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c8 <pbuf_free_ooseq+0x44>)
 800e992:	2200      	movs	r2, #0
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	6838      	ldr	r0, [r7, #0]
 800e998:	f008 fe2a 	bl	80175f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e99c:	4b0b      	ldr	r3, [pc, #44]	@ (800e9cc <pbuf_free_ooseq+0x48>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	607b      	str	r3, [r7, #4]
 800e9a2:	e00a      	b.n	800e9ba <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f002 f973 	bl	8010c98 <tcp_free_ooseq>
      return;
 800e9b2:	e005      	b.n	800e9c0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	607b      	str	r3, [r7, #4]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1f1      	bne.n	800e9a4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	2000d56d 	.word	0x2000d56d
 800e9cc:	2000d57c 	.word	0x2000d57c

0800e9d0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e9d8:	f7ff ffd4 	bl	800e984 <pbuf_free_ooseq>
}
 800e9dc:	bf00      	nop
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e9ea:	f008 fdf3 	bl	80175d4 <sys_arch_protect>
 800e9ee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800ea30 <pbuf_pool_is_empty+0x4c>)
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e9f6:	4b0e      	ldr	r3, [pc, #56]	@ (800ea30 <pbuf_pool_is_empty+0x4c>)
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f008 fdf7 	bl	80175f0 <sys_arch_unprotect>

  if (!queued) {
 800ea02:	78fb      	ldrb	r3, [r7, #3]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10f      	bne.n	800ea28 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ea08:	2100      	movs	r1, #0
 800ea0a:	480a      	ldr	r0, [pc, #40]	@ (800ea34 <pbuf_pool_is_empty+0x50>)
 800ea0c:	f7fe fea6 	bl	800d75c <tcpip_try_callback>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d008      	beq.n	800ea28 <pbuf_pool_is_empty+0x44>
 800ea16:	f008 fddd 	bl	80175d4 <sys_arch_protect>
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	4b04      	ldr	r3, [pc, #16]	@ (800ea30 <pbuf_pool_is_empty+0x4c>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	701a      	strb	r2, [r3, #0]
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f008 fde4 	bl	80175f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	2000d56d 	.word	0x2000d56d
 800ea34:	0800e9d1 	.word	0x0800e9d1

0800ea38 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	4611      	mov	r1, r2
 800ea44:	461a      	mov	r2, r3
 800ea46:	460b      	mov	r3, r1
 800ea48:	80fb      	strh	r3, [r7, #6]
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	88fa      	ldrh	r2, [r7, #6]
 800ea5e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	88ba      	ldrh	r2, [r7, #4]
 800ea64:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ea66:	8b3b      	ldrh	r3, [r7, #24]
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	7f3a      	ldrb	r2, [r7, #28]
 800ea72:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2201      	movs	r2, #1
 800ea78:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	73da      	strb	r2, [r3, #15]
}
 800ea80:	bf00      	nop
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b08c      	sub	sp, #48	@ 0x30
 800ea90:	af02      	add	r7, sp, #8
 800ea92:	4603      	mov	r3, r0
 800ea94:	71fb      	strb	r3, [r7, #7]
 800ea96:	460b      	mov	r3, r1
 800ea98:	80bb      	strh	r3, [r7, #4]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800eaa2:	887b      	ldrh	r3, [r7, #2]
 800eaa4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800eaa8:	d07f      	beq.n	800ebaa <pbuf_alloc+0x11e>
 800eaaa:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800eaae:	f300 80c8 	bgt.w	800ec42 <pbuf_alloc+0x1b6>
 800eab2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800eab6:	d010      	beq.n	800eada <pbuf_alloc+0x4e>
 800eab8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800eabc:	f300 80c1 	bgt.w	800ec42 <pbuf_alloc+0x1b6>
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d002      	beq.n	800eaca <pbuf_alloc+0x3e>
 800eac4:	2b41      	cmp	r3, #65	@ 0x41
 800eac6:	f040 80bc 	bne.w	800ec42 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800eaca:	887a      	ldrh	r2, [r7, #2]
 800eacc:	88bb      	ldrh	r3, [r7, #4]
 800eace:	4619      	mov	r1, r3
 800ead0:	2000      	movs	r0, #0
 800ead2:	f000 f8d1 	bl	800ec78 <pbuf_alloc_reference>
 800ead6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ead8:	e0bd      	b.n	800ec56 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800eae2:	88bb      	ldrh	r3, [r7, #4]
 800eae4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800eae6:	200c      	movs	r0, #12
 800eae8:	f7ff fb9a 	bl	800e220 <memp_malloc>
 800eaec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d109      	bne.n	800eb08 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800eaf4:	f7ff ff76 	bl	800e9e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <pbuf_alloc+0x78>
            pbuf_free(p);
 800eafe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb00:	f000 faa8 	bl	800f054 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800eb04:	2300      	movs	r3, #0
 800eb06:	e0a7      	b.n	800ec58 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800eb08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb0a:	3303      	adds	r3, #3
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	f023 0303 	bic.w	r3, r3, #3
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	8b7a      	ldrh	r2, [r7, #26]
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	bf28      	it	cs
 800eb20:	4613      	movcs	r3, r2
 800eb22:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eb24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb26:	3310      	adds	r3, #16
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	3303      	adds	r3, #3
 800eb2e:	f023 0303 	bic.w	r3, r3, #3
 800eb32:	4618      	mov	r0, r3
 800eb34:	89f9      	ldrh	r1, [r7, #14]
 800eb36:	8b7a      	ldrh	r2, [r7, #26]
 800eb38:	2300      	movs	r3, #0
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	887b      	ldrh	r3, [r7, #2]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	460b      	mov	r3, r1
 800eb42:	4601      	mov	r1, r0
 800eb44:	6938      	ldr	r0, [r7, #16]
 800eb46:	f7ff ff77 	bl	800ea38 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	f003 0303 	and.w	r3, r3, #3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d006      	beq.n	800eb64 <pbuf_alloc+0xd8>
 800eb56:	4b42      	ldr	r3, [pc, #264]	@ (800ec60 <pbuf_alloc+0x1d4>)
 800eb58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eb5c:	4941      	ldr	r1, [pc, #260]	@ (800ec64 <pbuf_alloc+0x1d8>)
 800eb5e:	4842      	ldr	r0, [pc, #264]	@ (800ec68 <pbuf_alloc+0x1dc>)
 800eb60:	f009 fb4a 	bl	80181f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eb64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb66:	3303      	adds	r3, #3
 800eb68:	f023 0303 	bic.w	r3, r3, #3
 800eb6c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800eb70:	d106      	bne.n	800eb80 <pbuf_alloc+0xf4>
 800eb72:	4b3b      	ldr	r3, [pc, #236]	@ (800ec60 <pbuf_alloc+0x1d4>)
 800eb74:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800eb78:	493c      	ldr	r1, [pc, #240]	@ (800ec6c <pbuf_alloc+0x1e0>)
 800eb7a:	483b      	ldr	r0, [pc, #236]	@ (800ec68 <pbuf_alloc+0x1dc>)
 800eb7c:	f009 fb3c 	bl	80181f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800eb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d102      	bne.n	800eb8c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb8a:	e002      	b.n	800eb92 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800eb96:	8b7a      	ldrh	r2, [r7, #26]
 800eb98:	89fb      	ldrh	r3, [r7, #14]
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800eba2:	8b7b      	ldrh	r3, [r7, #26]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d19e      	bne.n	800eae6 <pbuf_alloc+0x5a>
      break;
 800eba8:	e055      	b.n	800ec56 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ebaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ebac:	3303      	adds	r3, #3
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	f023 0303 	bic.w	r3, r3, #3
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	88bb      	ldrh	r3, [r7, #4]
 800ebb8:	3303      	adds	r3, #3
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	f023 0303 	bic.w	r3, r3, #3
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	4413      	add	r3, r2
 800ebc4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ebc6:	8b3b      	ldrh	r3, [r7, #24]
 800ebc8:	3310      	adds	r3, #16
 800ebca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ebcc:	8b3a      	ldrh	r2, [r7, #24]
 800ebce:	88bb      	ldrh	r3, [r7, #4]
 800ebd0:	3303      	adds	r3, #3
 800ebd2:	f023 0303 	bic.w	r3, r3, #3
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d306      	bcc.n	800ebe8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ebda:	8afa      	ldrh	r2, [r7, #22]
 800ebdc:	88bb      	ldrh	r3, [r7, #4]
 800ebde:	3303      	adds	r3, #3
 800ebe0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d201      	bcs.n	800ebec <pbuf_alloc+0x160>
        return NULL;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e035      	b.n	800ec58 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ebec:	8afb      	ldrh	r3, [r7, #22]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff f972 	bl	800ded8 <mem_malloc>
 800ebf4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ebf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d101      	bne.n	800ec00 <pbuf_alloc+0x174>
        return NULL;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	e02b      	b.n	800ec58 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ec00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec02:	3310      	adds	r3, #16
 800ec04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec06:	4413      	add	r3, r2
 800ec08:	3303      	adds	r3, #3
 800ec0a:	f023 0303 	bic.w	r3, r3, #3
 800ec0e:	4618      	mov	r0, r3
 800ec10:	88b9      	ldrh	r1, [r7, #4]
 800ec12:	88ba      	ldrh	r2, [r7, #4]
 800ec14:	2300      	movs	r3, #0
 800ec16:	9301      	str	r3, [sp, #4]
 800ec18:	887b      	ldrh	r3, [r7, #2]
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	4601      	mov	r1, r0
 800ec20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec22:	f7ff ff09 	bl	800ea38 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	f003 0303 	and.w	r3, r3, #3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d010      	beq.n	800ec54 <pbuf_alloc+0x1c8>
 800ec32:	4b0b      	ldr	r3, [pc, #44]	@ (800ec60 <pbuf_alloc+0x1d4>)
 800ec34:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800ec38:	490d      	ldr	r1, [pc, #52]	@ (800ec70 <pbuf_alloc+0x1e4>)
 800ec3a:	480b      	ldr	r0, [pc, #44]	@ (800ec68 <pbuf_alloc+0x1dc>)
 800ec3c:	f009 fadc 	bl	80181f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ec40:	e008      	b.n	800ec54 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ec42:	4b07      	ldr	r3, [pc, #28]	@ (800ec60 <pbuf_alloc+0x1d4>)
 800ec44:	f240 1227 	movw	r2, #295	@ 0x127
 800ec48:	490a      	ldr	r1, [pc, #40]	@ (800ec74 <pbuf_alloc+0x1e8>)
 800ec4a:	4807      	ldr	r0, [pc, #28]	@ (800ec68 <pbuf_alloc+0x1dc>)
 800ec4c:	f009 fad4 	bl	80181f8 <iprintf>
      return NULL;
 800ec50:	2300      	movs	r3, #0
 800ec52:	e001      	b.n	800ec58 <pbuf_alloc+0x1cc>
      break;
 800ec54:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ec56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3728      	adds	r7, #40	@ 0x28
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	080197cc 	.word	0x080197cc
 800ec64:	080197fc 	.word	0x080197fc
 800ec68:	0801982c 	.word	0x0801982c
 800ec6c:	08019854 	.word	0x08019854
 800ec70:	08019888 	.word	0x08019888
 800ec74:	080198b4 	.word	0x080198b4

0800ec78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	460b      	mov	r3, r1
 800ec82:	807b      	strh	r3, [r7, #2]
 800ec84:	4613      	mov	r3, r2
 800ec86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ec88:	883b      	ldrh	r3, [r7, #0]
 800ec8a:	2b41      	cmp	r3, #65	@ 0x41
 800ec8c:	d009      	beq.n	800eca2 <pbuf_alloc_reference+0x2a>
 800ec8e:	883b      	ldrh	r3, [r7, #0]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d006      	beq.n	800eca2 <pbuf_alloc_reference+0x2a>
 800ec94:	4b0f      	ldr	r3, [pc, #60]	@ (800ecd4 <pbuf_alloc_reference+0x5c>)
 800ec96:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ec9a:	490f      	ldr	r1, [pc, #60]	@ (800ecd8 <pbuf_alloc_reference+0x60>)
 800ec9c:	480f      	ldr	r0, [pc, #60]	@ (800ecdc <pbuf_alloc_reference+0x64>)
 800ec9e:	f009 faab 	bl	80181f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eca2:	200b      	movs	r0, #11
 800eca4:	f7ff fabc 	bl	800e220 <memp_malloc>
 800eca8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e00b      	b.n	800eccc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ecb4:	8879      	ldrh	r1, [r7, #2]
 800ecb6:	887a      	ldrh	r2, [r7, #2]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	9301      	str	r3, [sp, #4]
 800ecbc:	883b      	ldrh	r3, [r7, #0]
 800ecbe:	9300      	str	r3, [sp, #0]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	6879      	ldr	r1, [r7, #4]
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f7ff feb7 	bl	800ea38 <pbuf_init_alloced_pbuf>
  return p;
 800ecca:	68fb      	ldr	r3, [r7, #12]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3710      	adds	r7, #16
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	080197cc 	.word	0x080197cc
 800ecd8:	080198d0 	.word	0x080198d0
 800ecdc:	0801982c 	.word	0x0801982c

0800ece0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af02      	add	r7, sp, #8
 800ece6:	607b      	str	r3, [r7, #4]
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
 800ecec:	460b      	mov	r3, r1
 800ecee:	81bb      	strh	r3, [r7, #12]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ecf4:	7bfb      	ldrb	r3, [r7, #15]
 800ecf6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ecf8:	8a7b      	ldrh	r3, [r7, #18]
 800ecfa:	3303      	adds	r3, #3
 800ecfc:	f023 0203 	bic.w	r2, r3, #3
 800ed00:	89bb      	ldrh	r3, [r7, #12]
 800ed02:	441a      	add	r2, r3
 800ed04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d901      	bls.n	800ed0e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e018      	b.n	800ed40 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ed0e:	6a3b      	ldr	r3, [r7, #32]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d007      	beq.n	800ed24 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ed14:	8a7b      	ldrh	r3, [r7, #18]
 800ed16:	3303      	adds	r3, #3
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	6a3a      	ldr	r2, [r7, #32]
 800ed1e:	4413      	add	r3, r2
 800ed20:	617b      	str	r3, [r7, #20]
 800ed22:	e001      	b.n	800ed28 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	89b9      	ldrh	r1, [r7, #12]
 800ed2c:	89ba      	ldrh	r2, [r7, #12]
 800ed2e:	2302      	movs	r3, #2
 800ed30:	9301      	str	r3, [sp, #4]
 800ed32:	897b      	ldrh	r3, [r7, #10]
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	460b      	mov	r3, r1
 800ed38:	6979      	ldr	r1, [r7, #20]
 800ed3a:	f7ff fe7d 	bl	800ea38 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ed3e:	687b      	ldr	r3, [r7, #4]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3718      	adds	r7, #24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <pbuf_realloc+0x20>
 800ed5a:	4b3a      	ldr	r3, [pc, #232]	@ (800ee44 <pbuf_realloc+0xfc>)
 800ed5c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ed60:	4939      	ldr	r1, [pc, #228]	@ (800ee48 <pbuf_realloc+0x100>)
 800ed62:	483a      	ldr	r0, [pc, #232]	@ (800ee4c <pbuf_realloc+0x104>)
 800ed64:	f009 fa48 	bl	80181f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	891b      	ldrh	r3, [r3, #8]
 800ed6c:	887a      	ldrh	r2, [r7, #2]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d263      	bcs.n	800ee3a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	891a      	ldrh	r2, [r3, #8]
 800ed76:	887b      	ldrh	r3, [r7, #2]
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ed7c:	887b      	ldrh	r3, [r7, #2]
 800ed7e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ed84:	e018      	b.n	800edb8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	895b      	ldrh	r3, [r3, #10]
 800ed8a:	897a      	ldrh	r2, [r7, #10]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	891a      	ldrh	r2, [r3, #8]
 800ed94:	893b      	ldrh	r3, [r7, #8]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d106      	bne.n	800edb8 <pbuf_realloc+0x70>
 800edaa:	4b26      	ldr	r3, [pc, #152]	@ (800ee44 <pbuf_realloc+0xfc>)
 800edac:	f240 12af 	movw	r2, #431	@ 0x1af
 800edb0:	4927      	ldr	r1, [pc, #156]	@ (800ee50 <pbuf_realloc+0x108>)
 800edb2:	4826      	ldr	r0, [pc, #152]	@ (800ee4c <pbuf_realloc+0x104>)
 800edb4:	f009 fa20 	bl	80181f8 <iprintf>
  while (rem_len > q->len) {
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	895b      	ldrh	r3, [r3, #10]
 800edbc:	897a      	ldrh	r2, [r7, #10]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d8e1      	bhi.n	800ed86 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	7b1b      	ldrb	r3, [r3, #12]
 800edc6:	f003 030f 	and.w	r3, r3, #15
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d121      	bne.n	800ee12 <pbuf_realloc+0xca>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	895b      	ldrh	r3, [r3, #10]
 800edd2:	897a      	ldrh	r2, [r7, #10]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d01c      	beq.n	800ee12 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	7b5b      	ldrb	r3, [r3, #13]
 800eddc:	f003 0302 	and.w	r3, r3, #2
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d116      	bne.n	800ee12 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	685a      	ldr	r2, [r3, #4]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	b29a      	uxth	r2, r3
 800edee:	897b      	ldrh	r3, [r7, #10]
 800edf0:	4413      	add	r3, r2
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	4619      	mov	r1, r3
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7fe ff64 	bl	800dcc4 <mem_trim>
 800edfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d106      	bne.n	800ee12 <pbuf_realloc+0xca>
 800ee04:	4b0f      	ldr	r3, [pc, #60]	@ (800ee44 <pbuf_realloc+0xfc>)
 800ee06:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ee0a:	4912      	ldr	r1, [pc, #72]	@ (800ee54 <pbuf_realloc+0x10c>)
 800ee0c:	480f      	ldr	r0, [pc, #60]	@ (800ee4c <pbuf_realloc+0x104>)
 800ee0e:	f009 f9f3 	bl	80181f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	897a      	ldrh	r2, [r7, #10]
 800ee16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	895a      	ldrh	r2, [r3, #10]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 f911 	bl	800f054 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	e000      	b.n	800ee3c <pbuf_realloc+0xf4>
    return;
 800ee3a:	bf00      	nop

}
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	080197cc 	.word	0x080197cc
 800ee48:	080198e4 	.word	0x080198e4
 800ee4c:	0801982c 	.word	0x0801982c
 800ee50:	080198fc 	.word	0x080198fc
 800ee54:	08019914 	.word	0x08019914

0800ee58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	4613      	mov	r3, r2
 800ee64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d106      	bne.n	800ee7a <pbuf_add_header_impl+0x22>
 800ee6c:	4b2b      	ldr	r3, [pc, #172]	@ (800ef1c <pbuf_add_header_impl+0xc4>)
 800ee6e:	f240 12df 	movw	r2, #479	@ 0x1df
 800ee72:	492b      	ldr	r1, [pc, #172]	@ (800ef20 <pbuf_add_header_impl+0xc8>)
 800ee74:	482b      	ldr	r0, [pc, #172]	@ (800ef24 <pbuf_add_header_impl+0xcc>)
 800ee76:	f009 f9bf 	bl	80181f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d003      	beq.n	800ee88 <pbuf_add_header_impl+0x30>
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee86:	d301      	bcc.n	800ee8c <pbuf_add_header_impl+0x34>
    return 1;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e043      	b.n	800ef14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <pbuf_add_header_impl+0x3e>
    return 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	e03e      	b.n	800ef14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	891a      	ldrh	r2, [r3, #8]
 800ee9e:	8a7b      	ldrh	r3, [r7, #18]
 800eea0:	4413      	add	r3, r2
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	8a7a      	ldrh	r2, [r7, #18]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d901      	bls.n	800eeae <pbuf_add_header_impl+0x56>
    return 1;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e032      	b.n	800ef14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	7b1b      	ldrb	r3, [r3, #12]
 800eeb2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eeb4:	8a3b      	ldrh	r3, [r7, #16]
 800eeb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00c      	beq.n	800eed8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	425b      	negs	r3, r3
 800eec6:	4413      	add	r3, r2
 800eec8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	3310      	adds	r3, #16
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d20d      	bcs.n	800eef0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800eed4:	2301      	movs	r3, #1
 800eed6:	e01d      	b.n	800ef14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d006      	beq.n	800eeec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	685a      	ldr	r2, [r3, #4]
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	425b      	negs	r3, r3
 800eee6:	4413      	add	r3, r2
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	e001      	b.n	800eef0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800eeec:	2301      	movs	r3, #1
 800eeee:	e011      	b.n	800ef14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	697a      	ldr	r2, [r7, #20]
 800eef4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	895a      	ldrh	r2, [r3, #10]
 800eefa:	8a7b      	ldrh	r3, [r7, #18]
 800eefc:	4413      	add	r3, r2
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	891a      	ldrh	r2, [r3, #8]
 800ef08:	8a7b      	ldrh	r3, [r7, #18]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	811a      	strh	r2, [r3, #8]


  return 0;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	080197cc 	.word	0x080197cc
 800ef20:	08019930 	.word	0x08019930
 800ef24:	0801982c 	.word	0x0801982c

0800ef28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ef32:	2200      	movs	r2, #0
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7ff ff8e 	bl	800ee58 <pbuf_add_header_impl>
 800ef3c:	4603      	mov	r3, r0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
	...

0800ef48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <pbuf_remove_header+0x1e>
 800ef58:	4b20      	ldr	r3, [pc, #128]	@ (800efdc <pbuf_remove_header+0x94>)
 800ef5a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ef5e:	4920      	ldr	r1, [pc, #128]	@ (800efe0 <pbuf_remove_header+0x98>)
 800ef60:	4820      	ldr	r0, [pc, #128]	@ (800efe4 <pbuf_remove_header+0x9c>)
 800ef62:	f009 f949 	bl	80181f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <pbuf_remove_header+0x2c>
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef72:	d301      	bcc.n	800ef78 <pbuf_remove_header+0x30>
    return 1;
 800ef74:	2301      	movs	r3, #1
 800ef76:	e02c      	b.n	800efd2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d101      	bne.n	800ef82 <pbuf_remove_header+0x3a>
    return 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	e027      	b.n	800efd2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	895b      	ldrh	r3, [r3, #10]
 800ef8a:	89fa      	ldrh	r2, [r7, #14]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d908      	bls.n	800efa2 <pbuf_remove_header+0x5a>
 800ef90:	4b12      	ldr	r3, [pc, #72]	@ (800efdc <pbuf_remove_header+0x94>)
 800ef92:	f240 2255 	movw	r2, #597	@ 0x255
 800ef96:	4914      	ldr	r1, [pc, #80]	@ (800efe8 <pbuf_remove_header+0xa0>)
 800ef98:	4812      	ldr	r0, [pc, #72]	@ (800efe4 <pbuf_remove_header+0x9c>)
 800ef9a:	f009 f92d 	bl	80181f8 <iprintf>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e017      	b.n	800efd2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	441a      	add	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	895a      	ldrh	r2, [r3, #10]
 800efb8:	89fb      	ldrh	r3, [r7, #14]
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	891a      	ldrh	r2, [r3, #8]
 800efc6:	89fb      	ldrh	r3, [r7, #14]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	080197cc 	.word	0x080197cc
 800efe0:	08019930 	.word	0x08019930
 800efe4:	0801982c 	.word	0x0801982c
 800efe8:	0801993c 	.word	0x0801993c

0800efec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	460b      	mov	r3, r1
 800eff6:	807b      	strh	r3, [r7, #2]
 800eff8:	4613      	mov	r3, r2
 800effa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800effc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f000:	2b00      	cmp	r3, #0
 800f002:	da08      	bge.n	800f016 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f004:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f008:	425b      	negs	r3, r3
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7ff ff9b 	bl	800ef48 <pbuf_remove_header>
 800f012:	4603      	mov	r3, r0
 800f014:	e007      	b.n	800f026 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f016:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f01a:	787a      	ldrb	r2, [r7, #1]
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7ff ff1a 	bl	800ee58 <pbuf_add_header_impl>
 800f024:	4603      	mov	r3, r0
  }
}
 800f026:	4618      	mov	r0, r3
 800f028:	3708      	adds	r7, #8
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b082      	sub	sp, #8
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	460b      	mov	r3, r1
 800f038:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f03a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f03e:	2201      	movs	r2, #1
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7ff ffd2 	bl	800efec <pbuf_header_impl>
 800f048:	4603      	mov	r3, r0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
	...

0800f054 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b088      	sub	sp, #32
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10b      	bne.n	800f07a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d106      	bne.n	800f076 <pbuf_free+0x22>
 800f068:	4b3b      	ldr	r3, [pc, #236]	@ (800f158 <pbuf_free+0x104>)
 800f06a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f06e:	493b      	ldr	r1, [pc, #236]	@ (800f15c <pbuf_free+0x108>)
 800f070:	483b      	ldr	r0, [pc, #236]	@ (800f160 <pbuf_free+0x10c>)
 800f072:	f009 f8c1 	bl	80181f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f076:	2300      	movs	r3, #0
 800f078:	e069      	b.n	800f14e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f07e:	e062      	b.n	800f146 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f080:	f008 faa8 	bl	80175d4 <sys_arch_protect>
 800f084:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	7b9b      	ldrb	r3, [r3, #14]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d106      	bne.n	800f09c <pbuf_free+0x48>
 800f08e:	4b32      	ldr	r3, [pc, #200]	@ (800f158 <pbuf_free+0x104>)
 800f090:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f094:	4933      	ldr	r1, [pc, #204]	@ (800f164 <pbuf_free+0x110>)
 800f096:	4832      	ldr	r0, [pc, #200]	@ (800f160 <pbuf_free+0x10c>)
 800f098:	f009 f8ae 	bl	80181f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7b9b      	ldrb	r3, [r3, #14]
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	739a      	strb	r2, [r3, #14]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7b9b      	ldrb	r3, [r3, #14]
 800f0ac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f0ae:	69b8      	ldr	r0, [r7, #24]
 800f0b0:	f008 fa9e 	bl	80175f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f0b4:	7dfb      	ldrb	r3, [r7, #23]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d143      	bne.n	800f142 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7b1b      	ldrb	r3, [r3, #12]
 800f0c4:	f003 030f 	and.w	r3, r3, #15
 800f0c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	7b5b      	ldrb	r3, [r3, #13]
 800f0ce:	f003 0302 	and.w	r3, r3, #2
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d011      	beq.n	800f0fa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d106      	bne.n	800f0f0 <pbuf_free+0x9c>
 800f0e2:	4b1d      	ldr	r3, [pc, #116]	@ (800f158 <pbuf_free+0x104>)
 800f0e4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f0e8:	491f      	ldr	r1, [pc, #124]	@ (800f168 <pbuf_free+0x114>)
 800f0ea:	481d      	ldr	r0, [pc, #116]	@ (800f160 <pbuf_free+0x10c>)
 800f0ec:	f009 f884 	bl	80181f8 <iprintf>
        pc->custom_free_function(p);
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	4798      	blx	r3
 800f0f8:	e01d      	b.n	800f136 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	d104      	bne.n	800f10a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f100:	6879      	ldr	r1, [r7, #4]
 800f102:	200c      	movs	r0, #12
 800f104:	f7ff f902 	bl	800e30c <memp_free>
 800f108:	e015      	b.n	800f136 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d104      	bne.n	800f11a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f110:	6879      	ldr	r1, [r7, #4]
 800f112:	200b      	movs	r0, #11
 800f114:	f7ff f8fa 	bl	800e30c <memp_free>
 800f118:	e00d      	b.n	800f136 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d103      	bne.n	800f128 <pbuf_free+0xd4>
          mem_free(p);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7fe fd3f 	bl	800dba4 <mem_free>
 800f126:	e006      	b.n	800f136 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f128:	4b0b      	ldr	r3, [pc, #44]	@ (800f158 <pbuf_free+0x104>)
 800f12a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f12e:	490f      	ldr	r1, [pc, #60]	@ (800f16c <pbuf_free+0x118>)
 800f130:	480b      	ldr	r0, [pc, #44]	@ (800f160 <pbuf_free+0x10c>)
 800f132:	f009 f861 	bl	80181f8 <iprintf>
        }
      }
      count++;
 800f136:	7ffb      	ldrb	r3, [r7, #31]
 800f138:	3301      	adds	r3, #1
 800f13a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	607b      	str	r3, [r7, #4]
 800f140:	e001      	b.n	800f146 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f142:	2300      	movs	r3, #0
 800f144:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d199      	bne.n	800f080 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f14c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3720      	adds	r7, #32
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	080197cc 	.word	0x080197cc
 800f15c:	08019930 	.word	0x08019930
 800f160:	0801982c 	.word	0x0801982c
 800f164:	0801995c 	.word	0x0801995c
 800f168:	08019974 	.word	0x08019974
 800f16c:	08019998 	.word	0x08019998

0800f170 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f178:	2300      	movs	r3, #0
 800f17a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f17c:	e005      	b.n	800f18a <pbuf_clen+0x1a>
    ++len;
 800f17e:	89fb      	ldrh	r3, [r7, #14]
 800f180:	3301      	adds	r3, #1
 800f182:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1f6      	bne.n	800f17e <pbuf_clen+0xe>
  }
  return len;
 800f190:	89fb      	ldrh	r3, [r7, #14]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
	...

0800f1a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d016      	beq.n	800f1dc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f1ae:	f008 fa11 	bl	80175d4 <sys_arch_protect>
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	7b9b      	ldrb	r3, [r3, #14]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	739a      	strb	r2, [r3, #14]
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f008 fa15 	bl	80175f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	7b9b      	ldrb	r3, [r3, #14]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d106      	bne.n	800f1dc <pbuf_ref+0x3c>
 800f1ce:	4b05      	ldr	r3, [pc, #20]	@ (800f1e4 <pbuf_ref+0x44>)
 800f1d0:	f240 3242 	movw	r2, #834	@ 0x342
 800f1d4:	4904      	ldr	r1, [pc, #16]	@ (800f1e8 <pbuf_ref+0x48>)
 800f1d6:	4805      	ldr	r0, [pc, #20]	@ (800f1ec <pbuf_ref+0x4c>)
 800f1d8:	f009 f80e 	bl	80181f8 <iprintf>
  }
}
 800f1dc:	bf00      	nop
 800f1de:	3710      	adds	r7, #16
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	080197cc 	.word	0x080197cc
 800f1e8:	080199ac 	.word	0x080199ac
 800f1ec:	0801982c 	.word	0x0801982c

0800f1f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <pbuf_cat+0x16>
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d107      	bne.n	800f216 <pbuf_cat+0x26>
 800f206:	4b20      	ldr	r3, [pc, #128]	@ (800f288 <pbuf_cat+0x98>)
 800f208:	f240 3259 	movw	r2, #857	@ 0x359
 800f20c:	491f      	ldr	r1, [pc, #124]	@ (800f28c <pbuf_cat+0x9c>)
 800f20e:	4820      	ldr	r0, [pc, #128]	@ (800f290 <pbuf_cat+0xa0>)
 800f210:	f008 fff2 	bl	80181f8 <iprintf>
 800f214:	e034      	b.n	800f280 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	60fb      	str	r3, [r7, #12]
 800f21a:	e00a      	b.n	800f232 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	891a      	ldrh	r2, [r3, #8]
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	891b      	ldrh	r3, [r3, #8]
 800f224:	4413      	add	r3, r2
 800f226:	b29a      	uxth	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	60fb      	str	r3, [r7, #12]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1f0      	bne.n	800f21c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	891a      	ldrh	r2, [r3, #8]
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	895b      	ldrh	r3, [r3, #10]
 800f242:	429a      	cmp	r2, r3
 800f244:	d006      	beq.n	800f254 <pbuf_cat+0x64>
 800f246:	4b10      	ldr	r3, [pc, #64]	@ (800f288 <pbuf_cat+0x98>)
 800f248:	f240 3262 	movw	r2, #866	@ 0x362
 800f24c:	4911      	ldr	r1, [pc, #68]	@ (800f294 <pbuf_cat+0xa4>)
 800f24e:	4810      	ldr	r0, [pc, #64]	@ (800f290 <pbuf_cat+0xa0>)
 800f250:	f008 ffd2 	bl	80181f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d006      	beq.n	800f26a <pbuf_cat+0x7a>
 800f25c:	4b0a      	ldr	r3, [pc, #40]	@ (800f288 <pbuf_cat+0x98>)
 800f25e:	f240 3263 	movw	r2, #867	@ 0x363
 800f262:	490d      	ldr	r1, [pc, #52]	@ (800f298 <pbuf_cat+0xa8>)
 800f264:	480a      	ldr	r0, [pc, #40]	@ (800f290 <pbuf_cat+0xa0>)
 800f266:	f008 ffc7 	bl	80181f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	891a      	ldrh	r2, [r3, #8]
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	891b      	ldrh	r3, [r3, #8]
 800f272:	4413      	add	r3, r2
 800f274:	b29a      	uxth	r2, r3
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	080197cc 	.word	0x080197cc
 800f28c:	080199c0 	.word	0x080199c0
 800f290:	0801982c 	.word	0x0801982c
 800f294:	080199f8 	.word	0x080199f8
 800f298:	08019a28 	.word	0x08019a28

0800f29c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	617b      	str	r3, [r7, #20]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d008      	beq.n	800f2c6 <pbuf_copy+0x2a>
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d005      	beq.n	800f2c6 <pbuf_copy+0x2a>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	891a      	ldrh	r2, [r3, #8]
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	891b      	ldrh	r3, [r3, #8]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d209      	bcs.n	800f2da <pbuf_copy+0x3e>
 800f2c6:	4b57      	ldr	r3, [pc, #348]	@ (800f424 <pbuf_copy+0x188>)
 800f2c8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f2cc:	4956      	ldr	r1, [pc, #344]	@ (800f428 <pbuf_copy+0x18c>)
 800f2ce:	4857      	ldr	r0, [pc, #348]	@ (800f42c <pbuf_copy+0x190>)
 800f2d0:	f008 ff92 	bl	80181f8 <iprintf>
 800f2d4:	f06f 030f 	mvn.w	r3, #15
 800f2d8:	e09f      	b.n	800f41a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	895b      	ldrh	r3, [r3, #10]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	1ad2      	subs	r2, r2, r3
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	895b      	ldrh	r3, [r3, #10]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	1acb      	subs	r3, r1, r3
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d306      	bcc.n	800f300 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	895b      	ldrh	r3, [r3, #10]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	e005      	b.n	800f30c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	895b      	ldrh	r3, [r3, #10]
 800f304:	461a      	mov	r2, r3
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685a      	ldr	r2, [r3, #4]
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	18d0      	adds	r0, r2, r3
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685a      	ldr	r2, [r3, #4]
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	4413      	add	r3, r2
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	4619      	mov	r1, r3
 800f320:	f009 f89b 	bl	801845a <memcpy>
    offset_to += len;
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	4413      	add	r3, r2
 800f32a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	4413      	add	r3, r2
 800f332:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	895b      	ldrh	r3, [r3, #10]
 800f338:	461a      	mov	r2, r3
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d906      	bls.n	800f34e <pbuf_copy+0xb2>
 800f340:	4b38      	ldr	r3, [pc, #224]	@ (800f424 <pbuf_copy+0x188>)
 800f342:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f346:	493a      	ldr	r1, [pc, #232]	@ (800f430 <pbuf_copy+0x194>)
 800f348:	4838      	ldr	r0, [pc, #224]	@ (800f42c <pbuf_copy+0x190>)
 800f34a:	f008 ff55 	bl	80181f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	895b      	ldrh	r3, [r3, #10]
 800f352:	461a      	mov	r2, r3
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	4293      	cmp	r3, r2
 800f358:	d906      	bls.n	800f368 <pbuf_copy+0xcc>
 800f35a:	4b32      	ldr	r3, [pc, #200]	@ (800f424 <pbuf_copy+0x188>)
 800f35c:	f240 32da 	movw	r2, #986	@ 0x3da
 800f360:	4934      	ldr	r1, [pc, #208]	@ (800f434 <pbuf_copy+0x198>)
 800f362:	4832      	ldr	r0, [pc, #200]	@ (800f42c <pbuf_copy+0x190>)
 800f364:	f008 ff48 	bl	80181f8 <iprintf>
    if (offset_from >= p_from->len) {
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	895b      	ldrh	r3, [r3, #10]
 800f36c:	461a      	mov	r2, r3
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	4293      	cmp	r3, r2
 800f372:	d304      	bcc.n	800f37e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	895b      	ldrh	r3, [r3, #10]
 800f382:	461a      	mov	r2, r3
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	4293      	cmp	r3, r2
 800f388:	d114      	bne.n	800f3b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f38a:	2300      	movs	r3, #0
 800f38c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d10c      	bne.n	800f3b4 <pbuf_copy+0x118>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d009      	beq.n	800f3b4 <pbuf_copy+0x118>
 800f3a0:	4b20      	ldr	r3, [pc, #128]	@ (800f424 <pbuf_copy+0x188>)
 800f3a2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f3a6:	4924      	ldr	r1, [pc, #144]	@ (800f438 <pbuf_copy+0x19c>)
 800f3a8:	4820      	ldr	r0, [pc, #128]	@ (800f42c <pbuf_copy+0x190>)
 800f3aa:	f008 ff25 	bl	80181f8 <iprintf>
 800f3ae:	f06f 030f 	mvn.w	r3, #15
 800f3b2:	e032      	b.n	800f41a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d013      	beq.n	800f3e2 <pbuf_copy+0x146>
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	895a      	ldrh	r2, [r3, #10]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	891b      	ldrh	r3, [r3, #8]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d10d      	bne.n	800f3e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d009      	beq.n	800f3e2 <pbuf_copy+0x146>
 800f3ce:	4b15      	ldr	r3, [pc, #84]	@ (800f424 <pbuf_copy+0x188>)
 800f3d0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f3d4:	4919      	ldr	r1, [pc, #100]	@ (800f43c <pbuf_copy+0x1a0>)
 800f3d6:	4815      	ldr	r0, [pc, #84]	@ (800f42c <pbuf_copy+0x190>)
 800f3d8:	f008 ff0e 	bl	80181f8 <iprintf>
 800f3dc:	f06f 0305 	mvn.w	r3, #5
 800f3e0:	e01b      	b.n	800f41a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d013      	beq.n	800f410 <pbuf_copy+0x174>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	895a      	ldrh	r2, [r3, #10]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	891b      	ldrh	r3, [r3, #8]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d10d      	bne.n	800f410 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d009      	beq.n	800f410 <pbuf_copy+0x174>
 800f3fc:	4b09      	ldr	r3, [pc, #36]	@ (800f424 <pbuf_copy+0x188>)
 800f3fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f402:	490e      	ldr	r1, [pc, #56]	@ (800f43c <pbuf_copy+0x1a0>)
 800f404:	4809      	ldr	r0, [pc, #36]	@ (800f42c <pbuf_copy+0x190>)
 800f406:	f008 fef7 	bl	80181f8 <iprintf>
 800f40a:	f06f 0305 	mvn.w	r3, #5
 800f40e:	e004      	b.n	800f41a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	f47f af61 	bne.w	800f2da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3718      	adds	r7, #24
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	080197cc 	.word	0x080197cc
 800f428:	08019a74 	.word	0x08019a74
 800f42c:	0801982c 	.word	0x0801982c
 800f430:	08019aa4 	.word	0x08019aa4
 800f434:	08019abc 	.word	0x08019abc
 800f438:	08019ad8 	.word	0x08019ad8
 800f43c:	08019ae8 	.word	0x08019ae8

0800f440 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b088      	sub	sp, #32
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	4611      	mov	r1, r2
 800f44c:	461a      	mov	r2, r3
 800f44e:	460b      	mov	r3, r1
 800f450:	80fb      	strh	r3, [r7, #6]
 800f452:	4613      	mov	r3, r2
 800f454:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f456:	2300      	movs	r3, #0
 800f458:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f45a:	2300      	movs	r3, #0
 800f45c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d108      	bne.n	800f476 <pbuf_copy_partial+0x36>
 800f464:	4b2b      	ldr	r3, [pc, #172]	@ (800f514 <pbuf_copy_partial+0xd4>)
 800f466:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f46a:	492b      	ldr	r1, [pc, #172]	@ (800f518 <pbuf_copy_partial+0xd8>)
 800f46c:	482b      	ldr	r0, [pc, #172]	@ (800f51c <pbuf_copy_partial+0xdc>)
 800f46e:	f008 fec3 	bl	80181f8 <iprintf>
 800f472:	2300      	movs	r3, #0
 800f474:	e04a      	b.n	800f50c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d108      	bne.n	800f48e <pbuf_copy_partial+0x4e>
 800f47c:	4b25      	ldr	r3, [pc, #148]	@ (800f514 <pbuf_copy_partial+0xd4>)
 800f47e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f482:	4927      	ldr	r1, [pc, #156]	@ (800f520 <pbuf_copy_partial+0xe0>)
 800f484:	4825      	ldr	r0, [pc, #148]	@ (800f51c <pbuf_copy_partial+0xdc>)
 800f486:	f008 feb7 	bl	80181f8 <iprintf>
 800f48a:	2300      	movs	r3, #0
 800f48c:	e03e      	b.n	800f50c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	61fb      	str	r3, [r7, #28]
 800f492:	e034      	b.n	800f4fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f494:	88bb      	ldrh	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00a      	beq.n	800f4b0 <pbuf_copy_partial+0x70>
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	895b      	ldrh	r3, [r3, #10]
 800f49e:	88ba      	ldrh	r2, [r7, #4]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d305      	bcc.n	800f4b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	895b      	ldrh	r3, [r3, #10]
 800f4a8:	88ba      	ldrh	r2, [r7, #4]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	80bb      	strh	r3, [r7, #4]
 800f4ae:	e023      	b.n	800f4f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	895a      	ldrh	r2, [r3, #10]
 800f4b4:	88bb      	ldrh	r3, [r7, #4]
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f4ba:	8b3a      	ldrh	r2, [r7, #24]
 800f4bc:	88fb      	ldrh	r3, [r7, #6]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d901      	bls.n	800f4c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f4c2:	88fb      	ldrh	r3, [r7, #6]
 800f4c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f4c6:	8b7b      	ldrh	r3, [r7, #26]
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	18d0      	adds	r0, r2, r3
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	685a      	ldr	r2, [r3, #4]
 800f4d0:	88bb      	ldrh	r3, [r7, #4]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	8b3a      	ldrh	r2, [r7, #24]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	f008 ffbf 	bl	801845a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f4dc:	8afa      	ldrh	r2, [r7, #22]
 800f4de:	8b3b      	ldrh	r3, [r7, #24]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f4e4:	8b7a      	ldrh	r2, [r7, #26]
 800f4e6:	8b3b      	ldrh	r3, [r7, #24]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f4ec:	88fa      	ldrh	r2, [r7, #6]
 800f4ee:	8b3b      	ldrh	r3, [r7, #24]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	61fb      	str	r3, [r7, #28]
 800f4fe:	88fb      	ldrh	r3, [r7, #6]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <pbuf_copy_partial+0xca>
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d1c4      	bne.n	800f494 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f50a:	8afb      	ldrh	r3, [r7, #22]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3720      	adds	r7, #32
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	080197cc 	.word	0x080197cc
 800f518:	08019b14 	.word	0x08019b14
 800f51c:	0801982c 	.word	0x0801982c
 800f520:	08019b34 	.word	0x08019b34

0800f524 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	4603      	mov	r3, r0
 800f52c:	603a      	str	r2, [r7, #0]
 800f52e:	71fb      	strb	r3, [r7, #7]
 800f530:	460b      	mov	r3, r1
 800f532:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	8919      	ldrh	r1, [r3, #8]
 800f538:	88ba      	ldrh	r2, [r7, #4]
 800f53a:	79fb      	ldrb	r3, [r7, #7]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7ff faa5 	bl	800ea8c <pbuf_alloc>
 800f542:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d101      	bne.n	800f54e <pbuf_clone+0x2a>
    return NULL;
 800f54a:	2300      	movs	r3, #0
 800f54c:	e011      	b.n	800f572 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7ff fea3 	bl	800f29c <pbuf_copy>
 800f556:	4603      	mov	r3, r0
 800f558:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f55a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d006      	beq.n	800f570 <pbuf_clone+0x4c>
 800f562:	4b06      	ldr	r3, [pc, #24]	@ (800f57c <pbuf_clone+0x58>)
 800f564:	f240 5224 	movw	r2, #1316	@ 0x524
 800f568:	4905      	ldr	r1, [pc, #20]	@ (800f580 <pbuf_clone+0x5c>)
 800f56a:	4806      	ldr	r0, [pc, #24]	@ (800f584 <pbuf_clone+0x60>)
 800f56c:	f008 fe44 	bl	80181f8 <iprintf>
  return q;
 800f570:	68fb      	ldr	r3, [r7, #12]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	080197cc 	.word	0x080197cc
 800f580:	08019c40 	.word	0x08019c40
 800f584:	0801982c 	.word	0x0801982c

0800f588 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f58c:	f008 fd34 	bl	8017ff8 <rand>
 800f590:	4603      	mov	r3, r0
 800f592:	b29b      	uxth	r3, r3
 800f594:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f598:	b29b      	uxth	r3, r3
 800f59a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	4b01      	ldr	r3, [pc, #4]	@ (800f5a8 <tcp_init+0x20>)
 800f5a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f5a4:	bf00      	nop
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	200000c0 	.word	0x200000c0

0800f5ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	7d1b      	ldrb	r3, [r3, #20]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d105      	bne.n	800f5c8 <tcp_free+0x1c>
 800f5bc:	4b06      	ldr	r3, [pc, #24]	@ (800f5d8 <tcp_free+0x2c>)
 800f5be:	22d4      	movs	r2, #212	@ 0xd4
 800f5c0:	4906      	ldr	r1, [pc, #24]	@ (800f5dc <tcp_free+0x30>)
 800f5c2:	4807      	ldr	r0, [pc, #28]	@ (800f5e0 <tcp_free+0x34>)
 800f5c4:	f008 fe18 	bl	80181f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f5c8:	6879      	ldr	r1, [r7, #4]
 800f5ca:	2001      	movs	r0, #1
 800f5cc:	f7fe fe9e 	bl	800e30c <memp_free>
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	08019ccc 	.word	0x08019ccc
 800f5dc:	08019cfc 	.word	0x08019cfc
 800f5e0:	08019d10 	.word	0x08019d10

0800f5e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	7d1b      	ldrb	r3, [r3, #20]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d105      	bne.n	800f600 <tcp_free_listen+0x1c>
 800f5f4:	4b06      	ldr	r3, [pc, #24]	@ (800f610 <tcp_free_listen+0x2c>)
 800f5f6:	22df      	movs	r2, #223	@ 0xdf
 800f5f8:	4906      	ldr	r1, [pc, #24]	@ (800f614 <tcp_free_listen+0x30>)
 800f5fa:	4807      	ldr	r0, [pc, #28]	@ (800f618 <tcp_free_listen+0x34>)
 800f5fc:	f008 fdfc 	bl	80181f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f600:	6879      	ldr	r1, [r7, #4]
 800f602:	2002      	movs	r0, #2
 800f604:	f7fe fe82 	bl	800e30c <memp_free>
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	08019ccc 	.word	0x08019ccc
 800f614:	08019d38 	.word	0x08019d38
 800f618:	08019d10 	.word	0x08019d10

0800f61c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f620:	f000 fea4 	bl	801036c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f624:	4b07      	ldr	r3, [pc, #28]	@ (800f644 <tcp_tmr+0x28>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	3301      	adds	r3, #1
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	4b05      	ldr	r3, [pc, #20]	@ (800f644 <tcp_tmr+0x28>)
 800f62e:	701a      	strb	r2, [r3, #0]
 800f630:	4b04      	ldr	r3, [pc, #16]	@ (800f644 <tcp_tmr+0x28>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f63c:	f000 fb54 	bl	800fce8 <tcp_slowtmr>
  }
}
 800f640:	bf00      	nop
 800f642:	bd80      	pop	{r7, pc}
 800f644:	2000d585 	.word	0x2000d585

0800f648 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d105      	bne.n	800f664 <tcp_remove_listener+0x1c>
 800f658:	4b0d      	ldr	r3, [pc, #52]	@ (800f690 <tcp_remove_listener+0x48>)
 800f65a:	22ff      	movs	r2, #255	@ 0xff
 800f65c:	490d      	ldr	r1, [pc, #52]	@ (800f694 <tcp_remove_listener+0x4c>)
 800f65e:	480e      	ldr	r0, [pc, #56]	@ (800f698 <tcp_remove_listener+0x50>)
 800f660:	f008 fdca 	bl	80181f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	60fb      	str	r3, [r7, #12]
 800f668:	e00a      	b.n	800f680 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f66e:	683a      	ldr	r2, [r7, #0]
 800f670:	429a      	cmp	r2, r3
 800f672:	d102      	bne.n	800f67a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d1f1      	bne.n	800f66a <tcp_remove_listener+0x22>
    }
  }
}
 800f686:	bf00      	nop
 800f688:	bf00      	nop
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	08019ccc 	.word	0x08019ccc
 800f694:	08019d54 	.word	0x08019d54
 800f698:	08019d10 	.word	0x08019d10

0800f69c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d106      	bne.n	800f6b8 <tcp_listen_closed+0x1c>
 800f6aa:	4b14      	ldr	r3, [pc, #80]	@ (800f6fc <tcp_listen_closed+0x60>)
 800f6ac:	f240 1211 	movw	r2, #273	@ 0x111
 800f6b0:	4913      	ldr	r1, [pc, #76]	@ (800f700 <tcp_listen_closed+0x64>)
 800f6b2:	4814      	ldr	r0, [pc, #80]	@ (800f704 <tcp_listen_closed+0x68>)
 800f6b4:	f008 fda0 	bl	80181f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	7d1b      	ldrb	r3, [r3, #20]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d006      	beq.n	800f6ce <tcp_listen_closed+0x32>
 800f6c0:	4b0e      	ldr	r3, [pc, #56]	@ (800f6fc <tcp_listen_closed+0x60>)
 800f6c2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f6c6:	4910      	ldr	r1, [pc, #64]	@ (800f708 <tcp_listen_closed+0x6c>)
 800f6c8:	480e      	ldr	r0, [pc, #56]	@ (800f704 <tcp_listen_closed+0x68>)
 800f6ca:	f008 fd95 	bl	80181f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
 800f6d2:	e00b      	b.n	800f6ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f6d4:	4a0d      	ldr	r2, [pc, #52]	@ (800f70c <tcp_listen_closed+0x70>)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff ffb1 	bl	800f648 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	d9f0      	bls.n	800f6d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f6f2:	bf00      	nop
 800f6f4:	bf00      	nop
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	08019ccc 	.word	0x08019ccc
 800f700:	08019d7c 	.word	0x08019d7c
 800f704:	08019d10 	.word	0x08019d10
 800f708:	08019d88 	.word	0x08019d88
 800f70c:	0801bd58 	.word	0x0801bd58

0800f710 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f710:	b5b0      	push	{r4, r5, r7, lr}
 800f712:	b088      	sub	sp, #32
 800f714:	af04      	add	r7, sp, #16
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	460b      	mov	r3, r1
 800f71a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <tcp_close_shutdown+0x20>
 800f722:	4b63      	ldr	r3, [pc, #396]	@ (800f8b0 <tcp_close_shutdown+0x1a0>)
 800f724:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f728:	4962      	ldr	r1, [pc, #392]	@ (800f8b4 <tcp_close_shutdown+0x1a4>)
 800f72a:	4863      	ldr	r0, [pc, #396]	@ (800f8b8 <tcp_close_shutdown+0x1a8>)
 800f72c:	f008 fd64 	bl	80181f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d066      	beq.n	800f804 <tcp_close_shutdown+0xf4>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	7d1b      	ldrb	r3, [r3, #20]
 800f73a:	2b04      	cmp	r3, #4
 800f73c:	d003      	beq.n	800f746 <tcp_close_shutdown+0x36>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	7d1b      	ldrb	r3, [r3, #20]
 800f742:	2b07      	cmp	r3, #7
 800f744:	d15e      	bne.n	800f804 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d104      	bne.n	800f758 <tcp_close_shutdown+0x48>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f752:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f756:	d055      	beq.n	800f804 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	8b5b      	ldrh	r3, [r3, #26]
 800f75c:	f003 0310 	and.w	r3, r3, #16
 800f760:	2b00      	cmp	r3, #0
 800f762:	d106      	bne.n	800f772 <tcp_close_shutdown+0x62>
 800f764:	4b52      	ldr	r3, [pc, #328]	@ (800f8b0 <tcp_close_shutdown+0x1a0>)
 800f766:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800f76a:	4954      	ldr	r1, [pc, #336]	@ (800f8bc <tcp_close_shutdown+0x1ac>)
 800f76c:	4852      	ldr	r0, [pc, #328]	@ (800f8b8 <tcp_close_shutdown+0x1a8>)
 800f76e:	f008 fd43 	bl	80181f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f77a:	687d      	ldr	r5, [r7, #4]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3304      	adds	r3, #4
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	8ad2      	ldrh	r2, [r2, #22]
 800f784:	6879      	ldr	r1, [r7, #4]
 800f786:	8b09      	ldrh	r1, [r1, #24]
 800f788:	9102      	str	r1, [sp, #8]
 800f78a:	9201      	str	r2, [sp, #4]
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	462b      	mov	r3, r5
 800f790:	4622      	mov	r2, r4
 800f792:	4601      	mov	r1, r0
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f004 fe8d 	bl	80144b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 f8c8 	bl	8010930 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f7a0:	4b47      	ldr	r3, [pc, #284]	@ (800f8c0 <tcp_close_shutdown+0x1b0>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d105      	bne.n	800f7b6 <tcp_close_shutdown+0xa6>
 800f7aa:	4b45      	ldr	r3, [pc, #276]	@ (800f8c0 <tcp_close_shutdown+0x1b0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	4a43      	ldr	r2, [pc, #268]	@ (800f8c0 <tcp_close_shutdown+0x1b0>)
 800f7b2:	6013      	str	r3, [r2, #0]
 800f7b4:	e013      	b.n	800f7de <tcp_close_shutdown+0xce>
 800f7b6:	4b42      	ldr	r3, [pc, #264]	@ (800f8c0 <tcp_close_shutdown+0x1b0>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	60fb      	str	r3, [r7, #12]
 800f7bc:	e00c      	b.n	800f7d8 <tcp_close_shutdown+0xc8>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d104      	bne.n	800f7d2 <tcp_close_shutdown+0xc2>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	68da      	ldr	r2, [r3, #12]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	60da      	str	r2, [r3, #12]
 800f7d0:	e005      	b.n	800f7de <tcp_close_shutdown+0xce>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	68db      	ldr	r3, [r3, #12]
 800f7d6:	60fb      	str	r3, [r7, #12]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1ef      	bne.n	800f7be <tcp_close_shutdown+0xae>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	60da      	str	r2, [r3, #12]
 800f7e4:	4b37      	ldr	r3, [pc, #220]	@ (800f8c4 <tcp_close_shutdown+0x1b4>)
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f7ea:	4b37      	ldr	r3, [pc, #220]	@ (800f8c8 <tcp_close_shutdown+0x1b8>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d102      	bne.n	800f7fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f7f4:	f003 fd5c 	bl	80132b0 <tcp_trigger_input_pcb_close>
 800f7f8:	e002      	b.n	800f800 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff fed6 	bl	800f5ac <tcp_free>
      }
      return ERR_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	e050      	b.n	800f8a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7d1b      	ldrb	r3, [r3, #20]
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d03b      	beq.n	800f884 <tcp_close_shutdown+0x174>
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	dc44      	bgt.n	800f89a <tcp_close_shutdown+0x18a>
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <tcp_close_shutdown+0x10a>
 800f814:	2b01      	cmp	r3, #1
 800f816:	d02a      	beq.n	800f86e <tcp_close_shutdown+0x15e>
 800f818:	e03f      	b.n	800f89a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	8adb      	ldrh	r3, [r3, #22]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d021      	beq.n	800f866 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f822:	4b2a      	ldr	r3, [pc, #168]	@ (800f8cc <tcp_close_shutdown+0x1bc>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d105      	bne.n	800f838 <tcp_close_shutdown+0x128>
 800f82c:	4b27      	ldr	r3, [pc, #156]	@ (800f8cc <tcp_close_shutdown+0x1bc>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	4a26      	ldr	r2, [pc, #152]	@ (800f8cc <tcp_close_shutdown+0x1bc>)
 800f834:	6013      	str	r3, [r2, #0]
 800f836:	e013      	b.n	800f860 <tcp_close_shutdown+0x150>
 800f838:	4b24      	ldr	r3, [pc, #144]	@ (800f8cc <tcp_close_shutdown+0x1bc>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	60bb      	str	r3, [r7, #8]
 800f83e:	e00c      	b.n	800f85a <tcp_close_shutdown+0x14a>
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	429a      	cmp	r2, r3
 800f848:	d104      	bne.n	800f854 <tcp_close_shutdown+0x144>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68da      	ldr	r2, [r3, #12]
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	60da      	str	r2, [r3, #12]
 800f852:	e005      	b.n	800f860 <tcp_close_shutdown+0x150>
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	60bb      	str	r3, [r7, #8]
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1ef      	bne.n	800f840 <tcp_close_shutdown+0x130>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7ff fea0 	bl	800f5ac <tcp_free>
      break;
 800f86c:	e01a      	b.n	800f8a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff ff14 	bl	800f69c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f874:	6879      	ldr	r1, [r7, #4]
 800f876:	4816      	ldr	r0, [pc, #88]	@ (800f8d0 <tcp_close_shutdown+0x1c0>)
 800f878:	f001 f8aa 	bl	80109d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7ff feb1 	bl	800f5e4 <tcp_free_listen>
      break;
 800f882:	e00f      	b.n	800f8a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f884:	6879      	ldr	r1, [r7, #4]
 800f886:	480e      	ldr	r0, [pc, #56]	@ (800f8c0 <tcp_close_shutdown+0x1b0>)
 800f888:	f001 f8a2 	bl	80109d0 <tcp_pcb_remove>
 800f88c:	4b0d      	ldr	r3, [pc, #52]	@ (800f8c4 <tcp_close_shutdown+0x1b4>)
 800f88e:	2201      	movs	r2, #1
 800f890:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7ff fe8a 	bl	800f5ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f898:	e004      	b.n	800f8a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f81a 	bl	800f8d4 <tcp_close_shutdown_fin>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	e000      	b.n	800f8a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	08019ccc 	.word	0x08019ccc
 800f8b4:	08019da0 	.word	0x08019da0
 800f8b8:	08019d10 	.word	0x08019d10
 800f8bc:	08019dc0 	.word	0x08019dc0
 800f8c0:	2000d57c 	.word	0x2000d57c
 800f8c4:	2000d584 	.word	0x2000d584
 800f8c8:	2000d5bc 	.word	0x2000d5bc
 800f8cc:	2000d574 	.word	0x2000d574
 800f8d0:	2000d578 	.word	0x2000d578

0800f8d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d106      	bne.n	800f8f0 <tcp_close_shutdown_fin+0x1c>
 800f8e2:	4b2e      	ldr	r3, [pc, #184]	@ (800f99c <tcp_close_shutdown_fin+0xc8>)
 800f8e4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800f8e8:	492d      	ldr	r1, [pc, #180]	@ (800f9a0 <tcp_close_shutdown_fin+0xcc>)
 800f8ea:	482e      	ldr	r0, [pc, #184]	@ (800f9a4 <tcp_close_shutdown_fin+0xd0>)
 800f8ec:	f008 fc84 	bl	80181f8 <iprintf>

  switch (pcb->state) {
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	7d1b      	ldrb	r3, [r3, #20]
 800f8f4:	2b07      	cmp	r3, #7
 800f8f6:	d020      	beq.n	800f93a <tcp_close_shutdown_fin+0x66>
 800f8f8:	2b07      	cmp	r3, #7
 800f8fa:	dc2b      	bgt.n	800f954 <tcp_close_shutdown_fin+0x80>
 800f8fc:	2b03      	cmp	r3, #3
 800f8fe:	d002      	beq.n	800f906 <tcp_close_shutdown_fin+0x32>
 800f900:	2b04      	cmp	r3, #4
 800f902:	d00d      	beq.n	800f920 <tcp_close_shutdown_fin+0x4c>
 800f904:	e026      	b.n	800f954 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f003 fee2 	bl	80136d0 <tcp_send_fin>
 800f90c:	4603      	mov	r3, r0
 800f90e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d11f      	bne.n	800f958 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2205      	movs	r2, #5
 800f91c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f91e:	e01b      	b.n	800f958 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f003 fed5 	bl	80136d0 <tcp_send_fin>
 800f926:	4603      	mov	r3, r0
 800f928:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d114      	bne.n	800f95c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2205      	movs	r2, #5
 800f936:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f938:	e010      	b.n	800f95c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f003 fec8 	bl	80136d0 <tcp_send_fin>
 800f940:	4603      	mov	r3, r0
 800f942:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d109      	bne.n	800f960 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2209      	movs	r2, #9
 800f950:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f952:	e005      	b.n	800f960 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	e01c      	b.n	800f992 <tcp_close_shutdown_fin+0xbe>
      break;
 800f958:	bf00      	nop
 800f95a:	e002      	b.n	800f962 <tcp_close_shutdown_fin+0x8e>
      break;
 800f95c:	bf00      	nop
 800f95e:	e000      	b.n	800f962 <tcp_close_shutdown_fin+0x8e>
      break;
 800f960:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d103      	bne.n	800f972 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f003 ffee 	bl	801394c <tcp_output>
 800f970:	e00d      	b.n	800f98e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97a:	d108      	bne.n	800f98e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8b5b      	ldrh	r3, [r3, #26]
 800f980:	f043 0308 	orr.w	r3, r3, #8
 800f984:	b29a      	uxth	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f98a:	2300      	movs	r3, #0
 800f98c:	e001      	b.n	800f992 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	08019ccc 	.word	0x08019ccc
 800f9a0:	08019d7c 	.word	0x08019d7c
 800f9a4:	08019d10 	.word	0x08019d10

0800f9a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d109      	bne.n	800f9ca <tcp_close+0x22>
 800f9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f9f4 <tcp_close+0x4c>)
 800f9b8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800f9bc:	490e      	ldr	r1, [pc, #56]	@ (800f9f8 <tcp_close+0x50>)
 800f9be:	480f      	ldr	r0, [pc, #60]	@ (800f9fc <tcp_close+0x54>)
 800f9c0:	f008 fc1a 	bl	80181f8 <iprintf>
 800f9c4:	f06f 030f 	mvn.w	r3, #15
 800f9c8:	e00f      	b.n	800f9ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7d1b      	ldrb	r3, [r3, #20]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d006      	beq.n	800f9e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	8b5b      	ldrh	r3, [r3, #26]
 800f9d6:	f043 0310 	orr.w	r3, r3, #16
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f9e0:	2101      	movs	r1, #1
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7ff fe94 	bl	800f710 <tcp_close_shutdown>
 800f9e8:	4603      	mov	r3, r0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	08019ccc 	.word	0x08019ccc
 800f9f8:	08019ddc 	.word	0x08019ddc
 800f9fc:	08019d10 	.word	0x08019d10

0800fa00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b08e      	sub	sp, #56	@ 0x38
 800fa04:	af04      	add	r7, sp, #16
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d107      	bne.n	800fa20 <tcp_abandon+0x20>
 800fa10:	4b52      	ldr	r3, [pc, #328]	@ (800fb5c <tcp_abandon+0x15c>)
 800fa12:	f240 223d 	movw	r2, #573	@ 0x23d
 800fa16:	4952      	ldr	r1, [pc, #328]	@ (800fb60 <tcp_abandon+0x160>)
 800fa18:	4852      	ldr	r0, [pc, #328]	@ (800fb64 <tcp_abandon+0x164>)
 800fa1a:	f008 fbed 	bl	80181f8 <iprintf>
 800fa1e:	e099      	b.n	800fb54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	7d1b      	ldrb	r3, [r3, #20]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d106      	bne.n	800fa36 <tcp_abandon+0x36>
 800fa28:	4b4c      	ldr	r3, [pc, #304]	@ (800fb5c <tcp_abandon+0x15c>)
 800fa2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800fa2e:	494e      	ldr	r1, [pc, #312]	@ (800fb68 <tcp_abandon+0x168>)
 800fa30:	484c      	ldr	r0, [pc, #304]	@ (800fb64 <tcp_abandon+0x164>)
 800fa32:	f008 fbe1 	bl	80181f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	7d1b      	ldrb	r3, [r3, #20]
 800fa3a:	2b0a      	cmp	r3, #10
 800fa3c:	d107      	bne.n	800fa4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fa3e:	6879      	ldr	r1, [r7, #4]
 800fa40:	484a      	ldr	r0, [pc, #296]	@ (800fb6c <tcp_abandon+0x16c>)
 800fa42:	f000 ffc5 	bl	80109d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7ff fdb0 	bl	800f5ac <tcp_free>
 800fa4c:	e082      	b.n	800fb54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	7d1b      	ldrb	r3, [r3, #20]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d126      	bne.n	800fac6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	8adb      	ldrh	r3, [r3, #22]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d02e      	beq.n	800fade <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fa80:	4b3b      	ldr	r3, [pc, #236]	@ (800fb70 <tcp_abandon+0x170>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d105      	bne.n	800fa96 <tcp_abandon+0x96>
 800fa8a:	4b39      	ldr	r3, [pc, #228]	@ (800fb70 <tcp_abandon+0x170>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	4a37      	ldr	r2, [pc, #220]	@ (800fb70 <tcp_abandon+0x170>)
 800fa92:	6013      	str	r3, [r2, #0]
 800fa94:	e013      	b.n	800fabe <tcp_abandon+0xbe>
 800fa96:	4b36      	ldr	r3, [pc, #216]	@ (800fb70 <tcp_abandon+0x170>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	61fb      	str	r3, [r7, #28]
 800fa9c:	e00c      	b.n	800fab8 <tcp_abandon+0xb8>
 800fa9e:	69fb      	ldr	r3, [r7, #28]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d104      	bne.n	800fab2 <tcp_abandon+0xb2>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68da      	ldr	r2, [r3, #12]
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	60da      	str	r2, [r3, #12]
 800fab0:	e005      	b.n	800fabe <tcp_abandon+0xbe>
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	61fb      	str	r3, [r7, #28]
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d1ef      	bne.n	800fa9e <tcp_abandon+0x9e>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	60da      	str	r2, [r3, #12]
 800fac4:	e00b      	b.n	800fade <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	8adb      	ldrh	r3, [r3, #22]
 800face:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fad0:	6879      	ldr	r1, [r7, #4]
 800fad2:	4828      	ldr	r0, [pc, #160]	@ (800fb74 <tcp_abandon+0x174>)
 800fad4:	f000 ff7c 	bl	80109d0 <tcp_pcb_remove>
 800fad8:	4b27      	ldr	r3, [pc, #156]	@ (800fb78 <tcp_abandon+0x178>)
 800fada:	2201      	movs	r2, #1
 800fadc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d004      	beq.n	800faf0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800faea:	4618      	mov	r0, r3
 800faec:	f000 fd1e 	bl	801052c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d004      	beq.n	800fb02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 fd15 	bl	801052c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d004      	beq.n	800fb14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 fd0c 	bl	801052c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00e      	beq.n	800fb38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fb1a:	6879      	ldr	r1, [r7, #4]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	8b12      	ldrh	r2, [r2, #24]
 800fb24:	9202      	str	r2, [sp, #8]
 800fb26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fb28:	9201      	str	r2, [sp, #4]
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	69b9      	ldr	r1, [r7, #24]
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f004 fcbe 	bl	80144b4 <tcp_rst>
    }
    last_state = pcb->state;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	7d1b      	ldrb	r3, [r3, #20]
 800fb3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff fd34 	bl	800f5ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d004      	beq.n	800fb54 <tcp_abandon+0x154>
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	f06f 010c 	mvn.w	r1, #12
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	4798      	blx	r3
  }
}
 800fb54:	3728      	adds	r7, #40	@ 0x28
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	08019ccc 	.word	0x08019ccc
 800fb60:	08019e10 	.word	0x08019e10
 800fb64:	08019d10 	.word	0x08019d10
 800fb68:	08019e2c 	.word	0x08019e2c
 800fb6c:	2000d580 	.word	0x2000d580
 800fb70:	2000d574 	.word	0x2000d574
 800fb74:	2000d57c 	.word	0x2000d57c
 800fb78:	2000d584 	.word	0x2000d584

0800fb7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fb84:	2101      	movs	r1, #1
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ff3a 	bl	800fa00 <tcp_abandon>
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d106      	bne.n	800fbb0 <tcp_update_rcv_ann_wnd+0x1c>
 800fba2:	4b25      	ldr	r3, [pc, #148]	@ (800fc38 <tcp_update_rcv_ann_wnd+0xa4>)
 800fba4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800fba8:	4924      	ldr	r1, [pc, #144]	@ (800fc3c <tcp_update_rcv_ann_wnd+0xa8>)
 800fbaa:	4825      	ldr	r0, [pc, #148]	@ (800fc40 <tcp_update_rcv_ann_wnd+0xac>)
 800fbac:	f008 fb24 	bl	80181f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800fbb8:	4413      	add	r3, r2
 800fbba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800fbc4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800fbc8:	bf28      	it	cs
 800fbca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800fbce:	b292      	uxth	r2, r2
 800fbd0:	4413      	add	r3, r2
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	1ad3      	subs	r3, r2, r3
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	db08      	blt.n	800fbec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	e020      	b.n	800fc2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf4:	1ad3      	subs	r3, r2, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	dd03      	ble.n	800fc02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fc00:	e014      	b.n	800fc2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc14:	d306      	bcc.n	800fc24 <tcp_update_rcv_ann_wnd+0x90>
 800fc16:	4b08      	ldr	r3, [pc, #32]	@ (800fc38 <tcp_update_rcv_ann_wnd+0xa4>)
 800fc18:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800fc1c:	4909      	ldr	r1, [pc, #36]	@ (800fc44 <tcp_update_rcv_ann_wnd+0xb0>)
 800fc1e:	4808      	ldr	r0, [pc, #32]	@ (800fc40 <tcp_update_rcv_ann_wnd+0xac>)
 800fc20:	f008 faea 	bl	80181f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800fc2c:	2300      	movs	r3, #0
  }
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	08019ccc 	.word	0x08019ccc
 800fc3c:	08019f28 	.word	0x08019f28
 800fc40:	08019d10 	.word	0x08019d10
 800fc44:	08019f4c 	.word	0x08019f4c

0800fc48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d107      	bne.n	800fc6a <tcp_recved+0x22>
 800fc5a:	4b1f      	ldr	r3, [pc, #124]	@ (800fcd8 <tcp_recved+0x90>)
 800fc5c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800fc60:	491e      	ldr	r1, [pc, #120]	@ (800fcdc <tcp_recved+0x94>)
 800fc62:	481f      	ldr	r0, [pc, #124]	@ (800fce0 <tcp_recved+0x98>)
 800fc64:	f008 fac8 	bl	80181f8 <iprintf>
 800fc68:	e032      	b.n	800fcd0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	7d1b      	ldrb	r3, [r3, #20]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d106      	bne.n	800fc80 <tcp_recved+0x38>
 800fc72:	4b19      	ldr	r3, [pc, #100]	@ (800fcd8 <tcp_recved+0x90>)
 800fc74:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800fc78:	491a      	ldr	r1, [pc, #104]	@ (800fce4 <tcp_recved+0x9c>)
 800fc7a:	4819      	ldr	r0, [pc, #100]	@ (800fce0 <tcp_recved+0x98>)
 800fc7c:	f008 fabc 	bl	80181f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fc84:	887b      	ldrh	r3, [r7, #2]
 800fc86:	4413      	add	r3, r2
 800fc88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fc8a:	89fb      	ldrh	r3, [r7, #14]
 800fc8c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fc90:	d804      	bhi.n	800fc9c <tcp_recved+0x54>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc96:	89fa      	ldrh	r2, [r7, #14]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d204      	bcs.n	800fca6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fca2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fca4:	e002      	b.n	800fcac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	89fa      	ldrh	r2, [r7, #14]
 800fcaa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff ff71 	bl	800fb94 <tcp_update_rcv_ann_wnd>
 800fcb2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fcba:	d309      	bcc.n	800fcd0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	8b5b      	ldrh	r3, [r3, #26]
 800fcc0:	f043 0302 	orr.w	r3, r3, #2
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f003 fe3e 	bl	801394c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	08019ccc 	.word	0x08019ccc
 800fcdc:	08019f68 	.word	0x08019f68
 800fce0:	08019d10 	.word	0x08019d10
 800fce4:	08019f80 	.word	0x08019f80

0800fce8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fce8:	b5b0      	push	{r4, r5, r7, lr}
 800fcea:	b090      	sub	sp, #64	@ 0x40
 800fcec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800fcf4:	4b95      	ldr	r3, [pc, #596]	@ (800ff4c <tcp_slowtmr+0x264>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	4a94      	ldr	r2, [pc, #592]	@ (800ff4c <tcp_slowtmr+0x264>)
 800fcfc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fcfe:	4b94      	ldr	r3, [pc, #592]	@ (800ff50 <tcp_slowtmr+0x268>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	3301      	adds	r3, #1
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	4b92      	ldr	r3, [pc, #584]	@ (800ff50 <tcp_slowtmr+0x268>)
 800fd08:	701a      	strb	r2, [r3, #0]
 800fd0a:	e000      	b.n	800fd0e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800fd0c:	bf00      	nop
  prev = NULL;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800fd12:	4b90      	ldr	r3, [pc, #576]	@ (800ff54 <tcp_slowtmr+0x26c>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fd18:	e29f      	b.n	801025a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1c:	7d1b      	ldrb	r3, [r3, #20]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d106      	bne.n	800fd30 <tcp_slowtmr+0x48>
 800fd22:	4b8d      	ldr	r3, [pc, #564]	@ (800ff58 <tcp_slowtmr+0x270>)
 800fd24:	f240 42be 	movw	r2, #1214	@ 0x4be
 800fd28:	498c      	ldr	r1, [pc, #560]	@ (800ff5c <tcp_slowtmr+0x274>)
 800fd2a:	488d      	ldr	r0, [pc, #564]	@ (800ff60 <tcp_slowtmr+0x278>)
 800fd2c:	f008 fa64 	bl	80181f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd32:	7d1b      	ldrb	r3, [r3, #20]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d106      	bne.n	800fd46 <tcp_slowtmr+0x5e>
 800fd38:	4b87      	ldr	r3, [pc, #540]	@ (800ff58 <tcp_slowtmr+0x270>)
 800fd3a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800fd3e:	4989      	ldr	r1, [pc, #548]	@ (800ff64 <tcp_slowtmr+0x27c>)
 800fd40:	4887      	ldr	r0, [pc, #540]	@ (800ff60 <tcp_slowtmr+0x278>)
 800fd42:	f008 fa59 	bl	80181f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd48:	7d1b      	ldrb	r3, [r3, #20]
 800fd4a:	2b0a      	cmp	r3, #10
 800fd4c:	d106      	bne.n	800fd5c <tcp_slowtmr+0x74>
 800fd4e:	4b82      	ldr	r3, [pc, #520]	@ (800ff58 <tcp_slowtmr+0x270>)
 800fd50:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800fd54:	4984      	ldr	r1, [pc, #528]	@ (800ff68 <tcp_slowtmr+0x280>)
 800fd56:	4882      	ldr	r0, [pc, #520]	@ (800ff60 <tcp_slowtmr+0x278>)
 800fd58:	f008 fa4e 	bl	80181f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5e:	7f9a      	ldrb	r2, [r3, #30]
 800fd60:	4b7b      	ldr	r3, [pc, #492]	@ (800ff50 <tcp_slowtmr+0x268>)
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d105      	bne.n	800fd74 <tcp_slowtmr+0x8c>
      prev = pcb;
 800fd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800fd72:	e272      	b.n	801025a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800fd74:	4b76      	ldr	r3, [pc, #472]	@ (800ff50 <tcp_slowtmr+0x268>)
 800fd76:	781a      	ldrb	r2, [r3, #0]
 800fd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd7a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd8a:	7d1b      	ldrb	r3, [r3, #20]
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d10a      	bne.n	800fda6 <tcp_slowtmr+0xbe>
 800fd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd96:	2b05      	cmp	r3, #5
 800fd98:	d905      	bls.n	800fda6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800fd9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd9e:	3301      	adds	r3, #1
 800fda0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fda4:	e11e      	b.n	800ffe4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdac:	2b0b      	cmp	r3, #11
 800fdae:	d905      	bls.n	800fdbc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800fdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fdba:	e113      	b.n	800ffe4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800fdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdbe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d075      	beq.n	800feb2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d006      	beq.n	800fddc <tcp_slowtmr+0xf4>
 800fdce:	4b62      	ldr	r3, [pc, #392]	@ (800ff58 <tcp_slowtmr+0x270>)
 800fdd0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800fdd4:	4965      	ldr	r1, [pc, #404]	@ (800ff6c <tcp_slowtmr+0x284>)
 800fdd6:	4862      	ldr	r0, [pc, #392]	@ (800ff60 <tcp_slowtmr+0x278>)
 800fdd8:	f008 fa0e 	bl	80181f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d106      	bne.n	800fdf2 <tcp_slowtmr+0x10a>
 800fde4:	4b5c      	ldr	r3, [pc, #368]	@ (800ff58 <tcp_slowtmr+0x270>)
 800fde6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800fdea:	4961      	ldr	r1, [pc, #388]	@ (800ff70 <tcp_slowtmr+0x288>)
 800fdec:	485c      	ldr	r0, [pc, #368]	@ (800ff60 <tcp_slowtmr+0x278>)
 800fdee:	f008 fa03 	bl	80181f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fdf8:	2b0b      	cmp	r3, #11
 800fdfa:	d905      	bls.n	800fe08 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800fdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe00:	3301      	adds	r3, #1
 800fe02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fe06:	e0ed      	b.n	800ffe4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fe08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe0a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	4a58      	ldr	r2, [pc, #352]	@ (800ff74 <tcp_slowtmr+0x28c>)
 800fe12:	5cd3      	ldrb	r3, [r2, r3]
 800fe14:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fe16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800fe1c:	7c7a      	ldrb	r2, [r7, #17]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d907      	bls.n	800fe32 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800fe22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800fe28:	3301      	adds	r3, #1
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800fe32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800fe38:	7c7a      	ldrb	r2, [r7, #17]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	f200 80d2 	bhi.w	800ffe4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800fe40:	2301      	movs	r3, #1
 800fe42:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800fe44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d108      	bne.n	800fe60 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fe4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe50:	f004 fc24 	bl	801469c <tcp_zero_window_probe>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d014      	beq.n	800fe84 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	623b      	str	r3, [r7, #32]
 800fe5e:	e011      	b.n	800fe84 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fe60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fe66:	4619      	mov	r1, r3
 800fe68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe6a:	f003 fae9 	bl	8013440 <tcp_split_unsent_seg>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d107      	bne.n	800fe84 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800fe74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe76:	f003 fd69 	bl	801394c <tcp_output>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d101      	bne.n	800fe84 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800fe80:	2300      	movs	r3, #0
 800fe82:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800fe84:	6a3b      	ldr	r3, [r7, #32]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f000 80ac 	beq.w	800ffe4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800fe8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fe94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe96:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fe9a:	2b06      	cmp	r3, #6
 800fe9c:	f200 80a2 	bhi.w	800ffe4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800fea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fea6:	3301      	adds	r3, #1
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800feb0:	e098      	b.n	800ffe4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800feb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800feb8:	2b00      	cmp	r3, #0
 800feba:	db0f      	blt.n	800fedc <tcp_slowtmr+0x1f4>
 800febc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800febe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fec2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d008      	beq.n	800fedc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800feca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fecc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	3301      	adds	r3, #1
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	b21a      	sxth	r2, r3
 800fed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feda:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800fedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fede:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800fee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800fee8:	429a      	cmp	r2, r3
 800feea:	db7b      	blt.n	800ffe4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800feec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800feee:	f004 f821 	bl	8013f34 <tcp_rexmit_rto_prepare>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d007      	beq.n	800ff08 <tcp_slowtmr+0x220>
 800fef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fefa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d171      	bne.n	800ffe4 <tcp_slowtmr+0x2fc>
 800ff00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d06d      	beq.n	800ffe4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ff08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff0a:	7d1b      	ldrb	r3, [r3, #20]
 800ff0c:	2b02      	cmp	r3, #2
 800ff0e:	d03a      	beq.n	800ff86 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ff10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff16:	2b0c      	cmp	r3, #12
 800ff18:	bf28      	it	cs
 800ff1a:	230c      	movcs	r3, #12
 800ff1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ff1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ff24:	10db      	asrs	r3, r3, #3
 800ff26:	b21b      	sxth	r3, r3
 800ff28:	461a      	mov	r2, r3
 800ff2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ff30:	4413      	add	r3, r2
 800ff32:	7efa      	ldrb	r2, [r7, #27]
 800ff34:	4910      	ldr	r1, [pc, #64]	@ (800ff78 <tcp_slowtmr+0x290>)
 800ff36:	5c8a      	ldrb	r2, [r1, r2]
 800ff38:	4093      	lsls	r3, r2
 800ff3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ff42:	4293      	cmp	r3, r2
 800ff44:	dc1a      	bgt.n	800ff7c <tcp_slowtmr+0x294>
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	b21a      	sxth	r2, r3
 800ff4a:	e019      	b.n	800ff80 <tcp_slowtmr+0x298>
 800ff4c:	2000d570 	.word	0x2000d570
 800ff50:	2000d586 	.word	0x2000d586
 800ff54:	2000d57c 	.word	0x2000d57c
 800ff58:	08019ccc 	.word	0x08019ccc
 800ff5c:	0801a010 	.word	0x0801a010
 800ff60:	08019d10 	.word	0x08019d10
 800ff64:	0801a03c 	.word	0x0801a03c
 800ff68:	0801a068 	.word	0x0801a068
 800ff6c:	0801a098 	.word	0x0801a098
 800ff70:	0801a0cc 	.word	0x0801a0cc
 800ff74:	0801bd50 	.word	0x0801bd50
 800ff78:	0801bd40 	.word	0x0801bd40
 800ff7c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ff80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ff86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff88:	2200      	movs	r2, #0
 800ff8a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ff8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	bf28      	it	cs
 800ff9c:	4613      	movcs	r3, r2
 800ff9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ffa0:	8a7b      	ldrh	r3, [r7, #18]
 800ffa2:	085b      	lsrs	r3, r3, #1
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ffac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ffb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffb6:	005b      	lsls	r3, r3, #1
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d206      	bcs.n	800ffcc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ffbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffc2:	005b      	lsls	r3, r3, #1
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ffcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffce:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ffd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ffd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ffde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffe0:	f004 f818 	bl	8014014 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ffe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe6:	7d1b      	ldrb	r3, [r3, #20]
 800ffe8:	2b06      	cmp	r3, #6
 800ffea:	d111      	bne.n	8010010 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ffec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffee:	8b5b      	ldrh	r3, [r3, #26]
 800fff0:	f003 0310 	and.w	r3, r3, #16
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d00b      	beq.n	8010010 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fff8:	4b9d      	ldr	r3, [pc, #628]	@ (8010270 <tcp_slowtmr+0x588>)
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffe:	6a1b      	ldr	r3, [r3, #32]
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	2b28      	cmp	r3, #40	@ 0x28
 8010004:	d904      	bls.n	8010010 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8010006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801000a:	3301      	adds	r3, #1
 801000c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010012:	7a5b      	ldrb	r3, [r3, #9]
 8010014:	f003 0308 	and.w	r3, r3, #8
 8010018:	2b00      	cmp	r3, #0
 801001a:	d04c      	beq.n	80100b6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 801001c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801001e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010020:	2b04      	cmp	r3, #4
 8010022:	d003      	beq.n	801002c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010026:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010028:	2b07      	cmp	r3, #7
 801002a:	d144      	bne.n	80100b6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801002c:	4b90      	ldr	r3, [pc, #576]	@ (8010270 <tcp_slowtmr+0x588>)
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010032:	6a1b      	ldr	r3, [r3, #32]
 8010034:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801003c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8010040:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8010044:	498b      	ldr	r1, [pc, #556]	@ (8010274 <tcp_slowtmr+0x58c>)
 8010046:	fba1 1303 	umull	r1, r3, r1, r3
 801004a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801004c:	429a      	cmp	r2, r3
 801004e:	d90a      	bls.n	8010066 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8010050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010054:	3301      	adds	r3, #1
 8010056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801005a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801005e:	3301      	adds	r3, #1
 8010060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010064:	e027      	b.n	80100b6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010066:	4b82      	ldr	r3, [pc, #520]	@ (8010270 <tcp_slowtmr+0x588>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801006c:	6a1b      	ldr	r3, [r3, #32]
 801006e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010072:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010078:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801007c:	4618      	mov	r0, r3
 801007e:	4b7e      	ldr	r3, [pc, #504]	@ (8010278 <tcp_slowtmr+0x590>)
 8010080:	fb00 f303 	mul.w	r3, r0, r3
 8010084:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010086:	497b      	ldr	r1, [pc, #492]	@ (8010274 <tcp_slowtmr+0x58c>)
 8010088:	fba1 1303 	umull	r1, r3, r1, r3
 801008c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801008e:	429a      	cmp	r2, r3
 8010090:	d911      	bls.n	80100b6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8010092:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010094:	f004 fac2 	bl	801461c <tcp_keepalive>
 8010098:	4603      	mov	r3, r0
 801009a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801009e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d107      	bne.n	80100b6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80100a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100a8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80100ac:	3301      	adds	r3, #1
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80100b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d011      	beq.n	80100e2 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80100be:	4b6c      	ldr	r3, [pc, #432]	@ (8010270 <tcp_slowtmr+0x588>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	1ad2      	subs	r2, r2, r3
 80100c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80100ce:	4619      	mov	r1, r3
 80100d0:	460b      	mov	r3, r1
 80100d2:	005b      	lsls	r3, r3, #1
 80100d4:	440b      	add	r3, r1
 80100d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80100d8:	429a      	cmp	r2, r3
 80100da:	d302      	bcc.n	80100e2 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80100dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100de:	f000 fddb 	bl	8010c98 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80100e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e4:	7d1b      	ldrb	r3, [r3, #20]
 80100e6:	2b03      	cmp	r3, #3
 80100e8:	d10b      	bne.n	8010102 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80100ea:	4b61      	ldr	r3, [pc, #388]	@ (8010270 <tcp_slowtmr+0x588>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f0:	6a1b      	ldr	r3, [r3, #32]
 80100f2:	1ad3      	subs	r3, r2, r3
 80100f4:	2b28      	cmp	r3, #40	@ 0x28
 80100f6:	d904      	bls.n	8010102 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80100f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100fc:	3301      	adds	r3, #1
 80100fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010104:	7d1b      	ldrb	r3, [r3, #20]
 8010106:	2b09      	cmp	r3, #9
 8010108:	d10b      	bne.n	8010122 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801010a:	4b59      	ldr	r3, [pc, #356]	@ (8010270 <tcp_slowtmr+0x588>)
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010110:	6a1b      	ldr	r3, [r3, #32]
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	2bf0      	cmp	r3, #240	@ 0xf0
 8010116:	d904      	bls.n	8010122 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8010118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801011c:	3301      	adds	r3, #1
 801011e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010126:	2b00      	cmp	r3, #0
 8010128:	d060      	beq.n	80101ec <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 801012a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801012c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010130:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010132:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010134:	f000 fbfc 	bl	8010930 <tcp_pcb_purge>
      if (prev != NULL) {
 8010138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013a:	2b00      	cmp	r3, #0
 801013c:	d010      	beq.n	8010160 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801013e:	4b4f      	ldr	r3, [pc, #316]	@ (801027c <tcp_slowtmr+0x594>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010144:	429a      	cmp	r2, r3
 8010146:	d106      	bne.n	8010156 <tcp_slowtmr+0x46e>
 8010148:	4b4d      	ldr	r3, [pc, #308]	@ (8010280 <tcp_slowtmr+0x598>)
 801014a:	f240 526d 	movw	r2, #1389	@ 0x56d
 801014e:	494d      	ldr	r1, [pc, #308]	@ (8010284 <tcp_slowtmr+0x59c>)
 8010150:	484d      	ldr	r0, [pc, #308]	@ (8010288 <tcp_slowtmr+0x5a0>)
 8010152:	f008 f851 	bl	80181f8 <iprintf>
        prev->next = pcb->next;
 8010156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010158:	68da      	ldr	r2, [r3, #12]
 801015a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015c:	60da      	str	r2, [r3, #12]
 801015e:	e00f      	b.n	8010180 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010160:	4b46      	ldr	r3, [pc, #280]	@ (801027c <tcp_slowtmr+0x594>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010166:	429a      	cmp	r2, r3
 8010168:	d006      	beq.n	8010178 <tcp_slowtmr+0x490>
 801016a:	4b45      	ldr	r3, [pc, #276]	@ (8010280 <tcp_slowtmr+0x598>)
 801016c:	f240 5271 	movw	r2, #1393	@ 0x571
 8010170:	4946      	ldr	r1, [pc, #280]	@ (801028c <tcp_slowtmr+0x5a4>)
 8010172:	4845      	ldr	r0, [pc, #276]	@ (8010288 <tcp_slowtmr+0x5a0>)
 8010174:	f008 f840 	bl	80181f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	4a3f      	ldr	r2, [pc, #252]	@ (801027c <tcp_slowtmr+0x594>)
 801017e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010184:	2b00      	cmp	r3, #0
 8010186:	d013      	beq.n	80101b0 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801018c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010190:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010194:	3304      	adds	r3, #4
 8010196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010198:	8ad2      	ldrh	r2, [r2, #22]
 801019a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801019c:	8b09      	ldrh	r1, [r1, #24]
 801019e:	9102      	str	r1, [sp, #8]
 80101a0:	9201      	str	r2, [sp, #4]
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	462b      	mov	r3, r5
 80101a6:	4622      	mov	r2, r4
 80101a8:	4601      	mov	r1, r0
 80101aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101ac:	f004 f982 	bl	80144b4 <tcp_rst>
      err_arg = pcb->callback_arg;
 80101b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80101b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b8:	7d1b      	ldrb	r3, [r3, #20]
 80101ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80101bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80101c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80101c6:	6838      	ldr	r0, [r7, #0]
 80101c8:	f7ff f9f0 	bl	800f5ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 80101cc:	4b30      	ldr	r3, [pc, #192]	@ (8010290 <tcp_slowtmr+0x5a8>)
 80101ce:	2200      	movs	r2, #0
 80101d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d004      	beq.n	80101e2 <tcp_slowtmr+0x4fa>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f06f 010c 	mvn.w	r1, #12
 80101de:	68b8      	ldr	r0, [r7, #8]
 80101e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80101e2:	4b2b      	ldr	r3, [pc, #172]	@ (8010290 <tcp_slowtmr+0x5a8>)
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d037      	beq.n	801025a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80101ea:	e590      	b.n	800fd0e <tcp_slowtmr+0x26>
      prev = pcb;
 80101ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80101f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80101f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f8:	7f1b      	ldrb	r3, [r3, #28]
 80101fa:	3301      	adds	r3, #1
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010200:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010204:	7f1a      	ldrb	r2, [r3, #28]
 8010206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010208:	7f5b      	ldrb	r3, [r3, #29]
 801020a:	429a      	cmp	r2, r3
 801020c:	d325      	bcc.n	801025a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801020e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010210:	2200      	movs	r2, #0
 8010212:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010214:	4b1e      	ldr	r3, [pc, #120]	@ (8010290 <tcp_slowtmr+0x5a8>)
 8010216:	2200      	movs	r2, #0
 8010218:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801021a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801021c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00b      	beq.n	801023c <tcp_slowtmr+0x554>
 8010224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801022a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801022c:	6912      	ldr	r2, [r2, #16]
 801022e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010230:	4610      	mov	r0, r2
 8010232:	4798      	blx	r3
 8010234:	4603      	mov	r3, r0
 8010236:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801023a:	e002      	b.n	8010242 <tcp_slowtmr+0x55a>
 801023c:	2300      	movs	r3, #0
 801023e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010242:	4b13      	ldr	r3, [pc, #76]	@ (8010290 <tcp_slowtmr+0x5a8>)
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f47f ad60 	bne.w	800fd0c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801024c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010250:	2b00      	cmp	r3, #0
 8010252:	d102      	bne.n	801025a <tcp_slowtmr+0x572>
          tcp_output(prev);
 8010254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010256:	f003 fb79 	bl	801394c <tcp_output>
  while (pcb != NULL) {
 801025a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025c:	2b00      	cmp	r3, #0
 801025e:	f47f ad5c 	bne.w	800fd1a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010262:	2300      	movs	r3, #0
 8010264:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010266:	4b0b      	ldr	r3, [pc, #44]	@ (8010294 <tcp_slowtmr+0x5ac>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801026c:	e067      	b.n	801033e <tcp_slowtmr+0x656>
 801026e:	bf00      	nop
 8010270:	2000d570 	.word	0x2000d570
 8010274:	10624dd3 	.word	0x10624dd3
 8010278:	000124f8 	.word	0x000124f8
 801027c:	2000d57c 	.word	0x2000d57c
 8010280:	08019ccc 	.word	0x08019ccc
 8010284:	0801a104 	.word	0x0801a104
 8010288:	08019d10 	.word	0x08019d10
 801028c:	0801a130 	.word	0x0801a130
 8010290:	2000d584 	.word	0x2000d584
 8010294:	2000d580 	.word	0x2000d580
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029a:	7d1b      	ldrb	r3, [r3, #20]
 801029c:	2b0a      	cmp	r3, #10
 801029e:	d006      	beq.n	80102ae <tcp_slowtmr+0x5c6>
 80102a0:	4b2b      	ldr	r3, [pc, #172]	@ (8010350 <tcp_slowtmr+0x668>)
 80102a2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80102a6:	492b      	ldr	r1, [pc, #172]	@ (8010354 <tcp_slowtmr+0x66c>)
 80102a8:	482b      	ldr	r0, [pc, #172]	@ (8010358 <tcp_slowtmr+0x670>)
 80102aa:	f007 ffa5 	bl	80181f8 <iprintf>
    pcb_remove = 0;
 80102ae:	2300      	movs	r3, #0
 80102b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80102b4:	4b29      	ldr	r3, [pc, #164]	@ (801035c <tcp_slowtmr+0x674>)
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ba:	6a1b      	ldr	r3, [r3, #32]
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	2bf0      	cmp	r3, #240	@ 0xf0
 80102c0:	d904      	bls.n	80102cc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80102c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102c6:	3301      	adds	r3, #1
 80102c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80102cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d02f      	beq.n	8010334 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80102d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102d6:	f000 fb2b 	bl	8010930 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80102da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d010      	beq.n	8010302 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80102e0:	4b1f      	ldr	r3, [pc, #124]	@ (8010360 <tcp_slowtmr+0x678>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d106      	bne.n	80102f8 <tcp_slowtmr+0x610>
 80102ea:	4b19      	ldr	r3, [pc, #100]	@ (8010350 <tcp_slowtmr+0x668>)
 80102ec:	f240 52af 	movw	r2, #1455	@ 0x5af
 80102f0:	491c      	ldr	r1, [pc, #112]	@ (8010364 <tcp_slowtmr+0x67c>)
 80102f2:	4819      	ldr	r0, [pc, #100]	@ (8010358 <tcp_slowtmr+0x670>)
 80102f4:	f007 ff80 	bl	80181f8 <iprintf>
        prev->next = pcb->next;
 80102f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102fa:	68da      	ldr	r2, [r3, #12]
 80102fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102fe:	60da      	str	r2, [r3, #12]
 8010300:	e00f      	b.n	8010322 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010302:	4b17      	ldr	r3, [pc, #92]	@ (8010360 <tcp_slowtmr+0x678>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010308:	429a      	cmp	r2, r3
 801030a:	d006      	beq.n	801031a <tcp_slowtmr+0x632>
 801030c:	4b10      	ldr	r3, [pc, #64]	@ (8010350 <tcp_slowtmr+0x668>)
 801030e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010312:	4915      	ldr	r1, [pc, #84]	@ (8010368 <tcp_slowtmr+0x680>)
 8010314:	4810      	ldr	r0, [pc, #64]	@ (8010358 <tcp_slowtmr+0x670>)
 8010316:	f007 ff6f 	bl	80181f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801031a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	4a10      	ldr	r2, [pc, #64]	@ (8010360 <tcp_slowtmr+0x678>)
 8010320:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010324:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801032c:	69f8      	ldr	r0, [r7, #28]
 801032e:	f7ff f93d 	bl	800f5ac <tcp_free>
 8010332:	e004      	b.n	801033e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010336:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801033e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1a9      	bne.n	8010298 <tcp_slowtmr+0x5b0>
    }
  }
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop
 8010348:	3730      	adds	r7, #48	@ 0x30
 801034a:	46bd      	mov	sp, r7
 801034c:	bdb0      	pop	{r4, r5, r7, pc}
 801034e:	bf00      	nop
 8010350:	08019ccc 	.word	0x08019ccc
 8010354:	0801a15c 	.word	0x0801a15c
 8010358:	08019d10 	.word	0x08019d10
 801035c:	2000d570 	.word	0x2000d570
 8010360:	2000d580 	.word	0x2000d580
 8010364:	0801a18c 	.word	0x0801a18c
 8010368:	0801a1b4 	.word	0x0801a1b4

0801036c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010372:	4b2d      	ldr	r3, [pc, #180]	@ (8010428 <tcp_fasttmr+0xbc>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	3301      	adds	r3, #1
 8010378:	b2da      	uxtb	r2, r3
 801037a:	4b2b      	ldr	r3, [pc, #172]	@ (8010428 <tcp_fasttmr+0xbc>)
 801037c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801037e:	4b2b      	ldr	r3, [pc, #172]	@ (801042c <tcp_fasttmr+0xc0>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010384:	e048      	b.n	8010418 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	7f9a      	ldrb	r2, [r3, #30]
 801038a:	4b27      	ldr	r3, [pc, #156]	@ (8010428 <tcp_fasttmr+0xbc>)
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	429a      	cmp	r2, r3
 8010390:	d03f      	beq.n	8010412 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010392:	4b25      	ldr	r3, [pc, #148]	@ (8010428 <tcp_fasttmr+0xbc>)
 8010394:	781a      	ldrb	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8b5b      	ldrh	r3, [r3, #26]
 801039e:	f003 0301 	and.w	r3, r3, #1
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d010      	beq.n	80103c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	8b5b      	ldrh	r3, [r3, #26]
 80103aa:	f043 0302 	orr.w	r3, r3, #2
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f003 fac9 	bl	801394c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	8b5b      	ldrh	r3, [r3, #26]
 80103be:	f023 0303 	bic.w	r3, r3, #3
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	8b5b      	ldrh	r3, [r3, #26]
 80103cc:	f003 0308 	and.w	r3, r3, #8
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d009      	beq.n	80103e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	8b5b      	ldrh	r3, [r3, #26]
 80103d8:	f023 0308 	bic.w	r3, r3, #8
 80103dc:	b29a      	uxth	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7ff fa76 	bl	800f8d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d00a      	beq.n	801040c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80103f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010430 <tcp_fasttmr+0xc4>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 f819 	bl	8010434 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010402:	4b0b      	ldr	r3, [pc, #44]	@ (8010430 <tcp_fasttmr+0xc4>)
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d000      	beq.n	801040c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801040a:	e7b8      	b.n	801037e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	607b      	str	r3, [r7, #4]
 8010410:	e002      	b.n	8010418 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1b3      	bne.n	8010386 <tcp_fasttmr+0x1a>
    }
  }
}
 801041e:	bf00      	nop
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	2000d586 	.word	0x2000d586
 801042c:	2000d57c 	.word	0x2000d57c
 8010430:	2000d584 	.word	0x2000d584

08010434 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010434:	b590      	push	{r4, r7, lr}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d109      	bne.n	8010456 <tcp_process_refused_data+0x22>
 8010442:	4b37      	ldr	r3, [pc, #220]	@ (8010520 <tcp_process_refused_data+0xec>)
 8010444:	f240 6209 	movw	r2, #1545	@ 0x609
 8010448:	4936      	ldr	r1, [pc, #216]	@ (8010524 <tcp_process_refused_data+0xf0>)
 801044a:	4837      	ldr	r0, [pc, #220]	@ (8010528 <tcp_process_refused_data+0xf4>)
 801044c:	f007 fed4 	bl	80181f8 <iprintf>
 8010450:	f06f 030f 	mvn.w	r3, #15
 8010454:	e060      	b.n	8010518 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801045a:	7b5b      	ldrb	r3, [r3, #13]
 801045c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010462:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00b      	beq.n	801048c <tcp_process_refused_data+0x58>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6918      	ldr	r0, [r3, #16]
 801047e:	2300      	movs	r3, #0
 8010480:	68ba      	ldr	r2, [r7, #8]
 8010482:	6879      	ldr	r1, [r7, #4]
 8010484:	47a0      	blx	r4
 8010486:	4603      	mov	r3, r0
 8010488:	73fb      	strb	r3, [r7, #15]
 801048a:	e007      	b.n	801049c <tcp_process_refused_data+0x68>
 801048c:	2300      	movs	r3, #0
 801048e:	68ba      	ldr	r2, [r7, #8]
 8010490:	6879      	ldr	r1, [r7, #4]
 8010492:	2000      	movs	r0, #0
 8010494:	f000 f8a4 	bl	80105e0 <tcp_recv_null>
 8010498:	4603      	mov	r3, r0
 801049a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801049c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d12a      	bne.n	80104fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80104a4:	7bbb      	ldrb	r3, [r7, #14]
 80104a6:	f003 0320 	and.w	r3, r3, #32
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d033      	beq.n	8010516 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104b2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80104b6:	d005      	beq.n	80104c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104bc:	3301      	adds	r3, #1
 80104be:	b29a      	uxth	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00b      	beq.n	80104e6 <tcp_process_refused_data+0xb2>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6918      	ldr	r0, [r3, #16]
 80104d8:	2300      	movs	r3, #0
 80104da:	2200      	movs	r2, #0
 80104dc:	6879      	ldr	r1, [r7, #4]
 80104de:	47a0      	blx	r4
 80104e0:	4603      	mov	r3, r0
 80104e2:	73fb      	strb	r3, [r7, #15]
 80104e4:	e001      	b.n	80104ea <tcp_process_refused_data+0xb6>
 80104e6:	2300      	movs	r3, #0
 80104e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80104ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104ee:	f113 0f0d 	cmn.w	r3, #13
 80104f2:	d110      	bne.n	8010516 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80104f4:	f06f 030c 	mvn.w	r3, #12
 80104f8:	e00e      	b.n	8010518 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80104fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104fe:	f113 0f0d 	cmn.w	r3, #13
 8010502:	d102      	bne.n	801050a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010504:	f06f 030c 	mvn.w	r3, #12
 8010508:	e006      	b.n	8010518 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010510:	f06f 0304 	mvn.w	r3, #4
 8010514:	e000      	b.n	8010518 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	bd90      	pop	{r4, r7, pc}
 8010520:	08019ccc 	.word	0x08019ccc
 8010524:	0801a1dc 	.word	0x0801a1dc
 8010528:	08019d10 	.word	0x08019d10

0801052c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010534:	e007      	b.n	8010546 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 f80a 	bl	8010556 <tcp_seg_free>
    seg = next;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1f4      	bne.n	8010536 <tcp_segs_free+0xa>
  }
}
 801054c:	bf00      	nop
 801054e:	bf00      	nop
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010556:	b580      	push	{r7, lr}
 8010558:	b082      	sub	sp, #8
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00c      	beq.n	801057e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d004      	beq.n	8010576 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe fd6f 	bl	800f054 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010576:	6879      	ldr	r1, [r7, #4]
 8010578:	2003      	movs	r0, #3
 801057a:	f7fd fec7 	bl	800e30c <memp_free>
  }
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
	...

08010588 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d106      	bne.n	80105a4 <tcp_seg_copy+0x1c>
 8010596:	4b0f      	ldr	r3, [pc, #60]	@ (80105d4 <tcp_seg_copy+0x4c>)
 8010598:	f240 6282 	movw	r2, #1666	@ 0x682
 801059c:	490e      	ldr	r1, [pc, #56]	@ (80105d8 <tcp_seg_copy+0x50>)
 801059e:	480f      	ldr	r0, [pc, #60]	@ (80105dc <tcp_seg_copy+0x54>)
 80105a0:	f007 fe2a 	bl	80181f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80105a4:	2003      	movs	r0, #3
 80105a6:	f7fd fe3b 	bl	800e220 <memp_malloc>
 80105aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <tcp_seg_copy+0x2e>
    return NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e00a      	b.n	80105cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80105b6:	2210      	movs	r2, #16
 80105b8:	6879      	ldr	r1, [r7, #4]
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f007 ff4d 	bl	801845a <memcpy>
  pbuf_ref(cseg->p);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fe fdeb 	bl	800f1a0 <pbuf_ref>
  return cseg;
 80105ca:	68fb      	ldr	r3, [r7, #12]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	08019ccc 	.word	0x08019ccc
 80105d8:	0801a220 	.word	0x0801a220
 80105dc:	08019d10 	.word	0x08019d10

080105e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
 80105ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d109      	bne.n	8010608 <tcp_recv_null+0x28>
 80105f4:	4b12      	ldr	r3, [pc, #72]	@ (8010640 <tcp_recv_null+0x60>)
 80105f6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80105fa:	4912      	ldr	r1, [pc, #72]	@ (8010644 <tcp_recv_null+0x64>)
 80105fc:	4812      	ldr	r0, [pc, #72]	@ (8010648 <tcp_recv_null+0x68>)
 80105fe:	f007 fdfb 	bl	80181f8 <iprintf>
 8010602:	f06f 030f 	mvn.w	r3, #15
 8010606:	e016      	b.n	8010636 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d009      	beq.n	8010622 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	891b      	ldrh	r3, [r3, #8]
 8010612:	4619      	mov	r1, r3
 8010614:	68b8      	ldr	r0, [r7, #8]
 8010616:	f7ff fb17 	bl	800fc48 <tcp_recved>
    pbuf_free(p);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7fe fd1a 	bl	800f054 <pbuf_free>
 8010620:	e008      	b.n	8010634 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d104      	bne.n	8010634 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801062a:	68b8      	ldr	r0, [r7, #8]
 801062c:	f7ff f9bc 	bl	800f9a8 <tcp_close>
 8010630:	4603      	mov	r3, r0
 8010632:	e000      	b.n	8010636 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3710      	adds	r7, #16
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	08019ccc 	.word	0x08019ccc
 8010644:	0801a23c 	.word	0x0801a23c
 8010648:	08019d10 	.word	0x08019d10

0801064c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b086      	sub	sp, #24
 8010650:	af00      	add	r7, sp, #0
 8010652:	4603      	mov	r3, r0
 8010654:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801065a:	2b00      	cmp	r3, #0
 801065c:	db01      	blt.n	8010662 <tcp_kill_prio+0x16>
 801065e:	79fb      	ldrb	r3, [r7, #7]
 8010660:	e000      	b.n	8010664 <tcp_kill_prio+0x18>
 8010662:	237f      	movs	r3, #127	@ 0x7f
 8010664:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010666:	7afb      	ldrb	r3, [r7, #11]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d034      	beq.n	80106d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801066c:	7afb      	ldrb	r3, [r7, #11]
 801066e:	3b01      	subs	r3, #1
 8010670:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010672:	2300      	movs	r3, #0
 8010674:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010676:	2300      	movs	r3, #0
 8010678:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801067a:	4b19      	ldr	r3, [pc, #100]	@ (80106e0 <tcp_kill_prio+0x94>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	617b      	str	r3, [r7, #20]
 8010680:	e01f      	b.n	80106c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	7d5b      	ldrb	r3, [r3, #21]
 8010686:	7afa      	ldrb	r2, [r7, #11]
 8010688:	429a      	cmp	r2, r3
 801068a:	d80c      	bhi.n	80106a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010690:	7afa      	ldrb	r2, [r7, #11]
 8010692:	429a      	cmp	r2, r3
 8010694:	d112      	bne.n	80106bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010696:	4b13      	ldr	r3, [pc, #76]	@ (80106e4 <tcp_kill_prio+0x98>)
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	6a1b      	ldr	r3, [r3, #32]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d80a      	bhi.n	80106bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80106a6:	4b0f      	ldr	r3, [pc, #60]	@ (80106e4 <tcp_kill_prio+0x98>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	7d5b      	ldrb	r3, [r3, #21]
 80106ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	617b      	str	r3, [r7, #20]
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1dc      	bne.n	8010682 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d004      	beq.n	80106d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80106ce:	6938      	ldr	r0, [r7, #16]
 80106d0:	f7ff fa54 	bl	800fb7c <tcp_abort>
 80106d4:	e000      	b.n	80106d8 <tcp_kill_prio+0x8c>
    return;
 80106d6:	bf00      	nop
  }
}
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	2000d57c 	.word	0x2000d57c
 80106e4:	2000d570 	.word	0x2000d570

080106e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80106f2:	79fb      	ldrb	r3, [r7, #7]
 80106f4:	2b08      	cmp	r3, #8
 80106f6:	d009      	beq.n	801070c <tcp_kill_state+0x24>
 80106f8:	79fb      	ldrb	r3, [r7, #7]
 80106fa:	2b09      	cmp	r3, #9
 80106fc:	d006      	beq.n	801070c <tcp_kill_state+0x24>
 80106fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010768 <tcp_kill_state+0x80>)
 8010700:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010704:	4919      	ldr	r1, [pc, #100]	@ (801076c <tcp_kill_state+0x84>)
 8010706:	481a      	ldr	r0, [pc, #104]	@ (8010770 <tcp_kill_state+0x88>)
 8010708:	f007 fd76 	bl	80181f8 <iprintf>

  inactivity = 0;
 801070c:	2300      	movs	r3, #0
 801070e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010710:	2300      	movs	r3, #0
 8010712:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010714:	4b17      	ldr	r3, [pc, #92]	@ (8010774 <tcp_kill_state+0x8c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	617b      	str	r3, [r7, #20]
 801071a:	e017      	b.n	801074c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	7d1b      	ldrb	r3, [r3, #20]
 8010720:	79fa      	ldrb	r2, [r7, #7]
 8010722:	429a      	cmp	r2, r3
 8010724:	d10f      	bne.n	8010746 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010726:	4b14      	ldr	r3, [pc, #80]	@ (8010778 <tcp_kill_state+0x90>)
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	1ad3      	subs	r3, r2, r3
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	429a      	cmp	r2, r3
 8010734:	d807      	bhi.n	8010746 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010736:	4b10      	ldr	r3, [pc, #64]	@ (8010778 <tcp_kill_state+0x90>)
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	6a1b      	ldr	r3, [r3, #32]
 801073e:	1ad3      	subs	r3, r2, r3
 8010740:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	617b      	str	r3, [r7, #20]
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d1e4      	bne.n	801071c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d003      	beq.n	8010760 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010758:	2100      	movs	r1, #0
 801075a:	6938      	ldr	r0, [r7, #16]
 801075c:	f7ff f950 	bl	800fa00 <tcp_abandon>
  }
}
 8010760:	bf00      	nop
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	08019ccc 	.word	0x08019ccc
 801076c:	0801a258 	.word	0x0801a258
 8010770:	08019d10 	.word	0x08019d10
 8010774:	2000d57c 	.word	0x2000d57c
 8010778:	2000d570 	.word	0x2000d570

0801077c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010782:	2300      	movs	r3, #0
 8010784:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801078a:	4b12      	ldr	r3, [pc, #72]	@ (80107d4 <tcp_kill_timewait+0x58>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	60fb      	str	r3, [r7, #12]
 8010790:	e012      	b.n	80107b8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010792:	4b11      	ldr	r3, [pc, #68]	@ (80107d8 <tcp_kill_timewait+0x5c>)
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6a1b      	ldr	r3, [r3, #32]
 801079a:	1ad3      	subs	r3, r2, r3
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d807      	bhi.n	80107b2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80107a2:	4b0d      	ldr	r3, [pc, #52]	@ (80107d8 <tcp_kill_timewait+0x5c>)
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	6a1b      	ldr	r3, [r3, #32]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	60fb      	str	r3, [r7, #12]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1e9      	bne.n	8010792 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80107c4:	68b8      	ldr	r0, [r7, #8]
 80107c6:	f7ff f9d9 	bl	800fb7c <tcp_abort>
  }
}
 80107ca:	bf00      	nop
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	2000d580 	.word	0x2000d580
 80107d8:	2000d570 	.word	0x2000d570

080107dc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80107e2:	4b10      	ldr	r3, [pc, #64]	@ (8010824 <tcp_handle_closepend+0x48>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80107e8:	e014      	b.n	8010814 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	8b5b      	ldrh	r3, [r3, #26]
 80107f4:	f003 0308 	and.w	r3, r3, #8
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d009      	beq.n	8010810 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	8b5b      	ldrh	r3, [r3, #26]
 8010800:	f023 0308 	bic.w	r3, r3, #8
 8010804:	b29a      	uxth	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff f862 	bl	800f8d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1e7      	bne.n	80107ea <tcp_handle_closepend+0xe>
  }
}
 801081a:	bf00      	nop
 801081c:	bf00      	nop
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	2000d57c 	.word	0x2000d57c

08010828 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	4603      	mov	r3, r0
 8010830:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010832:	2001      	movs	r0, #1
 8010834:	f7fd fcf4 	bl	800e220 <memp_malloc>
 8010838:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d126      	bne.n	801088e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010840:	f7ff ffcc 	bl	80107dc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010844:	f7ff ff9a 	bl	801077c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010848:	2001      	movs	r0, #1
 801084a:	f7fd fce9 	bl	800e220 <memp_malloc>
 801084e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d11b      	bne.n	801088e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010856:	2009      	movs	r0, #9
 8010858:	f7ff ff46 	bl	80106e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801085c:	2001      	movs	r0, #1
 801085e:	f7fd fcdf 	bl	800e220 <memp_malloc>
 8010862:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d111      	bne.n	801088e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801086a:	2008      	movs	r0, #8
 801086c:	f7ff ff3c 	bl	80106e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010870:	2001      	movs	r0, #1
 8010872:	f7fd fcd5 	bl	800e220 <memp_malloc>
 8010876:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d107      	bne.n	801088e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801087e:	79fb      	ldrb	r3, [r7, #7]
 8010880:	4618      	mov	r0, r3
 8010882:	f7ff fee3 	bl	801064c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010886:	2001      	movs	r0, #1
 8010888:	f7fd fcca 	bl	800e220 <memp_malloc>
 801088c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d03f      	beq.n	8010914 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010894:	229c      	movs	r2, #156	@ 0x9c
 8010896:	2100      	movs	r1, #0
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f007 fd12 	bl	80182c2 <memset>
    pcb->prio = prio;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	79fa      	ldrb	r2, [r7, #7]
 80108a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80108aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80108b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	22ff      	movs	r2, #255	@ 0xff
 80108c2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80108ca:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2206      	movs	r2, #6
 80108d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2206      	movs	r2, #6
 80108d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108e0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80108ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010920 <tcp_alloc+0xf8>)
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80108f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010924 <tcp_alloc+0xfc>)
 80108f4:	781a      	ldrb	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010900:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	4a08      	ldr	r2, [pc, #32]	@ (8010928 <tcp_alloc+0x100>)
 8010908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4a07      	ldr	r2, [pc, #28]	@ (801092c <tcp_alloc+0x104>)
 8010910:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010914:	68fb      	ldr	r3, [r7, #12]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	2000d570 	.word	0x2000d570
 8010924:	2000d586 	.word	0x2000d586
 8010928:	080105e1 	.word	0x080105e1
 801092c:	006ddd00 	.word	0x006ddd00

08010930 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d107      	bne.n	801094e <tcp_pcb_purge+0x1e>
 801093e:	4b21      	ldr	r3, [pc, #132]	@ (80109c4 <tcp_pcb_purge+0x94>)
 8010940:	f640 0251 	movw	r2, #2129	@ 0x851
 8010944:	4920      	ldr	r1, [pc, #128]	@ (80109c8 <tcp_pcb_purge+0x98>)
 8010946:	4821      	ldr	r0, [pc, #132]	@ (80109cc <tcp_pcb_purge+0x9c>)
 8010948:	f007 fc56 	bl	80181f8 <iprintf>
 801094c:	e037      	b.n	80109be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	7d1b      	ldrb	r3, [r3, #20]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d033      	beq.n	80109be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801095a:	2b0a      	cmp	r3, #10
 801095c:	d02f      	beq.n	80109be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010962:	2b01      	cmp	r3, #1
 8010964:	d02b      	beq.n	80109be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801096a:	2b00      	cmp	r3, #0
 801096c:	d007      	beq.n	801097e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fb6e 	bl	800f054 <pbuf_free>
      pcb->refused_data = NULL;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010982:	2b00      	cmp	r3, #0
 8010984:	d002      	beq.n	801098c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 f986 	bl	8010c98 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010992:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010998:	4618      	mov	r0, r3
 801099a:	f7ff fdc7 	bl	801052c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7ff fdc2 	bl	801052c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	08019ccc 	.word	0x08019ccc
 80109c8:	0801a318 	.word	0x0801a318
 80109cc:	08019d10 	.word	0x08019d10

080109d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d106      	bne.n	80109ee <tcp_pcb_remove+0x1e>
 80109e0:	4b3e      	ldr	r3, [pc, #248]	@ (8010adc <tcp_pcb_remove+0x10c>)
 80109e2:	f640 0283 	movw	r2, #2179	@ 0x883
 80109e6:	493e      	ldr	r1, [pc, #248]	@ (8010ae0 <tcp_pcb_remove+0x110>)
 80109e8:	483e      	ldr	r0, [pc, #248]	@ (8010ae4 <tcp_pcb_remove+0x114>)
 80109ea:	f007 fc05 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d106      	bne.n	8010a02 <tcp_pcb_remove+0x32>
 80109f4:	4b39      	ldr	r3, [pc, #228]	@ (8010adc <tcp_pcb_remove+0x10c>)
 80109f6:	f640 0284 	movw	r2, #2180	@ 0x884
 80109fa:	493b      	ldr	r1, [pc, #236]	@ (8010ae8 <tcp_pcb_remove+0x118>)
 80109fc:	4839      	ldr	r0, [pc, #228]	@ (8010ae4 <tcp_pcb_remove+0x114>)
 80109fe:	f007 fbfb 	bl	80181f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	683a      	ldr	r2, [r7, #0]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d105      	bne.n	8010a18 <tcp_pcb_remove+0x48>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68da      	ldr	r2, [r3, #12]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	e013      	b.n	8010a40 <tcp_pcb_remove+0x70>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	60fb      	str	r3, [r7, #12]
 8010a1e:	e00c      	b.n	8010a3a <tcp_pcb_remove+0x6a>
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	683a      	ldr	r2, [r7, #0]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d104      	bne.n	8010a34 <tcp_pcb_remove+0x64>
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	68da      	ldr	r2, [r3, #12]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	60da      	str	r2, [r3, #12]
 8010a32:	e005      	b.n	8010a40 <tcp_pcb_remove+0x70>
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	60fb      	str	r3, [r7, #12]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1ef      	bne.n	8010a20 <tcp_pcb_remove+0x50>
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2200      	movs	r2, #0
 8010a44:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010a46:	6838      	ldr	r0, [r7, #0]
 8010a48:	f7ff ff72 	bl	8010930 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	7d1b      	ldrb	r3, [r3, #20]
 8010a50:	2b0a      	cmp	r3, #10
 8010a52:	d013      	beq.n	8010a7c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d00f      	beq.n	8010a7c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	8b5b      	ldrh	r3, [r3, #26]
 8010a60:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d009      	beq.n	8010a7c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	8b5b      	ldrh	r3, [r3, #26]
 8010a6c:	f043 0302 	orr.w	r3, r3, #2
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a76:	6838      	ldr	r0, [r7, #0]
 8010a78:	f002 ff68 	bl	801394c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	7d1b      	ldrb	r3, [r3, #20]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d020      	beq.n	8010ac6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d006      	beq.n	8010a9a <tcp_pcb_remove+0xca>
 8010a8c:	4b13      	ldr	r3, [pc, #76]	@ (8010adc <tcp_pcb_remove+0x10c>)
 8010a8e:	f640 0293 	movw	r2, #2195	@ 0x893
 8010a92:	4916      	ldr	r1, [pc, #88]	@ (8010aec <tcp_pcb_remove+0x11c>)
 8010a94:	4813      	ldr	r0, [pc, #76]	@ (8010ae4 <tcp_pcb_remove+0x114>)
 8010a96:	f007 fbaf 	bl	80181f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d006      	beq.n	8010ab0 <tcp_pcb_remove+0xe0>
 8010aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8010adc <tcp_pcb_remove+0x10c>)
 8010aa4:	f640 0294 	movw	r2, #2196	@ 0x894
 8010aa8:	4911      	ldr	r1, [pc, #68]	@ (8010af0 <tcp_pcb_remove+0x120>)
 8010aaa:	480e      	ldr	r0, [pc, #56]	@ (8010ae4 <tcp_pcb_remove+0x114>)
 8010aac:	f007 fba4 	bl	80181f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d006      	beq.n	8010ac6 <tcp_pcb_remove+0xf6>
 8010ab8:	4b08      	ldr	r3, [pc, #32]	@ (8010adc <tcp_pcb_remove+0x10c>)
 8010aba:	f640 0296 	movw	r2, #2198	@ 0x896
 8010abe:	490d      	ldr	r1, [pc, #52]	@ (8010af4 <tcp_pcb_remove+0x124>)
 8010ac0:	4808      	ldr	r0, [pc, #32]	@ (8010ae4 <tcp_pcb_remove+0x114>)
 8010ac2:	f007 fb99 	bl	80181f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010ad2:	bf00      	nop
 8010ad4:	3710      	adds	r7, #16
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	08019ccc 	.word	0x08019ccc
 8010ae0:	0801a334 	.word	0x0801a334
 8010ae4:	08019d10 	.word	0x08019d10
 8010ae8:	0801a350 	.word	0x0801a350
 8010aec:	0801a370 	.word	0x0801a370
 8010af0:	0801a388 	.word	0x0801a388
 8010af4:	0801a3a4 	.word	0x0801a3a4

08010af8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d106      	bne.n	8010b14 <tcp_next_iss+0x1c>
 8010b06:	4b0a      	ldr	r3, [pc, #40]	@ (8010b30 <tcp_next_iss+0x38>)
 8010b08:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010b0c:	4909      	ldr	r1, [pc, #36]	@ (8010b34 <tcp_next_iss+0x3c>)
 8010b0e:	480a      	ldr	r0, [pc, #40]	@ (8010b38 <tcp_next_iss+0x40>)
 8010b10:	f007 fb72 	bl	80181f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010b14:	4b09      	ldr	r3, [pc, #36]	@ (8010b3c <tcp_next_iss+0x44>)
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	4b09      	ldr	r3, [pc, #36]	@ (8010b40 <tcp_next_iss+0x48>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	4a07      	ldr	r2, [pc, #28]	@ (8010b3c <tcp_next_iss+0x44>)
 8010b20:	6013      	str	r3, [r2, #0]
  return iss;
 8010b22:	4b06      	ldr	r3, [pc, #24]	@ (8010b3c <tcp_next_iss+0x44>)
 8010b24:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	08019ccc 	.word	0x08019ccc
 8010b34:	0801a3bc 	.word	0x0801a3bc
 8010b38:	08019d10 	.word	0x08019d10
 8010b3c:	200000c4 	.word	0x200000c4
 8010b40:	2000d570 	.word	0x2000d570

08010b44 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b086      	sub	sp, #24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
 8010b50:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d106      	bne.n	8010b66 <tcp_eff_send_mss_netif+0x22>
 8010b58:	4b14      	ldr	r3, [pc, #80]	@ (8010bac <tcp_eff_send_mss_netif+0x68>)
 8010b5a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010b5e:	4914      	ldr	r1, [pc, #80]	@ (8010bb0 <tcp_eff_send_mss_netif+0x6c>)
 8010b60:	4814      	ldr	r0, [pc, #80]	@ (8010bb4 <tcp_eff_send_mss_netif+0x70>)
 8010b62:	f007 fb49 	bl	80181f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d101      	bne.n	8010b70 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010b6c:	89fb      	ldrh	r3, [r7, #14]
 8010b6e:	e019      	b.n	8010ba4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010b74:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010b76:	8afb      	ldrh	r3, [r7, #22]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d012      	beq.n	8010ba2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010b7c:	2328      	movs	r3, #40	@ 0x28
 8010b7e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010b80:	8afa      	ldrh	r2, [r7, #22]
 8010b82:	8abb      	ldrh	r3, [r7, #20]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d904      	bls.n	8010b92 <tcp_eff_send_mss_netif+0x4e>
 8010b88:	8afa      	ldrh	r2, [r7, #22]
 8010b8a:	8abb      	ldrh	r3, [r7, #20]
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	e000      	b.n	8010b94 <tcp_eff_send_mss_netif+0x50>
 8010b92:	2300      	movs	r3, #0
 8010b94:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010b96:	8a7a      	ldrh	r2, [r7, #18]
 8010b98:	89fb      	ldrh	r3, [r7, #14]
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	bf28      	it	cs
 8010b9e:	4613      	movcs	r3, r2
 8010ba0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	08019ccc 	.word	0x08019ccc
 8010bb0:	0801a3d8 	.word	0x0801a3d8
 8010bb4:	08019d10 	.word	0x08019d10

08010bb8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d119      	bne.n	8010c00 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010bcc:	4b10      	ldr	r3, [pc, #64]	@ (8010c10 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010bce:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010bd2:	4910      	ldr	r1, [pc, #64]	@ (8010c14 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010bd4:	4810      	ldr	r0, [pc, #64]	@ (8010c18 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010bd6:	f007 fb0f 	bl	80181f8 <iprintf>

  while (pcb != NULL) {
 8010bda:	e011      	b.n	8010c00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d108      	bne.n	8010bfa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f7fe ffc4 	bl	800fb7c <tcp_abort>
      pcb = next;
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	60fb      	str	r3, [r7, #12]
 8010bf8:	e002      	b.n	8010c00 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1ea      	bne.n	8010bdc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010c06:	bf00      	nop
 8010c08:	bf00      	nop
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	08019ccc 	.word	0x08019ccc
 8010c14:	0801a400 	.word	0x0801a400
 8010c18:	08019d10 	.word	0x08019d10

08010c1c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d02a      	beq.n	8010c82 <tcp_netif_ip_addr_changed+0x66>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d026      	beq.n	8010c82 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010c34:	4b15      	ldr	r3, [pc, #84]	@ (8010c8c <tcp_netif_ip_addr_changed+0x70>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4619      	mov	r1, r3
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f7ff ffbc 	bl	8010bb8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010c40:	4b13      	ldr	r3, [pc, #76]	@ (8010c90 <tcp_netif_ip_addr_changed+0x74>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4619      	mov	r1, r3
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff ffb6 	bl	8010bb8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d017      	beq.n	8010c82 <tcp_netif_ip_addr_changed+0x66>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d013      	beq.n	8010c82 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8010c94 <tcp_netif_ip_addr_changed+0x78>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	e00c      	b.n	8010c7c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	681a      	ldr	r2, [r3, #0]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d103      	bne.n	8010c76 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	60fb      	str	r3, [r7, #12]
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1ef      	bne.n	8010c62 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010c82:	bf00      	nop
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	2000d57c 	.word	0x2000d57c
 8010c90:	2000d574 	.word	0x2000d574
 8010c94:	2000d578 	.word	0x2000d578

08010c98 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d007      	beq.n	8010cb8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7ff fc3d 	bl	801052c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010cb8:	bf00      	nop
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010cc0:	b590      	push	{r4, r7, lr}
 8010cc2:	b08d      	sub	sp, #52	@ 0x34
 8010cc4:	af04      	add	r7, sp, #16
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d105      	bne.n	8010cdc <tcp_input+0x1c>
 8010cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8010f40 <tcp_input+0x280>)
 8010cd2:	2283      	movs	r2, #131	@ 0x83
 8010cd4:	499b      	ldr	r1, [pc, #620]	@ (8010f44 <tcp_input+0x284>)
 8010cd6:	489c      	ldr	r0, [pc, #624]	@ (8010f48 <tcp_input+0x288>)
 8010cd8:	f007 fa8e 	bl	80181f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	4a9a      	ldr	r2, [pc, #616]	@ (8010f4c <tcp_input+0x28c>)
 8010ce2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	895b      	ldrh	r3, [r3, #10]
 8010ce8:	2b13      	cmp	r3, #19
 8010cea:	f240 83d1 	bls.w	8011490 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010cee:	4b98      	ldr	r3, [pc, #608]	@ (8010f50 <tcp_input+0x290>)
 8010cf0:	695b      	ldr	r3, [r3, #20]
 8010cf2:	4a97      	ldr	r2, [pc, #604]	@ (8010f50 <tcp_input+0x290>)
 8010cf4:	6812      	ldr	r2, [r2, #0]
 8010cf6:	4611      	mov	r1, r2
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f005 fc41 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	f040 83c7 	bne.w	8011494 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010d06:	4b92      	ldr	r3, [pc, #584]	@ (8010f50 <tcp_input+0x290>)
 8010d08:	695b      	ldr	r3, [r3, #20]
 8010d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010d0e:	2be0      	cmp	r3, #224	@ 0xe0
 8010d10:	f000 83c0 	beq.w	8011494 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010d14:	4b8d      	ldr	r3, [pc, #564]	@ (8010f4c <tcp_input+0x28c>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	899b      	ldrh	r3, [r3, #12]
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fc fda7 	bl	800d870 <lwip_htons>
 8010d22:	4603      	mov	r3, r0
 8010d24:	0b1b      	lsrs	r3, r3, #12
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010d2e:	7cbb      	ldrb	r3, [r7, #18]
 8010d30:	2b13      	cmp	r3, #19
 8010d32:	f240 83b1 	bls.w	8011498 <tcp_input+0x7d8>
 8010d36:	7cbb      	ldrb	r3, [r7, #18]
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	891b      	ldrh	r3, [r3, #8]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	f200 83aa 	bhi.w	8011498 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010d44:	7cbb      	ldrb	r3, [r7, #18]
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	3b14      	subs	r3, #20
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	4b81      	ldr	r3, [pc, #516]	@ (8010f54 <tcp_input+0x294>)
 8010d4e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010d50:	4b81      	ldr	r3, [pc, #516]	@ (8010f58 <tcp_input+0x298>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	895a      	ldrh	r2, [r3, #10]
 8010d5a:	7cbb      	ldrb	r3, [r7, #18]
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d309      	bcc.n	8010d76 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010d62:	4b7c      	ldr	r3, [pc, #496]	@ (8010f54 <tcp_input+0x294>)
 8010d64:	881a      	ldrh	r2, [r3, #0]
 8010d66:	4b7d      	ldr	r3, [pc, #500]	@ (8010f5c <tcp_input+0x29c>)
 8010d68:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010d6a:	7cbb      	ldrb	r3, [r7, #18]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7fe f8ea 	bl	800ef48 <pbuf_remove_header>
 8010d74:	e04e      	b.n	8010e14 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d105      	bne.n	8010d8a <tcp_input+0xca>
 8010d7e:	4b70      	ldr	r3, [pc, #448]	@ (8010f40 <tcp_input+0x280>)
 8010d80:	22c2      	movs	r2, #194	@ 0xc2
 8010d82:	4977      	ldr	r1, [pc, #476]	@ (8010f60 <tcp_input+0x2a0>)
 8010d84:	4870      	ldr	r0, [pc, #448]	@ (8010f48 <tcp_input+0x288>)
 8010d86:	f007 fa37 	bl	80181f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010d8a:	2114      	movs	r1, #20
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fe f8db 	bl	800ef48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	895a      	ldrh	r2, [r3, #10]
 8010d96:	4b71      	ldr	r3, [pc, #452]	@ (8010f5c <tcp_input+0x29c>)
 8010d98:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8010f54 <tcp_input+0x294>)
 8010d9c:	881a      	ldrh	r2, [r3, #0]
 8010d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8010f5c <tcp_input+0x29c>)
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	1ad3      	subs	r3, r2, r3
 8010da4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010da6:	4b6d      	ldr	r3, [pc, #436]	@ (8010f5c <tcp_input+0x29c>)
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	4619      	mov	r1, r3
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7fe f8cb 	bl	800ef48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	895b      	ldrh	r3, [r3, #10]
 8010db8:	8a3a      	ldrh	r2, [r7, #16]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	f200 836e 	bhi.w	801149c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	4a64      	ldr	r2, [pc, #400]	@ (8010f58 <tcp_input+0x298>)
 8010dc8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	8a3a      	ldrh	r2, [r7, #16]
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fe f8b8 	bl	800ef48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	891a      	ldrh	r2, [r3, #8]
 8010ddc:	8a3b      	ldrh	r3, [r7, #16]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d005      	beq.n	8010dfa <tcp_input+0x13a>
 8010dee:	4b54      	ldr	r3, [pc, #336]	@ (8010f40 <tcp_input+0x280>)
 8010df0:	22df      	movs	r2, #223	@ 0xdf
 8010df2:	495c      	ldr	r1, [pc, #368]	@ (8010f64 <tcp_input+0x2a4>)
 8010df4:	4854      	ldr	r0, [pc, #336]	@ (8010f48 <tcp_input+0x288>)
 8010df6:	f007 f9ff 	bl	80181f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	891b      	ldrh	r3, [r3, #8]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d005      	beq.n	8010e14 <tcp_input+0x154>
 8010e08:	4b4d      	ldr	r3, [pc, #308]	@ (8010f40 <tcp_input+0x280>)
 8010e0a:	22e0      	movs	r2, #224	@ 0xe0
 8010e0c:	4956      	ldr	r1, [pc, #344]	@ (8010f68 <tcp_input+0x2a8>)
 8010e0e:	484e      	ldr	r0, [pc, #312]	@ (8010f48 <tcp_input+0x288>)
 8010e10:	f007 f9f2 	bl	80181f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010e14:	4b4d      	ldr	r3, [pc, #308]	@ (8010f4c <tcp_input+0x28c>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8010f4c <tcp_input+0x28c>)
 8010e1e:	6814      	ldr	r4, [r2, #0]
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fc fd25 	bl	800d870 <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010e2a:	4b48      	ldr	r3, [pc, #288]	@ (8010f4c <tcp_input+0x28c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	885b      	ldrh	r3, [r3, #2]
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	4a46      	ldr	r2, [pc, #280]	@ (8010f4c <tcp_input+0x28c>)
 8010e34:	6814      	ldr	r4, [r2, #0]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7fc fd1a 	bl	800d870 <lwip_htons>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010e40:	4b42      	ldr	r3, [pc, #264]	@ (8010f4c <tcp_input+0x28c>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	4a41      	ldr	r2, [pc, #260]	@ (8010f4c <tcp_input+0x28c>)
 8010e48:	6814      	ldr	r4, [r2, #0]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fc fd25 	bl	800d89a <lwip_htonl>
 8010e50:	4603      	mov	r3, r0
 8010e52:	6063      	str	r3, [r4, #4]
 8010e54:	6863      	ldr	r3, [r4, #4]
 8010e56:	4a45      	ldr	r2, [pc, #276]	@ (8010f6c <tcp_input+0x2ac>)
 8010e58:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8010f4c <tcp_input+0x28c>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	4a3a      	ldr	r2, [pc, #232]	@ (8010f4c <tcp_input+0x28c>)
 8010e62:	6814      	ldr	r4, [r2, #0]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fc fd18 	bl	800d89a <lwip_htonl>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	60a3      	str	r3, [r4, #8]
 8010e6e:	68a3      	ldr	r3, [r4, #8]
 8010e70:	4a3f      	ldr	r2, [pc, #252]	@ (8010f70 <tcp_input+0x2b0>)
 8010e72:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010e74:	4b35      	ldr	r3, [pc, #212]	@ (8010f4c <tcp_input+0x28c>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	89db      	ldrh	r3, [r3, #14]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	4a33      	ldr	r2, [pc, #204]	@ (8010f4c <tcp_input+0x28c>)
 8010e7e:	6814      	ldr	r4, [r2, #0]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fc fcf5 	bl	800d870 <lwip_htons>
 8010e86:	4603      	mov	r3, r0
 8010e88:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010e8a:	4b30      	ldr	r3, [pc, #192]	@ (8010f4c <tcp_input+0x28c>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	899b      	ldrh	r3, [r3, #12]
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fc fcec 	bl	800d870 <lwip_htons>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ea0:	b2da      	uxtb	r2, r3
 8010ea2:	4b34      	ldr	r3, [pc, #208]	@ (8010f74 <tcp_input+0x2b4>)
 8010ea4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	891a      	ldrh	r2, [r3, #8]
 8010eaa:	4b33      	ldr	r3, [pc, #204]	@ (8010f78 <tcp_input+0x2b8>)
 8010eac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010eae:	4b31      	ldr	r3, [pc, #196]	@ (8010f74 <tcp_input+0x2b4>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	f003 0303 	and.w	r3, r3, #3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00c      	beq.n	8010ed4 <tcp_input+0x214>
    tcplen++;
 8010eba:	4b2f      	ldr	r3, [pc, #188]	@ (8010f78 <tcp_input+0x2b8>)
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8010f78 <tcp_input+0x2b8>)
 8010ec4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	891a      	ldrh	r2, [r3, #8]
 8010eca:	4b2b      	ldr	r3, [pc, #172]	@ (8010f78 <tcp_input+0x2b8>)
 8010ecc:	881b      	ldrh	r3, [r3, #0]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	f200 82e6 	bhi.w	80114a0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ed8:	4b28      	ldr	r3, [pc, #160]	@ (8010f7c <tcp_input+0x2bc>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	61fb      	str	r3, [r7, #28]
 8010ede:	e09d      	b.n	801101c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	7d1b      	ldrb	r3, [r3, #20]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d105      	bne.n	8010ef4 <tcp_input+0x234>
 8010ee8:	4b15      	ldr	r3, [pc, #84]	@ (8010f40 <tcp_input+0x280>)
 8010eea:	22fb      	movs	r2, #251	@ 0xfb
 8010eec:	4924      	ldr	r1, [pc, #144]	@ (8010f80 <tcp_input+0x2c0>)
 8010eee:	4816      	ldr	r0, [pc, #88]	@ (8010f48 <tcp_input+0x288>)
 8010ef0:	f007 f982 	bl	80181f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	7d1b      	ldrb	r3, [r3, #20]
 8010ef8:	2b0a      	cmp	r3, #10
 8010efa:	d105      	bne.n	8010f08 <tcp_input+0x248>
 8010efc:	4b10      	ldr	r3, [pc, #64]	@ (8010f40 <tcp_input+0x280>)
 8010efe:	22fc      	movs	r2, #252	@ 0xfc
 8010f00:	4920      	ldr	r1, [pc, #128]	@ (8010f84 <tcp_input+0x2c4>)
 8010f02:	4811      	ldr	r0, [pc, #68]	@ (8010f48 <tcp_input+0x288>)
 8010f04:	f007 f978 	bl	80181f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	7d1b      	ldrb	r3, [r3, #20]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d105      	bne.n	8010f1c <tcp_input+0x25c>
 8010f10:	4b0b      	ldr	r3, [pc, #44]	@ (8010f40 <tcp_input+0x280>)
 8010f12:	22fd      	movs	r2, #253	@ 0xfd
 8010f14:	491c      	ldr	r1, [pc, #112]	@ (8010f88 <tcp_input+0x2c8>)
 8010f16:	480c      	ldr	r0, [pc, #48]	@ (8010f48 <tcp_input+0x288>)
 8010f18:	f007 f96e 	bl	80181f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	7a1b      	ldrb	r3, [r3, #8]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d033      	beq.n	8010f8c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	7a1a      	ldrb	r2, [r3, #8]
 8010f28:	4b09      	ldr	r3, [pc, #36]	@ (8010f50 <tcp_input+0x290>)
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010f30:	3301      	adds	r3, #1
 8010f32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d029      	beq.n	8010f8c <tcp_input+0x2cc>
      prev = pcb;
 8010f38:	69fb      	ldr	r3, [r7, #28]
 8010f3a:	61bb      	str	r3, [r7, #24]
      continue;
 8010f3c:	e06b      	b.n	8011016 <tcp_input+0x356>
 8010f3e:	bf00      	nop
 8010f40:	0801a434 	.word	0x0801a434
 8010f44:	0801a468 	.word	0x0801a468
 8010f48:	0801a480 	.word	0x0801a480
 8010f4c:	2000d598 	.word	0x2000d598
 8010f50:	20009e1c 	.word	0x20009e1c
 8010f54:	2000d59c 	.word	0x2000d59c
 8010f58:	2000d5a0 	.word	0x2000d5a0
 8010f5c:	2000d59e 	.word	0x2000d59e
 8010f60:	0801a4a8 	.word	0x0801a4a8
 8010f64:	0801a4b8 	.word	0x0801a4b8
 8010f68:	0801a4c4 	.word	0x0801a4c4
 8010f6c:	2000d5a8 	.word	0x2000d5a8
 8010f70:	2000d5ac 	.word	0x2000d5ac
 8010f74:	2000d5b4 	.word	0x2000d5b4
 8010f78:	2000d5b2 	.word	0x2000d5b2
 8010f7c:	2000d57c 	.word	0x2000d57c
 8010f80:	0801a4e4 	.word	0x0801a4e4
 8010f84:	0801a50c 	.word	0x0801a50c
 8010f88:	0801a538 	.word	0x0801a538
    }

    if (pcb->remote_port == tcphdr->src &&
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	8b1a      	ldrh	r2, [r3, #24]
 8010f90:	4b72      	ldr	r3, [pc, #456]	@ (801115c <tcp_input+0x49c>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	881b      	ldrh	r3, [r3, #0]
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d13a      	bne.n	8011012 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	8ada      	ldrh	r2, [r3, #22]
 8010fa0:	4b6e      	ldr	r3, [pc, #440]	@ (801115c <tcp_input+0x49c>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	885b      	ldrh	r3, [r3, #2]
 8010fa6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d132      	bne.n	8011012 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	685a      	ldr	r2, [r3, #4]
 8010fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8011160 <tcp_input+0x4a0>)
 8010fb2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d12c      	bne.n	8011012 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	4b68      	ldr	r3, [pc, #416]	@ (8011160 <tcp_input+0x4a0>)
 8010fbe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d126      	bne.n	8011012 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	69fa      	ldr	r2, [r7, #28]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d106      	bne.n	8010fdc <tcp_input+0x31c>
 8010fce:	4b65      	ldr	r3, [pc, #404]	@ (8011164 <tcp_input+0x4a4>)
 8010fd0:	f240 120d 	movw	r2, #269	@ 0x10d
 8010fd4:	4964      	ldr	r1, [pc, #400]	@ (8011168 <tcp_input+0x4a8>)
 8010fd6:	4865      	ldr	r0, [pc, #404]	@ (801116c <tcp_input+0x4ac>)
 8010fd8:	f007 f90e 	bl	80181f8 <iprintf>
      if (prev != NULL) {
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00a      	beq.n	8010ff8 <tcp_input+0x338>
        prev->next = pcb->next;
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	68da      	ldr	r2, [r3, #12]
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010fea:	4b61      	ldr	r3, [pc, #388]	@ (8011170 <tcp_input+0x4b0>)
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8011170 <tcp_input+0x4b0>)
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d111      	bne.n	8011026 <tcp_input+0x366>
 8011002:	4b58      	ldr	r3, [pc, #352]	@ (8011164 <tcp_input+0x4a4>)
 8011004:	f240 1215 	movw	r2, #277	@ 0x115
 8011008:	495a      	ldr	r1, [pc, #360]	@ (8011174 <tcp_input+0x4b4>)
 801100a:	4858      	ldr	r0, [pc, #352]	@ (801116c <tcp_input+0x4ac>)
 801100c:	f007 f8f4 	bl	80181f8 <iprintf>
      break;
 8011010:	e009      	b.n	8011026 <tcp_input+0x366>
    }
    prev = pcb;
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	61fb      	str	r3, [r7, #28]
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	2b00      	cmp	r3, #0
 8011020:	f47f af5e 	bne.w	8010ee0 <tcp_input+0x220>
 8011024:	e000      	b.n	8011028 <tcp_input+0x368>
      break;
 8011026:	bf00      	nop
  }

  if (pcb == NULL) {
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	2b00      	cmp	r3, #0
 801102c:	f040 80aa 	bne.w	8011184 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011030:	4b51      	ldr	r3, [pc, #324]	@ (8011178 <tcp_input+0x4b8>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	61fb      	str	r3, [r7, #28]
 8011036:	e03f      	b.n	80110b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	7d1b      	ldrb	r3, [r3, #20]
 801103c:	2b0a      	cmp	r3, #10
 801103e:	d006      	beq.n	801104e <tcp_input+0x38e>
 8011040:	4b48      	ldr	r3, [pc, #288]	@ (8011164 <tcp_input+0x4a4>)
 8011042:	f240 121f 	movw	r2, #287	@ 0x11f
 8011046:	494d      	ldr	r1, [pc, #308]	@ (801117c <tcp_input+0x4bc>)
 8011048:	4848      	ldr	r0, [pc, #288]	@ (801116c <tcp_input+0x4ac>)
 801104a:	f007 f8d5 	bl	80181f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	7a1b      	ldrb	r3, [r3, #8]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d009      	beq.n	801106a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	7a1a      	ldrb	r2, [r3, #8]
 801105a:	4b41      	ldr	r3, [pc, #260]	@ (8011160 <tcp_input+0x4a0>)
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011062:	3301      	adds	r3, #1
 8011064:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011066:	429a      	cmp	r2, r3
 8011068:	d122      	bne.n	80110b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	8b1a      	ldrh	r2, [r3, #24]
 801106e:	4b3b      	ldr	r3, [pc, #236]	@ (801115c <tcp_input+0x49c>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	b29b      	uxth	r3, r3
 8011076:	429a      	cmp	r2, r3
 8011078:	d11b      	bne.n	80110b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801107a:	69fb      	ldr	r3, [r7, #28]
 801107c:	8ada      	ldrh	r2, [r3, #22]
 801107e:	4b37      	ldr	r3, [pc, #220]	@ (801115c <tcp_input+0x49c>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	885b      	ldrh	r3, [r3, #2]
 8011084:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011086:	429a      	cmp	r2, r3
 8011088:	d113      	bne.n	80110b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	685a      	ldr	r2, [r3, #4]
 801108e:	4b34      	ldr	r3, [pc, #208]	@ (8011160 <tcp_input+0x4a0>)
 8011090:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011092:	429a      	cmp	r2, r3
 8011094:	d10d      	bne.n	80110b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	4b31      	ldr	r3, [pc, #196]	@ (8011160 <tcp_input+0x4a0>)
 801109c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801109e:	429a      	cmp	r2, r3
 80110a0:	d107      	bne.n	80110b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80110a2:	69f8      	ldr	r0, [r7, #28]
 80110a4:	f000 fb56 	bl	8011754 <tcp_timewait_input>
        }
        pbuf_free(p);
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7fd ffd3 	bl	800f054 <pbuf_free>
        return;
 80110ae:	e1fd      	b.n	80114ac <tcp_input+0x7ec>
        continue;
 80110b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	61fb      	str	r3, [r7, #28]
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1bc      	bne.n	8011038 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80110be:	2300      	movs	r3, #0
 80110c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110c2:	4b2f      	ldr	r3, [pc, #188]	@ (8011180 <tcp_input+0x4c0>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	617b      	str	r3, [r7, #20]
 80110c8:	e02a      	b.n	8011120 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	7a1b      	ldrb	r3, [r3, #8]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00c      	beq.n	80110ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	7a1a      	ldrb	r2, [r3, #8]
 80110d6:	4b22      	ldr	r3, [pc, #136]	@ (8011160 <tcp_input+0x4a0>)
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110de:	3301      	adds	r3, #1
 80110e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d002      	beq.n	80110ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	61bb      	str	r3, [r7, #24]
        continue;
 80110ea:	e016      	b.n	801111a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	8ada      	ldrh	r2, [r3, #22]
 80110f0:	4b1a      	ldr	r3, [pc, #104]	@ (801115c <tcp_input+0x49c>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	885b      	ldrh	r3, [r3, #2]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d10c      	bne.n	8011116 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	4b17      	ldr	r3, [pc, #92]	@ (8011160 <tcp_input+0x4a0>)
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	429a      	cmp	r2, r3
 8011106:	d00f      	beq.n	8011128 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d00d      	beq.n	801112a <tcp_input+0x46a>
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d009      	beq.n	801112a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	617b      	str	r3, [r7, #20]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d1d1      	bne.n	80110ca <tcp_input+0x40a>
 8011126:	e000      	b.n	801112a <tcp_input+0x46a>
            break;
 8011128:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d029      	beq.n	8011184 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00a      	beq.n	801114c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	68da      	ldr	r2, [r3, #12]
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801113e:	4b10      	ldr	r3, [pc, #64]	@ (8011180 <tcp_input+0x4c0>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011146:	4a0e      	ldr	r2, [pc, #56]	@ (8011180 <tcp_input+0x4c0>)
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801114c:	6978      	ldr	r0, [r7, #20]
 801114e:	f000 fa03 	bl	8011558 <tcp_listen_input>
      }
      pbuf_free(p);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f7fd ff7e 	bl	800f054 <pbuf_free>
      return;
 8011158:	e1a8      	b.n	80114ac <tcp_input+0x7ec>
 801115a:	bf00      	nop
 801115c:	2000d598 	.word	0x2000d598
 8011160:	20009e1c 	.word	0x20009e1c
 8011164:	0801a434 	.word	0x0801a434
 8011168:	0801a560 	.word	0x0801a560
 801116c:	0801a480 	.word	0x0801a480
 8011170:	2000d57c 	.word	0x2000d57c
 8011174:	0801a58c 	.word	0x0801a58c
 8011178:	2000d580 	.word	0x2000d580
 801117c:	0801a5b8 	.word	0x0801a5b8
 8011180:	2000d578 	.word	0x2000d578
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	2b00      	cmp	r3, #0
 8011188:	f000 8158 	beq.w	801143c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801118c:	4b95      	ldr	r3, [pc, #596]	@ (80113e4 <tcp_input+0x724>)
 801118e:	2200      	movs	r2, #0
 8011190:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	891a      	ldrh	r2, [r3, #8]
 8011196:	4b93      	ldr	r3, [pc, #588]	@ (80113e4 <tcp_input+0x724>)
 8011198:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801119a:	4a92      	ldr	r2, [pc, #584]	@ (80113e4 <tcp_input+0x724>)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80111a0:	4b91      	ldr	r3, [pc, #580]	@ (80113e8 <tcp_input+0x728>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a8f      	ldr	r2, [pc, #572]	@ (80113e4 <tcp_input+0x724>)
 80111a6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80111a8:	4b90      	ldr	r3, [pc, #576]	@ (80113ec <tcp_input+0x72c>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80111ae:	4b90      	ldr	r3, [pc, #576]	@ (80113f0 <tcp_input+0x730>)
 80111b0:	2200      	movs	r2, #0
 80111b2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80111b4:	4b8f      	ldr	r3, [pc, #572]	@ (80113f4 <tcp_input+0x734>)
 80111b6:	2200      	movs	r2, #0
 80111b8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80111ba:	4b8f      	ldr	r3, [pc, #572]	@ (80113f8 <tcp_input+0x738>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	f003 0308 	and.w	r3, r3, #8
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d006      	beq.n	80111d4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	7b5b      	ldrb	r3, [r3, #13]
 80111ca:	f043 0301 	orr.w	r3, r3, #1
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d017      	beq.n	801120c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111dc:	69f8      	ldr	r0, [r7, #28]
 80111de:	f7ff f929 	bl	8010434 <tcp_process_refused_data>
 80111e2:	4603      	mov	r3, r0
 80111e4:	f113 0f0d 	cmn.w	r3, #13
 80111e8:	d007      	beq.n	80111fa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00c      	beq.n	801120c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111f2:	4b82      	ldr	r3, [pc, #520]	@ (80113fc <tcp_input+0x73c>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d008      	beq.n	801120c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f040 80e3 	bne.w	80113ca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011204:	69f8      	ldr	r0, [r7, #28]
 8011206:	f003 f9a7 	bl	8014558 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801120a:	e0de      	b.n	80113ca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801120c:	4a7c      	ldr	r2, [pc, #496]	@ (8011400 <tcp_input+0x740>)
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011212:	69f8      	ldr	r0, [r7, #28]
 8011214:	f000 fb18 	bl	8011848 <tcp_process>
 8011218:	4603      	mov	r3, r0
 801121a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801121c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011220:	f113 0f0d 	cmn.w	r3, #13
 8011224:	f000 80d3 	beq.w	80113ce <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011228:	4b71      	ldr	r3, [pc, #452]	@ (80113f0 <tcp_input+0x730>)
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	f003 0308 	and.w	r3, r3, #8
 8011230:	2b00      	cmp	r3, #0
 8011232:	d015      	beq.n	8011260 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801123a:	2b00      	cmp	r3, #0
 801123c:	d008      	beq.n	8011250 <tcp_input+0x590>
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011244:	69fa      	ldr	r2, [r7, #28]
 8011246:	6912      	ldr	r2, [r2, #16]
 8011248:	f06f 010d 	mvn.w	r1, #13
 801124c:	4610      	mov	r0, r2
 801124e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011250:	69f9      	ldr	r1, [r7, #28]
 8011252:	486c      	ldr	r0, [pc, #432]	@ (8011404 <tcp_input+0x744>)
 8011254:	f7ff fbbc 	bl	80109d0 <tcp_pcb_remove>
        tcp_free(pcb);
 8011258:	69f8      	ldr	r0, [r7, #28]
 801125a:	f7fe f9a7 	bl	800f5ac <tcp_free>
 801125e:	e0da      	b.n	8011416 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011264:	4b63      	ldr	r3, [pc, #396]	@ (80113f4 <tcp_input+0x734>)
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d01d      	beq.n	80112a8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801126c:	4b61      	ldr	r3, [pc, #388]	@ (80113f4 <tcp_input+0x734>)
 801126e:	881b      	ldrh	r3, [r3, #0]
 8011270:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011278:	2b00      	cmp	r3, #0
 801127a:	d00a      	beq.n	8011292 <tcp_input+0x5d2>
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011282:	69fa      	ldr	r2, [r7, #28]
 8011284:	6910      	ldr	r0, [r2, #16]
 8011286:	89fa      	ldrh	r2, [r7, #14]
 8011288:	69f9      	ldr	r1, [r7, #28]
 801128a:	4798      	blx	r3
 801128c:	4603      	mov	r3, r0
 801128e:	74fb      	strb	r3, [r7, #19]
 8011290:	e001      	b.n	8011296 <tcp_input+0x5d6>
 8011292:	2300      	movs	r3, #0
 8011294:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011296:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801129a:	f113 0f0d 	cmn.w	r3, #13
 801129e:	f000 8098 	beq.w	80113d2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80112a2:	4b54      	ldr	r3, [pc, #336]	@ (80113f4 <tcp_input+0x734>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80112a8:	69f8      	ldr	r0, [r7, #28]
 80112aa:	f000 f915 	bl	80114d8 <tcp_input_delayed_close>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f040 8090 	bne.w	80113d6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80112b6:	4b4d      	ldr	r3, [pc, #308]	@ (80113ec <tcp_input+0x72c>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d041      	beq.n	8011342 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d006      	beq.n	80112d4 <tcp_input+0x614>
 80112c6:	4b50      	ldr	r3, [pc, #320]	@ (8011408 <tcp_input+0x748>)
 80112c8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80112cc:	494f      	ldr	r1, [pc, #316]	@ (801140c <tcp_input+0x74c>)
 80112ce:	4850      	ldr	r0, [pc, #320]	@ (8011410 <tcp_input+0x750>)
 80112d0:	f006 ff92 	bl	80181f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	8b5b      	ldrh	r3, [r3, #26]
 80112d8:	f003 0310 	and.w	r3, r3, #16
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d008      	beq.n	80112f2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80112e0:	4b42      	ldr	r3, [pc, #264]	@ (80113ec <tcp_input+0x72c>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fd feb5 	bl	800f054 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80112ea:	69f8      	ldr	r0, [r7, #28]
 80112ec:	f7fe fc46 	bl	800fb7c <tcp_abort>
            goto aborted;
 80112f0:	e091      	b.n	8011416 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d00c      	beq.n	8011316 <tcp_input+0x656>
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	6918      	ldr	r0, [r3, #16]
 8011306:	4b39      	ldr	r3, [pc, #228]	@ (80113ec <tcp_input+0x72c>)
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	2300      	movs	r3, #0
 801130c:	69f9      	ldr	r1, [r7, #28]
 801130e:	47a0      	blx	r4
 8011310:	4603      	mov	r3, r0
 8011312:	74fb      	strb	r3, [r7, #19]
 8011314:	e008      	b.n	8011328 <tcp_input+0x668>
 8011316:	4b35      	ldr	r3, [pc, #212]	@ (80113ec <tcp_input+0x72c>)
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	2300      	movs	r3, #0
 801131c:	69f9      	ldr	r1, [r7, #28]
 801131e:	2000      	movs	r0, #0
 8011320:	f7ff f95e 	bl	80105e0 <tcp_recv_null>
 8011324:	4603      	mov	r3, r0
 8011326:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801132c:	f113 0f0d 	cmn.w	r3, #13
 8011330:	d053      	beq.n	80113da <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d003      	beq.n	8011342 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801133a:	4b2c      	ldr	r3, [pc, #176]	@ (80113ec <tcp_input+0x72c>)
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011342:	4b2b      	ldr	r3, [pc, #172]	@ (80113f0 <tcp_input+0x730>)
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	f003 0320 	and.w	r3, r3, #32
 801134a:	2b00      	cmp	r3, #0
 801134c:	d030      	beq.n	80113b0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011352:	2b00      	cmp	r3, #0
 8011354:	d009      	beq.n	801136a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801135a:	7b5a      	ldrb	r2, [r3, #13]
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011360:	f042 0220 	orr.w	r2, r2, #32
 8011364:	b2d2      	uxtb	r2, r2
 8011366:	735a      	strb	r2, [r3, #13]
 8011368:	e022      	b.n	80113b0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801136e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011372:	d005      	beq.n	8011380 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011378:	3301      	adds	r3, #1
 801137a:	b29a      	uxth	r2, r3
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00b      	beq.n	80113a2 <tcp_input+0x6e2>
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	6918      	ldr	r0, [r3, #16]
 8011394:	2300      	movs	r3, #0
 8011396:	2200      	movs	r2, #0
 8011398:	69f9      	ldr	r1, [r7, #28]
 801139a:	47a0      	blx	r4
 801139c:	4603      	mov	r3, r0
 801139e:	74fb      	strb	r3, [r7, #19]
 80113a0:	e001      	b.n	80113a6 <tcp_input+0x6e6>
 80113a2:	2300      	movs	r3, #0
 80113a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80113a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113aa:	f113 0f0d 	cmn.w	r3, #13
 80113ae:	d016      	beq.n	80113de <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80113b0:	4b13      	ldr	r3, [pc, #76]	@ (8011400 <tcp_input+0x740>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80113b6:	69f8      	ldr	r0, [r7, #28]
 80113b8:	f000 f88e 	bl	80114d8 <tcp_input_delayed_close>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d128      	bne.n	8011414 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80113c2:	69f8      	ldr	r0, [r7, #28]
 80113c4:	f002 fac2 	bl	801394c <tcp_output>
 80113c8:	e025      	b.n	8011416 <tcp_input+0x756>
        goto aborted;
 80113ca:	bf00      	nop
 80113cc:	e023      	b.n	8011416 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80113ce:	bf00      	nop
 80113d0:	e021      	b.n	8011416 <tcp_input+0x756>
              goto aborted;
 80113d2:	bf00      	nop
 80113d4:	e01f      	b.n	8011416 <tcp_input+0x756>
          goto aborted;
 80113d6:	bf00      	nop
 80113d8:	e01d      	b.n	8011416 <tcp_input+0x756>
            goto aborted;
 80113da:	bf00      	nop
 80113dc:	e01b      	b.n	8011416 <tcp_input+0x756>
              goto aborted;
 80113de:	bf00      	nop
 80113e0:	e019      	b.n	8011416 <tcp_input+0x756>
 80113e2:	bf00      	nop
 80113e4:	2000d588 	.word	0x2000d588
 80113e8:	2000d598 	.word	0x2000d598
 80113ec:	2000d5b8 	.word	0x2000d5b8
 80113f0:	2000d5b5 	.word	0x2000d5b5
 80113f4:	2000d5b0 	.word	0x2000d5b0
 80113f8:	2000d5b4 	.word	0x2000d5b4
 80113fc:	2000d5b2 	.word	0x2000d5b2
 8011400:	2000d5bc 	.word	0x2000d5bc
 8011404:	2000d57c 	.word	0x2000d57c
 8011408:	0801a434 	.word	0x0801a434
 801140c:	0801a5e8 	.word	0x0801a5e8
 8011410:	0801a480 	.word	0x0801a480
          goto aborted;
 8011414:	bf00      	nop
    tcp_input_pcb = NULL;
 8011416:	4b27      	ldr	r3, [pc, #156]	@ (80114b4 <tcp_input+0x7f4>)
 8011418:	2200      	movs	r2, #0
 801141a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801141c:	4b26      	ldr	r3, [pc, #152]	@ (80114b8 <tcp_input+0x7f8>)
 801141e:	2200      	movs	r2, #0
 8011420:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011422:	4b26      	ldr	r3, [pc, #152]	@ (80114bc <tcp_input+0x7fc>)
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d03f      	beq.n	80114aa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801142a:	4b24      	ldr	r3, [pc, #144]	@ (80114bc <tcp_input+0x7fc>)
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	4618      	mov	r0, r3
 8011430:	f7fd fe10 	bl	800f054 <pbuf_free>
      inseg.p = NULL;
 8011434:	4b21      	ldr	r3, [pc, #132]	@ (80114bc <tcp_input+0x7fc>)
 8011436:	2200      	movs	r2, #0
 8011438:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801143a:	e036      	b.n	80114aa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801143c:	4b20      	ldr	r3, [pc, #128]	@ (80114c0 <tcp_input+0x800>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	899b      	ldrh	r3, [r3, #12]
 8011442:	b29b      	uxth	r3, r3
 8011444:	4618      	mov	r0, r3
 8011446:	f7fc fa13 	bl	800d870 <lwip_htons>
 801144a:	4603      	mov	r3, r0
 801144c:	b2db      	uxtb	r3, r3
 801144e:	f003 0304 	and.w	r3, r3, #4
 8011452:	2b00      	cmp	r3, #0
 8011454:	d118      	bne.n	8011488 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011456:	4b1b      	ldr	r3, [pc, #108]	@ (80114c4 <tcp_input+0x804>)
 8011458:	6819      	ldr	r1, [r3, #0]
 801145a:	4b1b      	ldr	r3, [pc, #108]	@ (80114c8 <tcp_input+0x808>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	461a      	mov	r2, r3
 8011460:	4b1a      	ldr	r3, [pc, #104]	@ (80114cc <tcp_input+0x80c>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011466:	4b16      	ldr	r3, [pc, #88]	@ (80114c0 <tcp_input+0x800>)
 8011468:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801146a:	885b      	ldrh	r3, [r3, #2]
 801146c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801146e:	4a14      	ldr	r2, [pc, #80]	@ (80114c0 <tcp_input+0x800>)
 8011470:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011472:	8812      	ldrh	r2, [r2, #0]
 8011474:	b292      	uxth	r2, r2
 8011476:	9202      	str	r2, [sp, #8]
 8011478:	9301      	str	r3, [sp, #4]
 801147a:	4b15      	ldr	r3, [pc, #84]	@ (80114d0 <tcp_input+0x810>)
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	4b15      	ldr	r3, [pc, #84]	@ (80114d4 <tcp_input+0x814>)
 8011480:	4602      	mov	r2, r0
 8011482:	2000      	movs	r0, #0
 8011484:	f003 f816 	bl	80144b4 <tcp_rst>
    pbuf_free(p);
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f7fd fde3 	bl	800f054 <pbuf_free>
  return;
 801148e:	e00c      	b.n	80114aa <tcp_input+0x7ea>
    goto dropped;
 8011490:	bf00      	nop
 8011492:	e006      	b.n	80114a2 <tcp_input+0x7e2>
    goto dropped;
 8011494:	bf00      	nop
 8011496:	e004      	b.n	80114a2 <tcp_input+0x7e2>
    goto dropped;
 8011498:	bf00      	nop
 801149a:	e002      	b.n	80114a2 <tcp_input+0x7e2>
      goto dropped;
 801149c:	bf00      	nop
 801149e:	e000      	b.n	80114a2 <tcp_input+0x7e2>
      goto dropped;
 80114a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f7fd fdd6 	bl	800f054 <pbuf_free>
 80114a8:	e000      	b.n	80114ac <tcp_input+0x7ec>
  return;
 80114aa:	bf00      	nop
}
 80114ac:	3724      	adds	r7, #36	@ 0x24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd90      	pop	{r4, r7, pc}
 80114b2:	bf00      	nop
 80114b4:	2000d5bc 	.word	0x2000d5bc
 80114b8:	2000d5b8 	.word	0x2000d5b8
 80114bc:	2000d588 	.word	0x2000d588
 80114c0:	2000d598 	.word	0x2000d598
 80114c4:	2000d5ac 	.word	0x2000d5ac
 80114c8:	2000d5b2 	.word	0x2000d5b2
 80114cc:	2000d5a8 	.word	0x2000d5a8
 80114d0:	20009e2c 	.word	0x20009e2c
 80114d4:	20009e30 	.word	0x20009e30

080114d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d106      	bne.n	80114f4 <tcp_input_delayed_close+0x1c>
 80114e6:	4b17      	ldr	r3, [pc, #92]	@ (8011544 <tcp_input_delayed_close+0x6c>)
 80114e8:	f240 225a 	movw	r2, #602	@ 0x25a
 80114ec:	4916      	ldr	r1, [pc, #88]	@ (8011548 <tcp_input_delayed_close+0x70>)
 80114ee:	4817      	ldr	r0, [pc, #92]	@ (801154c <tcp_input_delayed_close+0x74>)
 80114f0:	f006 fe82 	bl	80181f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80114f4:	4b16      	ldr	r3, [pc, #88]	@ (8011550 <tcp_input_delayed_close+0x78>)
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f003 0310 	and.w	r3, r3, #16
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d01c      	beq.n	801153a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	8b5b      	ldrh	r3, [r3, #26]
 8011504:	f003 0310 	and.w	r3, r3, #16
 8011508:	2b00      	cmp	r3, #0
 801150a:	d10d      	bne.n	8011528 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011512:	2b00      	cmp	r3, #0
 8011514:	d008      	beq.n	8011528 <tcp_input_delayed_close+0x50>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	6912      	ldr	r2, [r2, #16]
 8011520:	f06f 010e 	mvn.w	r1, #14
 8011524:	4610      	mov	r0, r2
 8011526:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	480a      	ldr	r0, [pc, #40]	@ (8011554 <tcp_input_delayed_close+0x7c>)
 801152c:	f7ff fa50 	bl	80109d0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7fe f83b 	bl	800f5ac <tcp_free>
    return 1;
 8011536:	2301      	movs	r3, #1
 8011538:	e000      	b.n	801153c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	0801a434 	.word	0x0801a434
 8011548:	0801a604 	.word	0x0801a604
 801154c:	0801a480 	.word	0x0801a480
 8011550:	2000d5b5 	.word	0x2000d5b5
 8011554:	2000d57c 	.word	0x2000d57c

08011558 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011558:	b590      	push	{r4, r7, lr}
 801155a:	b08b      	sub	sp, #44	@ 0x2c
 801155c:	af04      	add	r7, sp, #16
 801155e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011560:	4b6f      	ldr	r3, [pc, #444]	@ (8011720 <tcp_listen_input+0x1c8>)
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	f003 0304 	and.w	r3, r3, #4
 8011568:	2b00      	cmp	r3, #0
 801156a:	f040 80d2 	bne.w	8011712 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d106      	bne.n	8011582 <tcp_listen_input+0x2a>
 8011574:	4b6b      	ldr	r3, [pc, #428]	@ (8011724 <tcp_listen_input+0x1cc>)
 8011576:	f240 2281 	movw	r2, #641	@ 0x281
 801157a:	496b      	ldr	r1, [pc, #428]	@ (8011728 <tcp_listen_input+0x1d0>)
 801157c:	486b      	ldr	r0, [pc, #428]	@ (801172c <tcp_listen_input+0x1d4>)
 801157e:	f006 fe3b 	bl	80181f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011582:	4b67      	ldr	r3, [pc, #412]	@ (8011720 <tcp_listen_input+0x1c8>)
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	f003 0310 	and.w	r3, r3, #16
 801158a:	2b00      	cmp	r3, #0
 801158c:	d019      	beq.n	80115c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801158e:	4b68      	ldr	r3, [pc, #416]	@ (8011730 <tcp_listen_input+0x1d8>)
 8011590:	6819      	ldr	r1, [r3, #0]
 8011592:	4b68      	ldr	r3, [pc, #416]	@ (8011734 <tcp_listen_input+0x1dc>)
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	461a      	mov	r2, r3
 8011598:	4b67      	ldr	r3, [pc, #412]	@ (8011738 <tcp_listen_input+0x1e0>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801159e:	4b67      	ldr	r3, [pc, #412]	@ (801173c <tcp_listen_input+0x1e4>)
 80115a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115a2:	885b      	ldrh	r3, [r3, #2]
 80115a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115a6:	4a65      	ldr	r2, [pc, #404]	@ (801173c <tcp_listen_input+0x1e4>)
 80115a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115aa:	8812      	ldrh	r2, [r2, #0]
 80115ac:	b292      	uxth	r2, r2
 80115ae:	9202      	str	r2, [sp, #8]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	4b63      	ldr	r3, [pc, #396]	@ (8011740 <tcp_listen_input+0x1e8>)
 80115b4:	9300      	str	r3, [sp, #0]
 80115b6:	4b63      	ldr	r3, [pc, #396]	@ (8011744 <tcp_listen_input+0x1ec>)
 80115b8:	4602      	mov	r2, r0
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f002 ff7a 	bl	80144b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80115c0:	e0a9      	b.n	8011716 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80115c2:	4b57      	ldr	r3, [pc, #348]	@ (8011720 <tcp_listen_input+0x1c8>)
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	f003 0302 	and.w	r3, r3, #2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f000 80a3 	beq.w	8011716 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	7d5b      	ldrb	r3, [r3, #21]
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7ff f927 	bl	8010828 <tcp_alloc>
 80115da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d111      	bne.n	8011606 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	699b      	ldr	r3, [r3, #24]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00a      	beq.n	8011600 <tcp_listen_input+0xa8>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	699b      	ldr	r3, [r3, #24]
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	6910      	ldr	r0, [r2, #16]
 80115f2:	f04f 32ff 	mov.w	r2, #4294967295
 80115f6:	2100      	movs	r1, #0
 80115f8:	4798      	blx	r3
 80115fa:	4603      	mov	r3, r0
 80115fc:	73bb      	strb	r3, [r7, #14]
      return;
 80115fe:	e08b      	b.n	8011718 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011600:	23f0      	movs	r3, #240	@ 0xf0
 8011602:	73bb      	strb	r3, [r7, #14]
      return;
 8011604:	e088      	b.n	8011718 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011606:	4b50      	ldr	r3, [pc, #320]	@ (8011748 <tcp_listen_input+0x1f0>)
 8011608:	695a      	ldr	r2, [r3, #20]
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801160e:	4b4e      	ldr	r3, [pc, #312]	@ (8011748 <tcp_listen_input+0x1f0>)
 8011610:	691a      	ldr	r2, [r3, #16]
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	8ada      	ldrh	r2, [r3, #22]
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801161e:	4b47      	ldr	r3, [pc, #284]	@ (801173c <tcp_listen_input+0x1e4>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	b29a      	uxth	r2, r3
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2203      	movs	r2, #3
 801162e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011630:	4b41      	ldr	r3, [pc, #260]	@ (8011738 <tcp_listen_input+0x1e0>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	1c5a      	adds	r2, r3, #1
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011642:	6978      	ldr	r0, [r7, #20]
 8011644:	f7ff fa58 	bl	8010af8 <tcp_next_iss>
 8011648:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	693a      	ldr	r2, [r7, #16]
 801164e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	693a      	ldr	r2, [r7, #16]
 8011654:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	693a      	ldr	r2, [r7, #16]
 801165a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	693a      	ldr	r2, [r7, #16]
 8011660:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011662:	4b35      	ldr	r3, [pc, #212]	@ (8011738 <tcp_listen_input+0x1e0>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	1e5a      	subs	r2, r3, #1
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	691a      	ldr	r2, [r3, #16]
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	7a5b      	ldrb	r3, [r3, #9]
 801167e:	f003 030c 	and.w	r3, r3, #12
 8011682:	b2da      	uxtb	r2, r3
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	7a1a      	ldrb	r2, [r3, #8]
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011690:	4b2e      	ldr	r3, [pc, #184]	@ (801174c <tcp_listen_input+0x1f4>)
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	60da      	str	r2, [r3, #12]
 8011698:	4a2c      	ldr	r2, [pc, #176]	@ (801174c <tcp_listen_input+0x1f4>)
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	6013      	str	r3, [r2, #0]
 801169e:	f003 f8cb 	bl	8014838 <tcp_timer_needed>
 80116a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011750 <tcp_listen_input+0x1f8>)
 80116a4:	2201      	movs	r2, #1
 80116a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80116a8:	6978      	ldr	r0, [r7, #20]
 80116aa:	f001 fd8b 	bl	80131c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80116ae:	4b23      	ldr	r3, [pc, #140]	@ (801173c <tcp_listen_input+0x1e4>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	89db      	ldrh	r3, [r3, #14]
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	3304      	adds	r3, #4
 80116d0:	4618      	mov	r0, r3
 80116d2:	f004 fcbf 	bl	8016054 <ip4_route>
 80116d6:	4601      	mov	r1, r0
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	3304      	adds	r3, #4
 80116dc:	461a      	mov	r2, r3
 80116de:	4620      	mov	r0, r4
 80116e0:	f7ff fa30 	bl	8010b44 <tcp_eff_send_mss_netif>
 80116e4:	4603      	mov	r3, r0
 80116e6:	461a      	mov	r2, r3
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80116ec:	2112      	movs	r1, #18
 80116ee:	6978      	ldr	r0, [r7, #20]
 80116f0:	f002 f83e 	bl	8013770 <tcp_enqueue_flags>
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80116f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d004      	beq.n	801170a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011700:	2100      	movs	r1, #0
 8011702:	6978      	ldr	r0, [r7, #20]
 8011704:	f7fe f97c 	bl	800fa00 <tcp_abandon>
      return;
 8011708:	e006      	b.n	8011718 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801170a:	6978      	ldr	r0, [r7, #20]
 801170c:	f002 f91e 	bl	801394c <tcp_output>
  return;
 8011710:	e001      	b.n	8011716 <tcp_listen_input+0x1be>
    return;
 8011712:	bf00      	nop
 8011714:	e000      	b.n	8011718 <tcp_listen_input+0x1c0>
  return;
 8011716:	bf00      	nop
}
 8011718:	371c      	adds	r7, #28
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}
 801171e:	bf00      	nop
 8011720:	2000d5b4 	.word	0x2000d5b4
 8011724:	0801a434 	.word	0x0801a434
 8011728:	0801a62c 	.word	0x0801a62c
 801172c:	0801a480 	.word	0x0801a480
 8011730:	2000d5ac 	.word	0x2000d5ac
 8011734:	2000d5b2 	.word	0x2000d5b2
 8011738:	2000d5a8 	.word	0x2000d5a8
 801173c:	2000d598 	.word	0x2000d598
 8011740:	20009e2c 	.word	0x20009e2c
 8011744:	20009e30 	.word	0x20009e30
 8011748:	20009e1c 	.word	0x20009e1c
 801174c:	2000d57c 	.word	0x2000d57c
 8011750:	2000d584 	.word	0x2000d584

08011754 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af04      	add	r7, sp, #16
 801175a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801175c:	4b2f      	ldr	r3, [pc, #188]	@ (801181c <tcp_timewait_input+0xc8>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	f003 0304 	and.w	r3, r3, #4
 8011764:	2b00      	cmp	r3, #0
 8011766:	d153      	bne.n	8011810 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d106      	bne.n	801177c <tcp_timewait_input+0x28>
 801176e:	4b2c      	ldr	r3, [pc, #176]	@ (8011820 <tcp_timewait_input+0xcc>)
 8011770:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011774:	492b      	ldr	r1, [pc, #172]	@ (8011824 <tcp_timewait_input+0xd0>)
 8011776:	482c      	ldr	r0, [pc, #176]	@ (8011828 <tcp_timewait_input+0xd4>)
 8011778:	f006 fd3e 	bl	80181f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801177c:	4b27      	ldr	r3, [pc, #156]	@ (801181c <tcp_timewait_input+0xc8>)
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	f003 0302 	and.w	r3, r3, #2
 8011784:	2b00      	cmp	r3, #0
 8011786:	d02a      	beq.n	80117de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011788:	4b28      	ldr	r3, [pc, #160]	@ (801182c <tcp_timewait_input+0xd8>)
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	2b00      	cmp	r3, #0
 8011794:	db2d      	blt.n	80117f2 <tcp_timewait_input+0x9e>
 8011796:	4b25      	ldr	r3, [pc, #148]	@ (801182c <tcp_timewait_input+0xd8>)
 8011798:	681a      	ldr	r2, [r3, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801179e:	6879      	ldr	r1, [r7, #4]
 80117a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80117a2:	440b      	add	r3, r1
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	dc23      	bgt.n	80117f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117aa:	4b21      	ldr	r3, [pc, #132]	@ (8011830 <tcp_timewait_input+0xdc>)
 80117ac:	6819      	ldr	r1, [r3, #0]
 80117ae:	4b21      	ldr	r3, [pc, #132]	@ (8011834 <tcp_timewait_input+0xe0>)
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	461a      	mov	r2, r3
 80117b4:	4b1d      	ldr	r3, [pc, #116]	@ (801182c <tcp_timewait_input+0xd8>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ba:	4b1f      	ldr	r3, [pc, #124]	@ (8011838 <tcp_timewait_input+0xe4>)
 80117bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117be:	885b      	ldrh	r3, [r3, #2]
 80117c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117c2:	4a1d      	ldr	r2, [pc, #116]	@ (8011838 <tcp_timewait_input+0xe4>)
 80117c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117c6:	8812      	ldrh	r2, [r2, #0]
 80117c8:	b292      	uxth	r2, r2
 80117ca:	9202      	str	r2, [sp, #8]
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	4b1b      	ldr	r3, [pc, #108]	@ (801183c <tcp_timewait_input+0xe8>)
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	4b1b      	ldr	r3, [pc, #108]	@ (8011840 <tcp_timewait_input+0xec>)
 80117d4:	4602      	mov	r2, r0
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f002 fe6c 	bl	80144b4 <tcp_rst>
      return;
 80117dc:	e01b      	b.n	8011816 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80117de:	4b0f      	ldr	r3, [pc, #60]	@ (801181c <tcp_timewait_input+0xc8>)
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	f003 0301 	and.w	r3, r3, #1
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d003      	beq.n	80117f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80117ea:	4b16      	ldr	r3, [pc, #88]	@ (8011844 <tcp_timewait_input+0xf0>)
 80117ec:	681a      	ldr	r2, [r3, #0]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80117f2:	4b10      	ldr	r3, [pc, #64]	@ (8011834 <tcp_timewait_input+0xe0>)
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00c      	beq.n	8011814 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8b5b      	ldrh	r3, [r3, #26]
 80117fe:	f043 0302 	orr.w	r3, r3, #2
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f002 f89f 	bl	801394c <tcp_output>
  }
  return;
 801180e:	e001      	b.n	8011814 <tcp_timewait_input+0xc0>
    return;
 8011810:	bf00      	nop
 8011812:	e000      	b.n	8011816 <tcp_timewait_input+0xc2>
  return;
 8011814:	bf00      	nop
}
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	2000d5b4 	.word	0x2000d5b4
 8011820:	0801a434 	.word	0x0801a434
 8011824:	0801a64c 	.word	0x0801a64c
 8011828:	0801a480 	.word	0x0801a480
 801182c:	2000d5a8 	.word	0x2000d5a8
 8011830:	2000d5ac 	.word	0x2000d5ac
 8011834:	2000d5b2 	.word	0x2000d5b2
 8011838:	2000d598 	.word	0x2000d598
 801183c:	20009e2c 	.word	0x20009e2c
 8011840:	20009e30 	.word	0x20009e30
 8011844:	2000d570 	.word	0x2000d570

08011848 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b08d      	sub	sp, #52	@ 0x34
 801184c:	af04      	add	r7, sp, #16
 801184e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011850:	2300      	movs	r3, #0
 8011852:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d106      	bne.n	801186c <tcp_process+0x24>
 801185e:	4b9d      	ldr	r3, [pc, #628]	@ (8011ad4 <tcp_process+0x28c>)
 8011860:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011864:	499c      	ldr	r1, [pc, #624]	@ (8011ad8 <tcp_process+0x290>)
 8011866:	489d      	ldr	r0, [pc, #628]	@ (8011adc <tcp_process+0x294>)
 8011868:	f006 fcc6 	bl	80181f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801186c:	4b9c      	ldr	r3, [pc, #624]	@ (8011ae0 <tcp_process+0x298>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	f003 0304 	and.w	r3, r3, #4
 8011874:	2b00      	cmp	r3, #0
 8011876:	d04e      	beq.n	8011916 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	7d1b      	ldrb	r3, [r3, #20]
 801187c:	2b02      	cmp	r3, #2
 801187e:	d108      	bne.n	8011892 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011884:	4b97      	ldr	r3, [pc, #604]	@ (8011ae4 <tcp_process+0x29c>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	429a      	cmp	r2, r3
 801188a:	d123      	bne.n	80118d4 <tcp_process+0x8c>
        acceptable = 1;
 801188c:	2301      	movs	r3, #1
 801188e:	76fb      	strb	r3, [r7, #27]
 8011890:	e020      	b.n	80118d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011896:	4b94      	ldr	r3, [pc, #592]	@ (8011ae8 <tcp_process+0x2a0>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	429a      	cmp	r2, r3
 801189c:	d102      	bne.n	80118a4 <tcp_process+0x5c>
        acceptable = 1;
 801189e:	2301      	movs	r3, #1
 80118a0:	76fb      	strb	r3, [r7, #27]
 80118a2:	e017      	b.n	80118d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118a4:	4b90      	ldr	r3, [pc, #576]	@ (8011ae8 <tcp_process+0x2a0>)
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ac:	1ad3      	subs	r3, r2, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	db10      	blt.n	80118d4 <tcp_process+0x8c>
 80118b2:	4b8d      	ldr	r3, [pc, #564]	@ (8011ae8 <tcp_process+0x2a0>)
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ba:	6879      	ldr	r1, [r7, #4]
 80118bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80118be:	440b      	add	r3, r1
 80118c0:	1ad3      	subs	r3, r2, r3
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	dc06      	bgt.n	80118d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	8b5b      	ldrh	r3, [r3, #26]
 80118ca:	f043 0302 	orr.w	r3, r3, #2
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80118d4:	7efb      	ldrb	r3, [r7, #27]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d01b      	beq.n	8011912 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	7d1b      	ldrb	r3, [r3, #20]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <tcp_process+0xa8>
 80118e2:	4b7c      	ldr	r3, [pc, #496]	@ (8011ad4 <tcp_process+0x28c>)
 80118e4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80118e8:	4980      	ldr	r1, [pc, #512]	@ (8011aec <tcp_process+0x2a4>)
 80118ea:	487c      	ldr	r0, [pc, #496]	@ (8011adc <tcp_process+0x294>)
 80118ec:	f006 fc84 	bl	80181f8 <iprintf>
      recv_flags |= TF_RESET;
 80118f0:	4b7f      	ldr	r3, [pc, #508]	@ (8011af0 <tcp_process+0x2a8>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	f043 0308 	orr.w	r3, r3, #8
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	4b7d      	ldr	r3, [pc, #500]	@ (8011af0 <tcp_process+0x2a8>)
 80118fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	8b5b      	ldrh	r3, [r3, #26]
 8011902:	f023 0301 	bic.w	r3, r3, #1
 8011906:	b29a      	uxth	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801190c:	f06f 030d 	mvn.w	r3, #13
 8011910:	e37a      	b.n	8012008 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011912:	2300      	movs	r3, #0
 8011914:	e378      	b.n	8012008 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011916:	4b72      	ldr	r3, [pc, #456]	@ (8011ae0 <tcp_process+0x298>)
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	f003 0302 	and.w	r3, r3, #2
 801191e:	2b00      	cmp	r3, #0
 8011920:	d010      	beq.n	8011944 <tcp_process+0xfc>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	7d1b      	ldrb	r3, [r3, #20]
 8011926:	2b02      	cmp	r3, #2
 8011928:	d00c      	beq.n	8011944 <tcp_process+0xfc>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	7d1b      	ldrb	r3, [r3, #20]
 801192e:	2b03      	cmp	r3, #3
 8011930:	d008      	beq.n	8011944 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	8b5b      	ldrh	r3, [r3, #26]
 8011936:	f043 0302 	orr.w	r3, r3, #2
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011940:	2300      	movs	r3, #0
 8011942:	e361      	b.n	8012008 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	8b5b      	ldrh	r3, [r3, #26]
 8011948:	f003 0310 	and.w	r3, r3, #16
 801194c:	2b00      	cmp	r3, #0
 801194e:	d103      	bne.n	8011958 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011950:	4b68      	ldr	r3, [pc, #416]	@ (8011af4 <tcp_process+0x2ac>)
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f001 fc2b 	bl	80131c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	7d1b      	ldrb	r3, [r3, #20]
 8011972:	3b02      	subs	r3, #2
 8011974:	2b07      	cmp	r3, #7
 8011976:	f200 8337 	bhi.w	8011fe8 <tcp_process+0x7a0>
 801197a:	a201      	add	r2, pc, #4	@ (adr r2, 8011980 <tcp_process+0x138>)
 801197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011980:	080119a1 	.word	0x080119a1
 8011984:	08011bd1 	.word	0x08011bd1
 8011988:	08011d49 	.word	0x08011d49
 801198c:	08011d73 	.word	0x08011d73
 8011990:	08011e97 	.word	0x08011e97
 8011994:	08011d49 	.word	0x08011d49
 8011998:	08011f23 	.word	0x08011f23
 801199c:	08011fb3 	.word	0x08011fb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80119a0:	4b4f      	ldr	r3, [pc, #316]	@ (8011ae0 <tcp_process+0x298>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	f003 0310 	and.w	r3, r3, #16
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f000 80e4 	beq.w	8011b76 <tcp_process+0x32e>
 80119ae:	4b4c      	ldr	r3, [pc, #304]	@ (8011ae0 <tcp_process+0x298>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	f003 0302 	and.w	r3, r3, #2
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f000 80dd 	beq.w	8011b76 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119c0:	1c5a      	adds	r2, r3, #1
 80119c2:	4b48      	ldr	r3, [pc, #288]	@ (8011ae4 <tcp_process+0x29c>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	f040 80d5 	bne.w	8011b76 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80119cc:	4b46      	ldr	r3, [pc, #280]	@ (8011ae8 <tcp_process+0x2a0>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	1c5a      	adds	r2, r3, #1
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80119de:	4b41      	ldr	r3, [pc, #260]	@ (8011ae4 <tcp_process+0x29c>)
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80119e6:	4b44      	ldr	r3, [pc, #272]	@ (8011af8 <tcp_process+0x2b0>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	89db      	ldrh	r3, [r3, #14]
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011a00:	4b39      	ldr	r3, [pc, #228]	@ (8011ae8 <tcp_process+0x2a0>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	1e5a      	subs	r2, r3, #1
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2204      	movs	r2, #4
 8011a0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	3304      	adds	r3, #4
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f004 fb1b 	bl	8016054 <ip4_route>
 8011a1e:	4601      	mov	r1, r0
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	3304      	adds	r3, #4
 8011a24:	461a      	mov	r2, r3
 8011a26:	4620      	mov	r0, r4
 8011a28:	f7ff f88c 	bl	8010b44 <tcp_eff_send_mss_netif>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	461a      	mov	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a38:	009a      	lsls	r2, r3, #2
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011a44:	428b      	cmp	r3, r1
 8011a46:	bf38      	it	cc
 8011a48:	460b      	movcc	r3, r1
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d204      	bcs.n	8011a58 <tcp_process+0x210>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	e00d      	b.n	8011a74 <tcp_process+0x22c>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a5c:	005b      	lsls	r3, r3, #1
 8011a5e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d904      	bls.n	8011a70 <tcp_process+0x228>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	e001      	b.n	8011a74 <tcp_process+0x22c>
 8011a70:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d106      	bne.n	8011a92 <tcp_process+0x24a>
 8011a84:	4b13      	ldr	r3, [pc, #76]	@ (8011ad4 <tcp_process+0x28c>)
 8011a86:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8011a8a:	491c      	ldr	r1, [pc, #112]	@ (8011afc <tcp_process+0x2b4>)
 8011a8c:	4813      	ldr	r0, [pc, #76]	@ (8011adc <tcp_process+0x294>)
 8011a8e:	f006 fbb3 	bl	80181f8 <iprintf>
        --pcb->snd_queuelen;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a98:	3b01      	subs	r3, #1
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aa6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d12a      	bne.n	8011b04 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ab2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d106      	bne.n	8011ac8 <tcp_process+0x280>
 8011aba:	4b06      	ldr	r3, [pc, #24]	@ (8011ad4 <tcp_process+0x28c>)
 8011abc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011ac0:	490f      	ldr	r1, [pc, #60]	@ (8011b00 <tcp_process+0x2b8>)
 8011ac2:	4806      	ldr	r0, [pc, #24]	@ (8011adc <tcp_process+0x294>)
 8011ac4:	f006 fb98 	bl	80181f8 <iprintf>
          pcb->unsent = rseg->next;
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011ad0:	e01c      	b.n	8011b0c <tcp_process+0x2c4>
 8011ad2:	bf00      	nop
 8011ad4:	0801a434 	.word	0x0801a434
 8011ad8:	0801a66c 	.word	0x0801a66c
 8011adc:	0801a480 	.word	0x0801a480
 8011ae0:	2000d5b4 	.word	0x2000d5b4
 8011ae4:	2000d5ac 	.word	0x2000d5ac
 8011ae8:	2000d5a8 	.word	0x2000d5a8
 8011aec:	0801a688 	.word	0x0801a688
 8011af0:	2000d5b5 	.word	0x2000d5b5
 8011af4:	2000d570 	.word	0x2000d570
 8011af8:	2000d598 	.word	0x2000d598
 8011afc:	0801a6a8 	.word	0x0801a6a8
 8011b00:	0801a6c0 	.word	0x0801a6c0
        } else {
          pcb->unacked = rseg->next;
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011b0c:	69f8      	ldr	r0, [r7, #28]
 8011b0e:	f7fe fd22 	bl	8010556 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d104      	bne.n	8011b24 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b20:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011b22:	e006      	b.n	8011b32 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2200      	movs	r2, #0
 8011b28:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00a      	beq.n	8011b52 <tcp_process+0x30a>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	6910      	ldr	r0, [r2, #16]
 8011b46:	2200      	movs	r2, #0
 8011b48:	6879      	ldr	r1, [r7, #4]
 8011b4a:	4798      	blx	r3
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	76bb      	strb	r3, [r7, #26]
 8011b50:	e001      	b.n	8011b56 <tcp_process+0x30e>
 8011b52:	2300      	movs	r3, #0
 8011b54:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011b56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b5a:	f113 0f0d 	cmn.w	r3, #13
 8011b5e:	d102      	bne.n	8011b66 <tcp_process+0x31e>
          return ERR_ABRT;
 8011b60:	f06f 030c 	mvn.w	r3, #12
 8011b64:	e250      	b.n	8012008 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	8b5b      	ldrh	r3, [r3, #26]
 8011b6a:	f043 0302 	orr.w	r3, r3, #2
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011b74:	e23a      	b.n	8011fec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011b76:	4b98      	ldr	r3, [pc, #608]	@ (8011dd8 <tcp_process+0x590>)
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	f003 0310 	and.w	r3, r3, #16
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f000 8234 	beq.w	8011fec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b84:	4b95      	ldr	r3, [pc, #596]	@ (8011ddc <tcp_process+0x594>)
 8011b86:	6819      	ldr	r1, [r3, #0]
 8011b88:	4b95      	ldr	r3, [pc, #596]	@ (8011de0 <tcp_process+0x598>)
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4b95      	ldr	r3, [pc, #596]	@ (8011de4 <tcp_process+0x59c>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b94:	4b94      	ldr	r3, [pc, #592]	@ (8011de8 <tcp_process+0x5a0>)
 8011b96:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b98:	885b      	ldrh	r3, [r3, #2]
 8011b9a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b9c:	4a92      	ldr	r2, [pc, #584]	@ (8011de8 <tcp_process+0x5a0>)
 8011b9e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ba0:	8812      	ldrh	r2, [r2, #0]
 8011ba2:	b292      	uxth	r2, r2
 8011ba4:	9202      	str	r2, [sp, #8]
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	4b90      	ldr	r3, [pc, #576]	@ (8011dec <tcp_process+0x5a4>)
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	4b90      	ldr	r3, [pc, #576]	@ (8011df0 <tcp_process+0x5a8>)
 8011bae:	4602      	mov	r2, r0
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f002 fc7f 	bl	80144b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011bbc:	2b05      	cmp	r3, #5
 8011bbe:	f200 8215 	bhi.w	8011fec <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f002 fa4b 	bl	8014064 <tcp_rexmit_rto>
      break;
 8011bce:	e20d      	b.n	8011fec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011bd0:	4b81      	ldr	r3, [pc, #516]	@ (8011dd8 <tcp_process+0x590>)
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	f003 0310 	and.w	r3, r3, #16
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f000 80a1 	beq.w	8011d20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011bde:	4b7f      	ldr	r3, [pc, #508]	@ (8011ddc <tcp_process+0x594>)
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	3b01      	subs	r3, #1
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	db7e      	blt.n	8011cec <tcp_process+0x4a4>
 8011bee:	4b7b      	ldr	r3, [pc, #492]	@ (8011ddc <tcp_process+0x594>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	dc77      	bgt.n	8011cec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2204      	movs	r2, #4
 8011c00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d102      	bne.n	8011c10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011c0a:	23fa      	movs	r3, #250	@ 0xfa
 8011c0c:	76bb      	strb	r3, [r7, #26]
 8011c0e:	e01d      	b.n	8011c4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d106      	bne.n	8011c28 <tcp_process+0x3e0>
 8011c1a:	4b76      	ldr	r3, [pc, #472]	@ (8011df4 <tcp_process+0x5ac>)
 8011c1c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011c20:	4975      	ldr	r1, [pc, #468]	@ (8011df8 <tcp_process+0x5b0>)
 8011c22:	4876      	ldr	r0, [pc, #472]	@ (8011dfc <tcp_process+0x5b4>)
 8011c24:	f006 fae8 	bl	80181f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c2c:	699b      	ldr	r3, [r3, #24]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d00a      	beq.n	8011c48 <tcp_process+0x400>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c36:	699b      	ldr	r3, [r3, #24]
 8011c38:	687a      	ldr	r2, [r7, #4]
 8011c3a:	6910      	ldr	r0, [r2, #16]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	6879      	ldr	r1, [r7, #4]
 8011c40:	4798      	blx	r3
 8011c42:	4603      	mov	r3, r0
 8011c44:	76bb      	strb	r3, [r7, #26]
 8011c46:	e001      	b.n	8011c4c <tcp_process+0x404>
 8011c48:	23f0      	movs	r3, #240	@ 0xf0
 8011c4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011c4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00a      	beq.n	8011c6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011c54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c58:	f113 0f0d 	cmn.w	r3, #13
 8011c5c:	d002      	beq.n	8011c64 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7fd ff8c 	bl	800fb7c <tcp_abort>
            }
            return ERR_ABRT;
 8011c64:	f06f 030c 	mvn.w	r3, #12
 8011c68:	e1ce      	b.n	8012008 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 fae0 	bl	8012230 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011c70:	4b63      	ldr	r3, [pc, #396]	@ (8011e00 <tcp_process+0x5b8>)
 8011c72:	881b      	ldrh	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d005      	beq.n	8011c84 <tcp_process+0x43c>
            recv_acked--;
 8011c78:	4b61      	ldr	r3, [pc, #388]	@ (8011e00 <tcp_process+0x5b8>)
 8011c7a:	881b      	ldrh	r3, [r3, #0]
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	4b5f      	ldr	r3, [pc, #380]	@ (8011e00 <tcp_process+0x5b8>)
 8011c82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c88:	009a      	lsls	r2, r3, #2
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c8e:	005b      	lsls	r3, r3, #1
 8011c90:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011c94:	428b      	cmp	r3, r1
 8011c96:	bf38      	it	cc
 8011c98:	460b      	movcc	r3, r1
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d204      	bcs.n	8011ca8 <tcp_process+0x460>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	e00d      	b.n	8011cc4 <tcp_process+0x47c>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011cac:	005b      	lsls	r3, r3, #1
 8011cae:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d904      	bls.n	8011cc0 <tcp_process+0x478>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011cba:	005b      	lsls	r3, r3, #1
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	e001      	b.n	8011cc4 <tcp_process+0x47c>
 8011cc0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011cca:	4b4e      	ldr	r3, [pc, #312]	@ (8011e04 <tcp_process+0x5bc>)
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	f003 0320 	and.w	r3, r3, #32
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d037      	beq.n	8011d46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	8b5b      	ldrh	r3, [r3, #26]
 8011cda:	f043 0302 	orr.w	r3, r3, #2
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2207      	movs	r2, #7
 8011ce8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011cea:	e02c      	b.n	8011d46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cec:	4b3b      	ldr	r3, [pc, #236]	@ (8011ddc <tcp_process+0x594>)
 8011cee:	6819      	ldr	r1, [r3, #0]
 8011cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8011de0 <tcp_process+0x598>)
 8011cf2:	881b      	ldrh	r3, [r3, #0]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8011de4 <tcp_process+0x59c>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8011de8 <tcp_process+0x5a0>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d00:	885b      	ldrh	r3, [r3, #2]
 8011d02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d04:	4a38      	ldr	r2, [pc, #224]	@ (8011de8 <tcp_process+0x5a0>)
 8011d06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d08:	8812      	ldrh	r2, [r2, #0]
 8011d0a:	b292      	uxth	r2, r2
 8011d0c:	9202      	str	r2, [sp, #8]
 8011d0e:	9301      	str	r3, [sp, #4]
 8011d10:	4b36      	ldr	r3, [pc, #216]	@ (8011dec <tcp_process+0x5a4>)
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	4b36      	ldr	r3, [pc, #216]	@ (8011df0 <tcp_process+0x5a8>)
 8011d16:	4602      	mov	r2, r0
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f002 fbcb 	bl	80144b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011d1e:	e167      	b.n	8011ff0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011d20:	4b2d      	ldr	r3, [pc, #180]	@ (8011dd8 <tcp_process+0x590>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	f003 0302 	and.w	r3, r3, #2
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 8161 	beq.w	8011ff0 <tcp_process+0x7a8>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d32:	1e5a      	subs	r2, r3, #1
 8011d34:	4b2b      	ldr	r3, [pc, #172]	@ (8011de4 <tcp_process+0x59c>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	f040 8159 	bne.w	8011ff0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f002 f9b2 	bl	80140a8 <tcp_rexmit>
      break;
 8011d44:	e154      	b.n	8011ff0 <tcp_process+0x7a8>
 8011d46:	e153      	b.n	8011ff0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f000 fa71 	bl	8012230 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8011e04 <tcp_process+0x5bc>)
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	f003 0320 	and.w	r3, r3, #32
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f000 814c 	beq.w	8011ff4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	8b5b      	ldrh	r3, [r3, #26]
 8011d60:	f043 0302 	orr.w	r3, r3, #2
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2207      	movs	r2, #7
 8011d6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d70:	e140      	b.n	8011ff4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 fa5c 	bl	8012230 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d78:	4b22      	ldr	r3, [pc, #136]	@ (8011e04 <tcp_process+0x5bc>)
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	f003 0320 	and.w	r3, r3, #32
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d071      	beq.n	8011e68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d84:	4b14      	ldr	r3, [pc, #80]	@ (8011dd8 <tcp_process+0x590>)
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	f003 0310 	and.w	r3, r3, #16
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d060      	beq.n	8011e52 <tcp_process+0x60a>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d94:	4b11      	ldr	r3, [pc, #68]	@ (8011ddc <tcp_process+0x594>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d15a      	bne.n	8011e52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d156      	bne.n	8011e52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	8b5b      	ldrh	r3, [r3, #26]
 8011da8:	f043 0302 	orr.w	r3, r3, #2
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7fe fdbc 	bl	8010930 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011db8:	4b13      	ldr	r3, [pc, #76]	@ (8011e08 <tcp_process+0x5c0>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d105      	bne.n	8011dce <tcp_process+0x586>
 8011dc2:	4b11      	ldr	r3, [pc, #68]	@ (8011e08 <tcp_process+0x5c0>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	68db      	ldr	r3, [r3, #12]
 8011dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8011e08 <tcp_process+0x5c0>)
 8011dca:	6013      	str	r3, [r2, #0]
 8011dcc:	e02e      	b.n	8011e2c <tcp_process+0x5e4>
 8011dce:	4b0e      	ldr	r3, [pc, #56]	@ (8011e08 <tcp_process+0x5c0>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	617b      	str	r3, [r7, #20]
 8011dd4:	e027      	b.n	8011e26 <tcp_process+0x5de>
 8011dd6:	bf00      	nop
 8011dd8:	2000d5b4 	.word	0x2000d5b4
 8011ddc:	2000d5ac 	.word	0x2000d5ac
 8011de0:	2000d5b2 	.word	0x2000d5b2
 8011de4:	2000d5a8 	.word	0x2000d5a8
 8011de8:	2000d598 	.word	0x2000d598
 8011dec:	20009e2c 	.word	0x20009e2c
 8011df0:	20009e30 	.word	0x20009e30
 8011df4:	0801a434 	.word	0x0801a434
 8011df8:	0801a6d4 	.word	0x0801a6d4
 8011dfc:	0801a480 	.word	0x0801a480
 8011e00:	2000d5b0 	.word	0x2000d5b0
 8011e04:	2000d5b5 	.word	0x2000d5b5
 8011e08:	2000d57c 	.word	0x2000d57c
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d104      	bne.n	8011e20 <tcp_process+0x5d8>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	68da      	ldr	r2, [r3, #12]
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	60da      	str	r2, [r3, #12]
 8011e1e:	e005      	b.n	8011e2c <tcp_process+0x5e4>
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	68db      	ldr	r3, [r3, #12]
 8011e24:	617b      	str	r3, [r7, #20]
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d1ef      	bne.n	8011e0c <tcp_process+0x5c4>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	60da      	str	r2, [r3, #12]
 8011e32:	4b77      	ldr	r3, [pc, #476]	@ (8012010 <tcp_process+0x7c8>)
 8011e34:	2201      	movs	r2, #1
 8011e36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	220a      	movs	r2, #10
 8011e3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011e3e:	4b75      	ldr	r3, [pc, #468]	@ (8012014 <tcp_process+0x7cc>)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	60da      	str	r2, [r3, #12]
 8011e46:	4a73      	ldr	r2, [pc, #460]	@ (8012014 <tcp_process+0x7cc>)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6013      	str	r3, [r2, #0]
 8011e4c:	f002 fcf4 	bl	8014838 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011e50:	e0d2      	b.n	8011ff8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	8b5b      	ldrh	r3, [r3, #26]
 8011e56:	f043 0302 	orr.w	r3, r3, #2
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2208      	movs	r2, #8
 8011e64:	751a      	strb	r2, [r3, #20]
      break;
 8011e66:	e0c7      	b.n	8011ff8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e68:	4b6b      	ldr	r3, [pc, #428]	@ (8012018 <tcp_process+0x7d0>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	f003 0310 	and.w	r3, r3, #16
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f000 80c1 	beq.w	8011ff8 <tcp_process+0x7b0>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e7a:	4b68      	ldr	r3, [pc, #416]	@ (801201c <tcp_process+0x7d4>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	f040 80ba 	bne.w	8011ff8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f040 80b5 	bne.w	8011ff8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2206      	movs	r2, #6
 8011e92:	751a      	strb	r2, [r3, #20]
      break;
 8011e94:	e0b0      	b.n	8011ff8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 f9ca 	bl	8012230 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011e9c:	4b60      	ldr	r3, [pc, #384]	@ (8012020 <tcp_process+0x7d8>)
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	f003 0320 	and.w	r3, r3, #32
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f000 80a9 	beq.w	8011ffc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	8b5b      	ldrh	r3, [r3, #26]
 8011eae:	f043 0302 	orr.w	r3, r3, #2
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f7fe fd39 	bl	8010930 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011ebe:	4b59      	ldr	r3, [pc, #356]	@ (8012024 <tcp_process+0x7dc>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d105      	bne.n	8011ed4 <tcp_process+0x68c>
 8011ec8:	4b56      	ldr	r3, [pc, #344]	@ (8012024 <tcp_process+0x7dc>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	4a55      	ldr	r2, [pc, #340]	@ (8012024 <tcp_process+0x7dc>)
 8011ed0:	6013      	str	r3, [r2, #0]
 8011ed2:	e013      	b.n	8011efc <tcp_process+0x6b4>
 8011ed4:	4b53      	ldr	r3, [pc, #332]	@ (8012024 <tcp_process+0x7dc>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	613b      	str	r3, [r7, #16]
 8011eda:	e00c      	b.n	8011ef6 <tcp_process+0x6ae>
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d104      	bne.n	8011ef0 <tcp_process+0x6a8>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	68da      	ldr	r2, [r3, #12]
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	60da      	str	r2, [r3, #12]
 8011eee:	e005      	b.n	8011efc <tcp_process+0x6b4>
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	613b      	str	r3, [r7, #16]
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d1ef      	bne.n	8011edc <tcp_process+0x694>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	60da      	str	r2, [r3, #12]
 8011f02:	4b43      	ldr	r3, [pc, #268]	@ (8012010 <tcp_process+0x7c8>)
 8011f04:	2201      	movs	r2, #1
 8011f06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	220a      	movs	r2, #10
 8011f0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f0e:	4b41      	ldr	r3, [pc, #260]	@ (8012014 <tcp_process+0x7cc>)
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	60da      	str	r2, [r3, #12]
 8011f16:	4a3f      	ldr	r2, [pc, #252]	@ (8012014 <tcp_process+0x7cc>)
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	f002 fc8c 	bl	8014838 <tcp_timer_needed>
      }
      break;
 8011f20:	e06c      	b.n	8011ffc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 f984 	bl	8012230 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011f28:	4b3b      	ldr	r3, [pc, #236]	@ (8012018 <tcp_process+0x7d0>)
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	f003 0310 	and.w	r3, r3, #16
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d065      	beq.n	8012000 <tcp_process+0x7b8>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011f38:	4b38      	ldr	r3, [pc, #224]	@ (801201c <tcp_process+0x7d4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d15f      	bne.n	8012000 <tcp_process+0x7b8>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d15b      	bne.n	8012000 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7fe fcf1 	bl	8010930 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f4e:	4b35      	ldr	r3, [pc, #212]	@ (8012024 <tcp_process+0x7dc>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d105      	bne.n	8011f64 <tcp_process+0x71c>
 8011f58:	4b32      	ldr	r3, [pc, #200]	@ (8012024 <tcp_process+0x7dc>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	4a31      	ldr	r2, [pc, #196]	@ (8012024 <tcp_process+0x7dc>)
 8011f60:	6013      	str	r3, [r2, #0]
 8011f62:	e013      	b.n	8011f8c <tcp_process+0x744>
 8011f64:	4b2f      	ldr	r3, [pc, #188]	@ (8012024 <tcp_process+0x7dc>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	60fb      	str	r3, [r7, #12]
 8011f6a:	e00c      	b.n	8011f86 <tcp_process+0x73e>
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d104      	bne.n	8011f80 <tcp_process+0x738>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	68da      	ldr	r2, [r3, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	60da      	str	r2, [r3, #12]
 8011f7e:	e005      	b.n	8011f8c <tcp_process+0x744>
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	60fb      	str	r3, [r7, #12]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1ef      	bne.n	8011f6c <tcp_process+0x724>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	60da      	str	r2, [r3, #12]
 8011f92:	4b1f      	ldr	r3, [pc, #124]	@ (8012010 <tcp_process+0x7c8>)
 8011f94:	2201      	movs	r2, #1
 8011f96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	220a      	movs	r2, #10
 8011f9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8012014 <tcp_process+0x7cc>)
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	60da      	str	r2, [r3, #12]
 8011fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8012014 <tcp_process+0x7cc>)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6013      	str	r3, [r2, #0]
 8011fac:	f002 fc44 	bl	8014838 <tcp_timer_needed>
      }
      break;
 8011fb0:	e026      	b.n	8012000 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f93c 	bl	8012230 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011fb8:	4b17      	ldr	r3, [pc, #92]	@ (8012018 <tcp_process+0x7d0>)
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	f003 0310 	and.w	r3, r3, #16
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d01f      	beq.n	8012004 <tcp_process+0x7bc>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011fc8:	4b14      	ldr	r3, [pc, #80]	@ (801201c <tcp_process+0x7d4>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d119      	bne.n	8012004 <tcp_process+0x7bc>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d115      	bne.n	8012004 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011fd8:	4b11      	ldr	r3, [pc, #68]	@ (8012020 <tcp_process+0x7d8>)
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	f043 0310 	orr.w	r3, r3, #16
 8011fe0:	b2da      	uxtb	r2, r3
 8011fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8012020 <tcp_process+0x7d8>)
 8011fe4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011fe6:	e00d      	b.n	8012004 <tcp_process+0x7bc>
    default:
      break;
 8011fe8:	bf00      	nop
 8011fea:	e00c      	b.n	8012006 <tcp_process+0x7be>
      break;
 8011fec:	bf00      	nop
 8011fee:	e00a      	b.n	8012006 <tcp_process+0x7be>
      break;
 8011ff0:	bf00      	nop
 8011ff2:	e008      	b.n	8012006 <tcp_process+0x7be>
      break;
 8011ff4:	bf00      	nop
 8011ff6:	e006      	b.n	8012006 <tcp_process+0x7be>
      break;
 8011ff8:	bf00      	nop
 8011ffa:	e004      	b.n	8012006 <tcp_process+0x7be>
      break;
 8011ffc:	bf00      	nop
 8011ffe:	e002      	b.n	8012006 <tcp_process+0x7be>
      break;
 8012000:	bf00      	nop
 8012002:	e000      	b.n	8012006 <tcp_process+0x7be>
      break;
 8012004:	bf00      	nop
  }
  return ERR_OK;
 8012006:	2300      	movs	r3, #0
}
 8012008:	4618      	mov	r0, r3
 801200a:	3724      	adds	r7, #36	@ 0x24
 801200c:	46bd      	mov	sp, r7
 801200e:	bd90      	pop	{r4, r7, pc}
 8012010:	2000d584 	.word	0x2000d584
 8012014:	2000d580 	.word	0x2000d580
 8012018:	2000d5b4 	.word	0x2000d5b4
 801201c:	2000d5ac 	.word	0x2000d5ac
 8012020:	2000d5b5 	.word	0x2000d5b5
 8012024:	2000d57c 	.word	0x2000d57c

08012028 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012028:	b590      	push	{r4, r7, lr}
 801202a:	b085      	sub	sp, #20
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d106      	bne.n	8012046 <tcp_oos_insert_segment+0x1e>
 8012038:	4b3b      	ldr	r3, [pc, #236]	@ (8012128 <tcp_oos_insert_segment+0x100>)
 801203a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801203e:	493b      	ldr	r1, [pc, #236]	@ (801212c <tcp_oos_insert_segment+0x104>)
 8012040:	483b      	ldr	r0, [pc, #236]	@ (8012130 <tcp_oos_insert_segment+0x108>)
 8012042:	f006 f8d9 	bl	80181f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	899b      	ldrh	r3, [r3, #12]
 801204c:	b29b      	uxth	r3, r3
 801204e:	4618      	mov	r0, r3
 8012050:	f7fb fc0e 	bl	800d870 <lwip_htons>
 8012054:	4603      	mov	r3, r0
 8012056:	b2db      	uxtb	r3, r3
 8012058:	f003 0301 	and.w	r3, r3, #1
 801205c:	2b00      	cmp	r3, #0
 801205e:	d028      	beq.n	80120b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012060:	6838      	ldr	r0, [r7, #0]
 8012062:	f7fe fa63 	bl	801052c <tcp_segs_free>
    next = NULL;
 8012066:	2300      	movs	r3, #0
 8012068:	603b      	str	r3, [r7, #0]
 801206a:	e056      	b.n	801211a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	899b      	ldrh	r3, [r3, #12]
 8012072:	b29b      	uxth	r3, r3
 8012074:	4618      	mov	r0, r3
 8012076:	f7fb fbfb 	bl	800d870 <lwip_htons>
 801207a:	4603      	mov	r3, r0
 801207c:	b2db      	uxtb	r3, r3
 801207e:	f003 0301 	and.w	r3, r3, #1
 8012082:	2b00      	cmp	r3, #0
 8012084:	d00d      	beq.n	80120a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	899b      	ldrh	r3, [r3, #12]
 801208c:	b29c      	uxth	r4, r3
 801208e:	2001      	movs	r0, #1
 8012090:	f7fb fbee 	bl	800d870 <lwip_htons>
 8012094:	4603      	mov	r3, r0
 8012096:	461a      	mov	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	4322      	orrs	r2, r4
 801209e:	b292      	uxth	r2, r2
 80120a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7fe fa52 	bl	8010556 <tcp_seg_free>
    while (next &&
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d00e      	beq.n	80120d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	891b      	ldrh	r3, [r3, #8]
 80120bc:	461a      	mov	r2, r3
 80120be:	4b1d      	ldr	r3, [pc, #116]	@ (8012134 <tcp_oos_insert_segment+0x10c>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	441a      	add	r2, r3
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	6839      	ldr	r1, [r7, #0]
 80120cc:	8909      	ldrh	r1, [r1, #8]
 80120ce:	440b      	add	r3, r1
 80120d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	daca      	bge.n	801206c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d01e      	beq.n	801211a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	891b      	ldrh	r3, [r3, #8]
 80120e0:	461a      	mov	r2, r3
 80120e2:	4b14      	ldr	r3, [pc, #80]	@ (8012134 <tcp_oos_insert_segment+0x10c>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	441a      	add	r2, r3
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	dd12      	ble.n	801211a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	4b0d      	ldr	r3, [pc, #52]	@ (8012134 <tcp_oos_insert_segment+0x10c>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	b29b      	uxth	r3, r3
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	b29a      	uxth	r2, r3
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	891b      	ldrh	r3, [r3, #8]
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fc fe17 	bl	800ed48 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	683a      	ldr	r2, [r7, #0]
 801211e:	601a      	str	r2, [r3, #0]
}
 8012120:	bf00      	nop
 8012122:	3714      	adds	r7, #20
 8012124:	46bd      	mov	sp, r7
 8012126:	bd90      	pop	{r4, r7, pc}
 8012128:	0801a434 	.word	0x0801a434
 801212c:	0801a6f4 	.word	0x0801a6f4
 8012130:	0801a480 	.word	0x0801a480
 8012134:	2000d5a8 	.word	0x2000d5a8

08012138 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012138:	b5b0      	push	{r4, r5, r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
 8012144:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012146:	e03e      	b.n	80121c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	4618      	mov	r0, r3
 8012158:	f7fd f80a 	bl	800f170 <pbuf_clen>
 801215c:	4603      	mov	r3, r0
 801215e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012166:	8a7a      	ldrh	r2, [r7, #18]
 8012168:	429a      	cmp	r2, r3
 801216a:	d906      	bls.n	801217a <tcp_free_acked_segments+0x42>
 801216c:	4b2a      	ldr	r3, [pc, #168]	@ (8012218 <tcp_free_acked_segments+0xe0>)
 801216e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012172:	492a      	ldr	r1, [pc, #168]	@ (801221c <tcp_free_acked_segments+0xe4>)
 8012174:	482a      	ldr	r0, [pc, #168]	@ (8012220 <tcp_free_acked_segments+0xe8>)
 8012176:	f006 f83f 	bl	80181f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012180:	8a7b      	ldrh	r3, [r7, #18]
 8012182:	1ad3      	subs	r3, r2, r3
 8012184:	b29a      	uxth	r2, r3
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	891a      	ldrh	r2, [r3, #8]
 8012190:	4b24      	ldr	r3, [pc, #144]	@ (8012224 <tcp_free_acked_segments+0xec>)
 8012192:	881b      	ldrh	r3, [r3, #0]
 8012194:	4413      	add	r3, r2
 8012196:	b29a      	uxth	r2, r3
 8012198:	4b22      	ldr	r3, [pc, #136]	@ (8012224 <tcp_free_acked_segments+0xec>)
 801219a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801219c:	6978      	ldr	r0, [r7, #20]
 801219e:	f7fe f9da 	bl	8010556 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00c      	beq.n	80121c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d109      	bne.n	80121c6 <tcp_free_acked_segments+0x8e>
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d106      	bne.n	80121c6 <tcp_free_acked_segments+0x8e>
 80121b8:	4b17      	ldr	r3, [pc, #92]	@ (8012218 <tcp_free_acked_segments+0xe0>)
 80121ba:	f240 4261 	movw	r2, #1121	@ 0x461
 80121be:	491a      	ldr	r1, [pc, #104]	@ (8012228 <tcp_free_acked_segments+0xf0>)
 80121c0:	4817      	ldr	r0, [pc, #92]	@ (8012220 <tcp_free_acked_segments+0xe8>)
 80121c2:	f006 f819 	bl	80181f8 <iprintf>
  while (seg_list != NULL &&
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d020      	beq.n	801220e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fb fb61 	bl	800d89a <lwip_htonl>
 80121d8:	4604      	mov	r4, r0
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	891b      	ldrh	r3, [r3, #8]
 80121de:	461d      	mov	r5, r3
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	899b      	ldrh	r3, [r3, #12]
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fb fb41 	bl	800d870 <lwip_htons>
 80121ee:	4603      	mov	r3, r0
 80121f0:	b2db      	uxtb	r3, r3
 80121f2:	f003 0303 	and.w	r3, r3, #3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <tcp_free_acked_segments+0xc6>
 80121fa:	2301      	movs	r3, #1
 80121fc:	e000      	b.n	8012200 <tcp_free_acked_segments+0xc8>
 80121fe:	2300      	movs	r3, #0
 8012200:	442b      	add	r3, r5
 8012202:	18e2      	adds	r2, r4, r3
 8012204:	4b09      	ldr	r3, [pc, #36]	@ (801222c <tcp_free_acked_segments+0xf4>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801220a:	2b00      	cmp	r3, #0
 801220c:	dd9c      	ble.n	8012148 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801220e:	68bb      	ldr	r3, [r7, #8]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3718      	adds	r7, #24
 8012214:	46bd      	mov	sp, r7
 8012216:	bdb0      	pop	{r4, r5, r7, pc}
 8012218:	0801a434 	.word	0x0801a434
 801221c:	0801a71c 	.word	0x0801a71c
 8012220:	0801a480 	.word	0x0801a480
 8012224:	2000d5b0 	.word	0x2000d5b0
 8012228:	0801a744 	.word	0x0801a744
 801222c:	2000d5ac 	.word	0x2000d5ac

08012230 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012230:	b5b0      	push	{r4, r5, r7, lr}
 8012232:	b094      	sub	sp, #80	@ 0x50
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012238:	2300      	movs	r3, #0
 801223a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d106      	bne.n	8012250 <tcp_receive+0x20>
 8012242:	4b91      	ldr	r3, [pc, #580]	@ (8012488 <tcp_receive+0x258>)
 8012244:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012248:	4990      	ldr	r1, [pc, #576]	@ (801248c <tcp_receive+0x25c>)
 801224a:	4891      	ldr	r0, [pc, #580]	@ (8012490 <tcp_receive+0x260>)
 801224c:	f005 ffd4 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	7d1b      	ldrb	r3, [r3, #20]
 8012254:	2b03      	cmp	r3, #3
 8012256:	d806      	bhi.n	8012266 <tcp_receive+0x36>
 8012258:	4b8b      	ldr	r3, [pc, #556]	@ (8012488 <tcp_receive+0x258>)
 801225a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801225e:	498d      	ldr	r1, [pc, #564]	@ (8012494 <tcp_receive+0x264>)
 8012260:	488b      	ldr	r0, [pc, #556]	@ (8012490 <tcp_receive+0x260>)
 8012262:	f005 ffc9 	bl	80181f8 <iprintf>

  if (flags & TCP_ACK) {
 8012266:	4b8c      	ldr	r3, [pc, #560]	@ (8012498 <tcp_receive+0x268>)
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	f003 0310 	and.w	r3, r3, #16
 801226e:	2b00      	cmp	r3, #0
 8012270:	f000 8264 	beq.w	801273c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801227a:	461a      	mov	r2, r3
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012280:	4413      	add	r3, r2
 8012282:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012288:	4b84      	ldr	r3, [pc, #528]	@ (801249c <tcp_receive+0x26c>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	2b00      	cmp	r3, #0
 8012290:	db1b      	blt.n	80122ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012296:	4b81      	ldr	r3, [pc, #516]	@ (801249c <tcp_receive+0x26c>)
 8012298:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801229a:	429a      	cmp	r2, r3
 801229c:	d106      	bne.n	80122ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80122a2:	4b7f      	ldr	r3, [pc, #508]	@ (80124a0 <tcp_receive+0x270>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	1ad3      	subs	r3, r2, r3
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	db0e      	blt.n	80122ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80122b0:	4b7b      	ldr	r3, [pc, #492]	@ (80124a0 <tcp_receive+0x270>)
 80122b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d125      	bne.n	8012304 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122b8:	4b7a      	ldr	r3, [pc, #488]	@ (80124a4 <tcp_receive+0x274>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	89db      	ldrh	r3, [r3, #14]
 80122be:	b29a      	uxth	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d91c      	bls.n	8012304 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80122ca:	4b76      	ldr	r3, [pc, #472]	@ (80124a4 <tcp_receive+0x274>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	89db      	ldrh	r3, [r3, #14]
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d205      	bcs.n	80122f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80122f4:	4b69      	ldr	r3, [pc, #420]	@ (801249c <tcp_receive+0x26c>)
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80122fc:	4b68      	ldr	r3, [pc, #416]	@ (80124a0 <tcp_receive+0x270>)
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012304:	4b66      	ldr	r3, [pc, #408]	@ (80124a0 <tcp_receive+0x270>)
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	dc58      	bgt.n	80123c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012312:	4b65      	ldr	r3, [pc, #404]	@ (80124a8 <tcp_receive+0x278>)
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d14b      	bne.n	80123b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012324:	4413      	add	r3, r2
 8012326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012328:	429a      	cmp	r2, r3
 801232a:	d142      	bne.n	80123b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012332:	2b00      	cmp	r3, #0
 8012334:	db3d      	blt.n	80123b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801233a:	4b59      	ldr	r3, [pc, #356]	@ (80124a0 <tcp_receive+0x270>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	429a      	cmp	r2, r3
 8012340:	d137      	bne.n	80123b2 <tcp_receive+0x182>
              found_dupack = 1;
 8012342:	2301      	movs	r3, #1
 8012344:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801234c:	2bff      	cmp	r3, #255	@ 0xff
 801234e:	d007      	beq.n	8012360 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012356:	3301      	adds	r3, #1
 8012358:	b2da      	uxtb	r2, r3
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012366:	2b03      	cmp	r3, #3
 8012368:	d91b      	bls.n	80123a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012374:	4413      	add	r3, r2
 8012376:	b29a      	uxth	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801237e:	429a      	cmp	r2, r3
 8012380:	d30a      	bcc.n	8012398 <tcp_receive+0x168>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801238c:	4413      	add	r3, r2
 801238e:	b29a      	uxth	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012396:	e004      	b.n	80123a2 <tcp_receive+0x172>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801239e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d902      	bls.n	80123b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f001 fee7 	bl	8014180 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80123b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f040 8161 	bne.w	801267c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2200      	movs	r2, #0
 80123be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80123c2:	e15b      	b.n	801267c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123c4:	4b36      	ldr	r3, [pc, #216]	@ (80124a0 <tcp_receive+0x270>)
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	3b01      	subs	r3, #1
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f2c0 814e 	blt.w	8012672 <tcp_receive+0x442>
 80123d6:	4b32      	ldr	r3, [pc, #200]	@ (80124a0 <tcp_receive+0x270>)
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f300 8146 	bgt.w	8012672 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	8b5b      	ldrh	r3, [r3, #26]
 80123ea:	f003 0304 	and.w	r3, r3, #4
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d010      	beq.n	8012414 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	8b5b      	ldrh	r3, [r3, #26]
 80123f6:	f023 0304 	bic.w	r3, r3, #4
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012422:	10db      	asrs	r3, r3, #3
 8012424:	b21b      	sxth	r3, r3
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801242e:	b29b      	uxth	r3, r3
 8012430:	4413      	add	r3, r2
 8012432:	b29b      	uxth	r3, r3
 8012434:	b21a      	sxth	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801243c:	4b18      	ldr	r3, [pc, #96]	@ (80124a0 <tcp_receive+0x270>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	b29a      	uxth	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012446:	b29b      	uxth	r3, r3
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2200      	movs	r2, #0
 8012450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012454:	4b12      	ldr	r3, [pc, #72]	@ (80124a0 <tcp_receive+0x270>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	7d1b      	ldrb	r3, [r3, #20]
 8012460:	2b03      	cmp	r3, #3
 8012462:	f240 8097 	bls.w	8012594 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012472:	429a      	cmp	r2, r3
 8012474:	d245      	bcs.n	8012502 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8b5b      	ldrh	r3, [r3, #26]
 801247a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801247e:	2b00      	cmp	r3, #0
 8012480:	d014      	beq.n	80124ac <tcp_receive+0x27c>
 8012482:	2301      	movs	r3, #1
 8012484:	e013      	b.n	80124ae <tcp_receive+0x27e>
 8012486:	bf00      	nop
 8012488:	0801a434 	.word	0x0801a434
 801248c:	0801a764 	.word	0x0801a764
 8012490:	0801a480 	.word	0x0801a480
 8012494:	0801a780 	.word	0x0801a780
 8012498:	2000d5b4 	.word	0x2000d5b4
 801249c:	2000d5a8 	.word	0x2000d5a8
 80124a0:	2000d5ac 	.word	0x2000d5ac
 80124a4:	2000d598 	.word	0x2000d598
 80124a8:	2000d5b2 	.word	0x2000d5b2
 80124ac:	2302      	movs	r3, #2
 80124ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80124b2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124bc:	fb12 f303 	smulbb	r3, r2, r3
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80124c4:	4293      	cmp	r3, r2
 80124c6:	bf28      	it	cs
 80124c8:	4613      	movcs	r3, r2
 80124ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80124d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80124d4:	4413      	add	r3, r2
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80124de:	429a      	cmp	r2, r3
 80124e0:	d309      	bcc.n	80124f6 <tcp_receive+0x2c6>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80124e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80124ea:	4413      	add	r3, r2
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80124f4:	e04e      	b.n	8012594 <tcp_receive+0x364>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012500:	e048      	b.n	8012594 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012508:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801250a:	4413      	add	r3, r2
 801250c:	b29a      	uxth	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012514:	429a      	cmp	r2, r3
 8012516:	d309      	bcc.n	801252c <tcp_receive+0x2fc>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801251e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012520:	4413      	add	r3, r2
 8012522:	b29a      	uxth	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801252a:	e004      	b.n	8012536 <tcp_receive+0x306>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012532:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012542:	429a      	cmp	r2, r3
 8012544:	d326      	bcc.n	8012594 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012552:	1ad3      	subs	r3, r2, r3
 8012554:	b29a      	uxth	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012566:	4413      	add	r3, r2
 8012568:	b29a      	uxth	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012570:	429a      	cmp	r2, r3
 8012572:	d30a      	bcc.n	801258a <tcp_receive+0x35a>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801257e:	4413      	add	r3, r2
 8012580:	b29a      	uxth	r2, r3
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012588:	e004      	b.n	8012594 <tcp_receive+0x364>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012590:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801259c:	4a98      	ldr	r2, [pc, #608]	@ (8012800 <tcp_receive+0x5d0>)
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7ff fdca 	bl	8012138 <tcp_free_acked_segments>
 80125a4:	4602      	mov	r2, r0
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125b2:	4a94      	ldr	r2, [pc, #592]	@ (8012804 <tcp_receive+0x5d4>)
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff fdbf 	bl	8012138 <tcp_free_acked_segments>
 80125ba:	4602      	mov	r2, r0
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d104      	bne.n	80125d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 80125d0:	e002      	b.n	80125d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2200      	movs	r2, #0
 80125d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d103      	bne.n	80125ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2200      	movs	r2, #0
 80125ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80125f4:	4b84      	ldr	r3, [pc, #528]	@ (8012808 <tcp_receive+0x5d8>)
 80125f6:	881b      	ldrh	r3, [r3, #0]
 80125f8:	4413      	add	r3, r2
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	8b5b      	ldrh	r3, [r3, #26]
 8012606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801260a:	2b00      	cmp	r3, #0
 801260c:	d035      	beq.n	801267a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012612:	2b00      	cmp	r3, #0
 8012614:	d118      	bne.n	8012648 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00c      	beq.n	8012638 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	4618      	mov	r0, r3
 801262c:	f7fb f935 	bl	800d89a <lwip_htonl>
 8012630:	4603      	mov	r3, r0
 8012632:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012634:	2b00      	cmp	r3, #0
 8012636:	dc20      	bgt.n	801267a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	8b5b      	ldrh	r3, [r3, #26]
 801263c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012640:	b29a      	uxth	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012646:	e018      	b.n	801267a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	f7fb f920 	bl	800d89a <lwip_htonl>
 801265a:	4603      	mov	r3, r0
 801265c:	1ae3      	subs	r3, r4, r3
 801265e:	2b00      	cmp	r3, #0
 8012660:	dc0b      	bgt.n	801267a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	8b5b      	ldrh	r3, [r3, #26]
 8012666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801266a:	b29a      	uxth	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012670:	e003      	b.n	801267a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f001 ff70 	bl	8014558 <tcp_send_empty_ack>
 8012678:	e000      	b.n	801267c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801267a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012680:	2b00      	cmp	r3, #0
 8012682:	d05b      	beq.n	801273c <tcp_receive+0x50c>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012688:	4b60      	ldr	r3, [pc, #384]	@ (801280c <tcp_receive+0x5dc>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	2b00      	cmp	r3, #0
 8012690:	da54      	bge.n	801273c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012692:	4b5f      	ldr	r3, [pc, #380]	@ (8012810 <tcp_receive+0x5e0>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	b29a      	uxth	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801269c:	b29b      	uxth	r3, r3
 801269e:	1ad3      	subs	r3, r2, r3
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80126a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80126b0:	10db      	asrs	r3, r3, #3
 80126b2:	b21b      	sxth	r3, r3
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80126c4:	b29a      	uxth	r2, r3
 80126c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80126ca:	4413      	add	r3, r2
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	b21a      	sxth	r2, r3
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80126d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80126d8:	2b00      	cmp	r3, #0
 80126da:	da05      	bge.n	80126e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80126dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80126e0:	425b      	negs	r3, r3
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80126e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80126f2:	109b      	asrs	r3, r3, #2
 80126f4:	b21b      	sxth	r3, r3
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	1ad3      	subs	r3, r2, r3
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012706:	b29a      	uxth	r2, r3
 8012708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801270c:	4413      	add	r3, r2
 801270e:	b29b      	uxth	r3, r3
 8012710:	b21a      	sxth	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801271c:	10db      	asrs	r3, r3, #3
 801271e:	b21b      	sxth	r3, r3
 8012720:	b29a      	uxth	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012728:	b29b      	uxth	r3, r3
 801272a:	4413      	add	r3, r2
 801272c:	b29b      	uxth	r3, r3
 801272e:	b21a      	sxth	r2, r3
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2200      	movs	r2, #0
 801273a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801273c:	4b35      	ldr	r3, [pc, #212]	@ (8012814 <tcp_receive+0x5e4>)
 801273e:	881b      	ldrh	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	f000 84df 	beq.w	8013104 <tcp_receive+0xed4>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	7d1b      	ldrb	r3, [r3, #20]
 801274a:	2b06      	cmp	r3, #6
 801274c:	f200 84da 	bhi.w	8013104 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012754:	4b30      	ldr	r3, [pc, #192]	@ (8012818 <tcp_receive+0x5e8>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	3b01      	subs	r3, #1
 801275c:	2b00      	cmp	r3, #0
 801275e:	f2c0 808f 	blt.w	8012880 <tcp_receive+0x650>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012766:	4b2b      	ldr	r3, [pc, #172]	@ (8012814 <tcp_receive+0x5e4>)
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	4619      	mov	r1, r3
 801276c:	4b2a      	ldr	r3, [pc, #168]	@ (8012818 <tcp_receive+0x5e8>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	440b      	add	r3, r1
 8012772:	1ad3      	subs	r3, r2, r3
 8012774:	3301      	adds	r3, #1
 8012776:	2b00      	cmp	r3, #0
 8012778:	f300 8082 	bgt.w	8012880 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801277c:	4b27      	ldr	r3, [pc, #156]	@ (801281c <tcp_receive+0x5ec>)
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012786:	4b24      	ldr	r3, [pc, #144]	@ (8012818 <tcp_receive+0x5e8>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	1ad3      	subs	r3, r2, r3
 801278c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801278e:	4b23      	ldr	r3, [pc, #140]	@ (801281c <tcp_receive+0x5ec>)
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d106      	bne.n	80127a4 <tcp_receive+0x574>
 8012796:	4b22      	ldr	r3, [pc, #136]	@ (8012820 <tcp_receive+0x5f0>)
 8012798:	f240 5294 	movw	r2, #1428	@ 0x594
 801279c:	4921      	ldr	r1, [pc, #132]	@ (8012824 <tcp_receive+0x5f4>)
 801279e:	4822      	ldr	r0, [pc, #136]	@ (8012828 <tcp_receive+0x5f8>)
 80127a0:	f005 fd2a 	bl	80181f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80127a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d906      	bls.n	80127bc <tcp_receive+0x58c>
 80127ae:	4b1c      	ldr	r3, [pc, #112]	@ (8012820 <tcp_receive+0x5f0>)
 80127b0:	f240 5295 	movw	r2, #1429	@ 0x595
 80127b4:	491d      	ldr	r1, [pc, #116]	@ (801282c <tcp_receive+0x5fc>)
 80127b6:	481c      	ldr	r0, [pc, #112]	@ (8012828 <tcp_receive+0x5f8>)
 80127b8:	f005 fd1e 	bl	80181f8 <iprintf>
      off = (u16_t)off32;
 80127bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80127c2:	4b16      	ldr	r3, [pc, #88]	@ (801281c <tcp_receive+0x5ec>)
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	891b      	ldrh	r3, [r3, #8]
 80127c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d906      	bls.n	80127de <tcp_receive+0x5ae>
 80127d0:	4b13      	ldr	r3, [pc, #76]	@ (8012820 <tcp_receive+0x5f0>)
 80127d2:	f240 5297 	movw	r2, #1431	@ 0x597
 80127d6:	4916      	ldr	r1, [pc, #88]	@ (8012830 <tcp_receive+0x600>)
 80127d8:	4813      	ldr	r0, [pc, #76]	@ (8012828 <tcp_receive+0x5f8>)
 80127da:	f005 fd0d 	bl	80181f8 <iprintf>
      inseg.len -= off;
 80127de:	4b0f      	ldr	r3, [pc, #60]	@ (801281c <tcp_receive+0x5ec>)
 80127e0:	891a      	ldrh	r2, [r3, #8]
 80127e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	4b0c      	ldr	r3, [pc, #48]	@ (801281c <tcp_receive+0x5ec>)
 80127ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80127ee:	4b0b      	ldr	r3, [pc, #44]	@ (801281c <tcp_receive+0x5ec>)
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	891a      	ldrh	r2, [r3, #8]
 80127f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80127f8:	1ad3      	subs	r3, r2, r3
 80127fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80127fc:	e02a      	b.n	8012854 <tcp_receive+0x624>
 80127fe:	bf00      	nop
 8012800:	0801a79c 	.word	0x0801a79c
 8012804:	0801a7a4 	.word	0x0801a7a4
 8012808:	2000d5b0 	.word	0x2000d5b0
 801280c:	2000d5ac 	.word	0x2000d5ac
 8012810:	2000d570 	.word	0x2000d570
 8012814:	2000d5b2 	.word	0x2000d5b2
 8012818:	2000d5a8 	.word	0x2000d5a8
 801281c:	2000d588 	.word	0x2000d588
 8012820:	0801a434 	.word	0x0801a434
 8012824:	0801a7ac 	.word	0x0801a7ac
 8012828:	0801a480 	.word	0x0801a480
 801282c:	0801a7bc 	.word	0x0801a7bc
 8012830:	0801a7cc 	.word	0x0801a7cc
        off -= p->len;
 8012834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012836:	895b      	ldrh	r3, [r3, #10]
 8012838:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012844:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012846:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801284a:	2200      	movs	r2, #0
 801284c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801284e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012856:	895b      	ldrh	r3, [r3, #10]
 8012858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801285c:	429a      	cmp	r2, r3
 801285e:	d8e9      	bhi.n	8012834 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012864:	4619      	mov	r1, r3
 8012866:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012868:	f7fc fb6e 	bl	800ef48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012870:	4a90      	ldr	r2, [pc, #576]	@ (8012ab4 <tcp_receive+0x884>)
 8012872:	6013      	str	r3, [r2, #0]
 8012874:	4b90      	ldr	r3, [pc, #576]	@ (8012ab8 <tcp_receive+0x888>)
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	4a8e      	ldr	r2, [pc, #568]	@ (8012ab4 <tcp_receive+0x884>)
 801287a:	6812      	ldr	r2, [r2, #0]
 801287c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801287e:	e00d      	b.n	801289c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012880:	4b8c      	ldr	r3, [pc, #560]	@ (8012ab4 <tcp_receive+0x884>)
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012888:	1ad3      	subs	r3, r2, r3
 801288a:	2b00      	cmp	r3, #0
 801288c:	da06      	bge.n	801289c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	8b5b      	ldrh	r3, [r3, #26]
 8012892:	f043 0302 	orr.w	r3, r3, #2
 8012896:	b29a      	uxth	r2, r3
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801289c:	4b85      	ldr	r3, [pc, #532]	@ (8012ab4 <tcp_receive+0x884>)
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128a4:	1ad3      	subs	r3, r2, r3
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	f2c0 8427 	blt.w	80130fa <tcp_receive+0xeca>
 80128ac:	4b81      	ldr	r3, [pc, #516]	@ (8012ab4 <tcp_receive+0x884>)
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128b4:	6879      	ldr	r1, [r7, #4]
 80128b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80128b8:	440b      	add	r3, r1
 80128ba:	1ad3      	subs	r3, r2, r3
 80128bc:	3301      	adds	r3, #1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f300 841b 	bgt.w	80130fa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128c8:	4b7a      	ldr	r3, [pc, #488]	@ (8012ab4 <tcp_receive+0x884>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	f040 8298 	bne.w	8012e02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80128d2:	4b79      	ldr	r3, [pc, #484]	@ (8012ab8 <tcp_receive+0x888>)
 80128d4:	891c      	ldrh	r4, [r3, #8]
 80128d6:	4b78      	ldr	r3, [pc, #480]	@ (8012ab8 <tcp_receive+0x888>)
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	899b      	ldrh	r3, [r3, #12]
 80128dc:	b29b      	uxth	r3, r3
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fa ffc6 	bl	800d870 <lwip_htons>
 80128e4:	4603      	mov	r3, r0
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	f003 0303 	and.w	r3, r3, #3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d001      	beq.n	80128f4 <tcp_receive+0x6c4>
 80128f0:	2301      	movs	r3, #1
 80128f2:	e000      	b.n	80128f6 <tcp_receive+0x6c6>
 80128f4:	2300      	movs	r3, #0
 80128f6:	4423      	add	r3, r4
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	4b70      	ldr	r3, [pc, #448]	@ (8012abc <tcp_receive+0x88c>)
 80128fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012902:	4b6e      	ldr	r3, [pc, #440]	@ (8012abc <tcp_receive+0x88c>)
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	429a      	cmp	r2, r3
 8012908:	d274      	bcs.n	80129f4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801290a:	4b6b      	ldr	r3, [pc, #428]	@ (8012ab8 <tcp_receive+0x888>)
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	899b      	ldrh	r3, [r3, #12]
 8012910:	b29b      	uxth	r3, r3
 8012912:	4618      	mov	r0, r3
 8012914:	f7fa ffac 	bl	800d870 <lwip_htons>
 8012918:	4603      	mov	r3, r0
 801291a:	b2db      	uxtb	r3, r3
 801291c:	f003 0301 	and.w	r3, r3, #1
 8012920:	2b00      	cmp	r3, #0
 8012922:	d01e      	beq.n	8012962 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012924:	4b64      	ldr	r3, [pc, #400]	@ (8012ab8 <tcp_receive+0x888>)
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	899b      	ldrh	r3, [r3, #12]
 801292a:	b29b      	uxth	r3, r3
 801292c:	b21b      	sxth	r3, r3
 801292e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012932:	b21c      	sxth	r4, r3
 8012934:	4b60      	ldr	r3, [pc, #384]	@ (8012ab8 <tcp_receive+0x888>)
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	899b      	ldrh	r3, [r3, #12]
 801293a:	b29b      	uxth	r3, r3
 801293c:	4618      	mov	r0, r3
 801293e:	f7fa ff97 	bl	800d870 <lwip_htons>
 8012942:	4603      	mov	r3, r0
 8012944:	b2db      	uxtb	r3, r3
 8012946:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801294a:	b29b      	uxth	r3, r3
 801294c:	4618      	mov	r0, r3
 801294e:	f7fa ff8f 	bl	800d870 <lwip_htons>
 8012952:	4603      	mov	r3, r0
 8012954:	b21b      	sxth	r3, r3
 8012956:	4323      	orrs	r3, r4
 8012958:	b21a      	sxth	r2, r3
 801295a:	4b57      	ldr	r3, [pc, #348]	@ (8012ab8 <tcp_receive+0x888>)
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	b292      	uxth	r2, r2
 8012960:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012966:	4b54      	ldr	r3, [pc, #336]	@ (8012ab8 <tcp_receive+0x888>)
 8012968:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801296a:	4b53      	ldr	r3, [pc, #332]	@ (8012ab8 <tcp_receive+0x888>)
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	899b      	ldrh	r3, [r3, #12]
 8012970:	b29b      	uxth	r3, r3
 8012972:	4618      	mov	r0, r3
 8012974:	f7fa ff7c 	bl	800d870 <lwip_htons>
 8012978:	4603      	mov	r3, r0
 801297a:	b2db      	uxtb	r3, r3
 801297c:	f003 0302 	and.w	r3, r3, #2
 8012980:	2b00      	cmp	r3, #0
 8012982:	d005      	beq.n	8012990 <tcp_receive+0x760>
            inseg.len -= 1;
 8012984:	4b4c      	ldr	r3, [pc, #304]	@ (8012ab8 <tcp_receive+0x888>)
 8012986:	891b      	ldrh	r3, [r3, #8]
 8012988:	3b01      	subs	r3, #1
 801298a:	b29a      	uxth	r2, r3
 801298c:	4b4a      	ldr	r3, [pc, #296]	@ (8012ab8 <tcp_receive+0x888>)
 801298e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012990:	4b49      	ldr	r3, [pc, #292]	@ (8012ab8 <tcp_receive+0x888>)
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	4a48      	ldr	r2, [pc, #288]	@ (8012ab8 <tcp_receive+0x888>)
 8012996:	8912      	ldrh	r2, [r2, #8]
 8012998:	4611      	mov	r1, r2
 801299a:	4618      	mov	r0, r3
 801299c:	f7fc f9d4 	bl	800ed48 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80129a0:	4b45      	ldr	r3, [pc, #276]	@ (8012ab8 <tcp_receive+0x888>)
 80129a2:	891c      	ldrh	r4, [r3, #8]
 80129a4:	4b44      	ldr	r3, [pc, #272]	@ (8012ab8 <tcp_receive+0x888>)
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	899b      	ldrh	r3, [r3, #12]
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7fa ff5f 	bl	800d870 <lwip_htons>
 80129b2:	4603      	mov	r3, r0
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	f003 0303 	and.w	r3, r3, #3
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <tcp_receive+0x792>
 80129be:	2301      	movs	r3, #1
 80129c0:	e000      	b.n	80129c4 <tcp_receive+0x794>
 80129c2:	2300      	movs	r3, #0
 80129c4:	4423      	add	r3, r4
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	4b3c      	ldr	r3, [pc, #240]	@ (8012abc <tcp_receive+0x88c>)
 80129ca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80129cc:	4b3b      	ldr	r3, [pc, #236]	@ (8012abc <tcp_receive+0x88c>)
 80129ce:	881b      	ldrh	r3, [r3, #0]
 80129d0:	461a      	mov	r2, r3
 80129d2:	4b38      	ldr	r3, [pc, #224]	@ (8012ab4 <tcp_receive+0x884>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	441a      	add	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129dc:	6879      	ldr	r1, [r7, #4]
 80129de:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80129e0:	440b      	add	r3, r1
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d006      	beq.n	80129f4 <tcp_receive+0x7c4>
 80129e6:	4b36      	ldr	r3, [pc, #216]	@ (8012ac0 <tcp_receive+0x890>)
 80129e8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80129ec:	4935      	ldr	r1, [pc, #212]	@ (8012ac4 <tcp_receive+0x894>)
 80129ee:	4836      	ldr	r0, [pc, #216]	@ (8012ac8 <tcp_receive+0x898>)
 80129f0:	f005 fc02 	bl	80181f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f000 80e6 	beq.w	8012bca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80129fe:	4b2e      	ldr	r3, [pc, #184]	@ (8012ab8 <tcp_receive+0x888>)
 8012a00:	68db      	ldr	r3, [r3, #12]
 8012a02:	899b      	ldrh	r3, [r3, #12]
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fa ff32 	bl	800d870 <lwip_htons>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	f003 0301 	and.w	r3, r3, #1
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d010      	beq.n	8012a3a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012a18:	e00a      	b.n	8012a30 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a1e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012a2a:	68f8      	ldr	r0, [r7, #12]
 8012a2c:	f7fd fd93 	bl	8010556 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1f0      	bne.n	8012a1a <tcp_receive+0x7ea>
 8012a38:	e0c7      	b.n	8012bca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012a40:	e051      	b.n	8012ae6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	899b      	ldrh	r3, [r3, #12]
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fa ff10 	bl	800d870 <lwip_htons>
 8012a50:	4603      	mov	r3, r0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	f003 0301 	and.w	r3, r3, #1
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d03c      	beq.n	8012ad6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012a5c:	4b16      	ldr	r3, [pc, #88]	@ (8012ab8 <tcp_receive+0x888>)
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	899b      	ldrh	r3, [r3, #12]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fa ff03 	bl	800d870 <lwip_htons>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d12f      	bne.n	8012ad6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012a76:	4b10      	ldr	r3, [pc, #64]	@ (8012ab8 <tcp_receive+0x888>)
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	899b      	ldrh	r3, [r3, #12]
 8012a7c:	b29c      	uxth	r4, r3
 8012a7e:	2001      	movs	r0, #1
 8012a80:	f7fa fef6 	bl	800d870 <lwip_htons>
 8012a84:	4603      	mov	r3, r0
 8012a86:	461a      	mov	r2, r3
 8012a88:	4b0b      	ldr	r3, [pc, #44]	@ (8012ab8 <tcp_receive+0x888>)
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	4322      	orrs	r2, r4
 8012a8e:	b292      	uxth	r2, r2
 8012a90:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012a92:	4b09      	ldr	r3, [pc, #36]	@ (8012ab8 <tcp_receive+0x888>)
 8012a94:	891c      	ldrh	r4, [r3, #8]
 8012a96:	4b08      	ldr	r3, [pc, #32]	@ (8012ab8 <tcp_receive+0x888>)
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	899b      	ldrh	r3, [r3, #12]
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fa fee6 	bl	800d870 <lwip_htons>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	f003 0303 	and.w	r3, r3, #3
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00d      	beq.n	8012acc <tcp_receive+0x89c>
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	e00c      	b.n	8012ace <tcp_receive+0x89e>
 8012ab4:	2000d5a8 	.word	0x2000d5a8
 8012ab8:	2000d588 	.word	0x2000d588
 8012abc:	2000d5b2 	.word	0x2000d5b2
 8012ac0:	0801a434 	.word	0x0801a434
 8012ac4:	0801a7dc 	.word	0x0801a7dc
 8012ac8:	0801a480 	.word	0x0801a480
 8012acc:	2300      	movs	r3, #0
 8012ace:	4423      	add	r3, r4
 8012ad0:	b29a      	uxth	r2, r3
 8012ad2:	4b98      	ldr	r3, [pc, #608]	@ (8012d34 <tcp_receive+0xb04>)
 8012ad4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ad8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012ae0:	6938      	ldr	r0, [r7, #16]
 8012ae2:	f7fd fd38 	bl	8010556 <tcp_seg_free>
            while (next &&
 8012ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d00e      	beq.n	8012b0a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012aec:	4b91      	ldr	r3, [pc, #580]	@ (8012d34 <tcp_receive+0xb04>)
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	4b91      	ldr	r3, [pc, #580]	@ (8012d38 <tcp_receive+0xb08>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	441a      	add	r2, r3
 8012af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012b00:	8909      	ldrh	r1, [r1, #8]
 8012b02:	440b      	add	r3, r1
 8012b04:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	da9b      	bge.n	8012a42 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d059      	beq.n	8012bc4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012b10:	4b88      	ldr	r3, [pc, #544]	@ (8012d34 <tcp_receive+0xb04>)
 8012b12:	881b      	ldrh	r3, [r3, #0]
 8012b14:	461a      	mov	r2, r3
 8012b16:	4b88      	ldr	r3, [pc, #544]	@ (8012d38 <tcp_receive+0xb08>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	441a      	add	r2, r3
 8012b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	dd4d      	ble.n	8012bc4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	b29a      	uxth	r2, r3
 8012b30:	4b81      	ldr	r3, [pc, #516]	@ (8012d38 <tcp_receive+0xb08>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	1ad3      	subs	r3, r2, r3
 8012b38:	b29a      	uxth	r2, r3
 8012b3a:	4b80      	ldr	r3, [pc, #512]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	899b      	ldrh	r3, [r3, #12]
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fa fe92 	bl	800d870 <lwip_htons>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	f003 0302 	and.w	r3, r3, #2
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d005      	beq.n	8012b64 <tcp_receive+0x934>
                inseg.len -= 1;
 8012b58:	4b78      	ldr	r3, [pc, #480]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b5a:	891b      	ldrh	r3, [r3, #8]
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	4b76      	ldr	r3, [pc, #472]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012b64:	4b75      	ldr	r3, [pc, #468]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	4a74      	ldr	r2, [pc, #464]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b6a:	8912      	ldrh	r2, [r2, #8]
 8012b6c:	4611      	mov	r1, r2
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7fc f8ea 	bl	800ed48 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012b74:	4b71      	ldr	r3, [pc, #452]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b76:	891c      	ldrh	r4, [r3, #8]
 8012b78:	4b70      	ldr	r3, [pc, #448]	@ (8012d3c <tcp_receive+0xb0c>)
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	899b      	ldrh	r3, [r3, #12]
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fa fe75 	bl	800d870 <lwip_htons>
 8012b86:	4603      	mov	r3, r0
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	f003 0303 	and.w	r3, r3, #3
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d001      	beq.n	8012b96 <tcp_receive+0x966>
 8012b92:	2301      	movs	r3, #1
 8012b94:	e000      	b.n	8012b98 <tcp_receive+0x968>
 8012b96:	2300      	movs	r3, #0
 8012b98:	4423      	add	r3, r4
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	4b65      	ldr	r3, [pc, #404]	@ (8012d34 <tcp_receive+0xb04>)
 8012b9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012ba0:	4b64      	ldr	r3, [pc, #400]	@ (8012d34 <tcp_receive+0xb04>)
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	4b64      	ldr	r3, [pc, #400]	@ (8012d38 <tcp_receive+0xb08>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	441a      	add	r2, r3
 8012bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d006      	beq.n	8012bc4 <tcp_receive+0x994>
 8012bb6:	4b62      	ldr	r3, [pc, #392]	@ (8012d40 <tcp_receive+0xb10>)
 8012bb8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012bbc:	4961      	ldr	r1, [pc, #388]	@ (8012d44 <tcp_receive+0xb14>)
 8012bbe:	4862      	ldr	r0, [pc, #392]	@ (8012d48 <tcp_receive+0xb18>)
 8012bc0:	f005 fb1a 	bl	80181f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012bc8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012bca:	4b5a      	ldr	r3, [pc, #360]	@ (8012d34 <tcp_receive+0xb04>)
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	4b59      	ldr	r3, [pc, #356]	@ (8012d38 <tcp_receive+0xb08>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	441a      	add	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012bde:	4b55      	ldr	r3, [pc, #340]	@ (8012d34 <tcp_receive+0xb04>)
 8012be0:	881b      	ldrh	r3, [r3, #0]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d206      	bcs.n	8012bf4 <tcp_receive+0x9c4>
 8012be6:	4b56      	ldr	r3, [pc, #344]	@ (8012d40 <tcp_receive+0xb10>)
 8012be8:	f240 6207 	movw	r2, #1543	@ 0x607
 8012bec:	4957      	ldr	r1, [pc, #348]	@ (8012d4c <tcp_receive+0xb1c>)
 8012bee:	4856      	ldr	r0, [pc, #344]	@ (8012d48 <tcp_receive+0xb18>)
 8012bf0:	f005 fb02 	bl	80181f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8012d34 <tcp_receive+0xb04>)
 8012bfa:	881b      	ldrh	r3, [r3, #0]
 8012bfc:	1ad3      	subs	r3, r2, r3
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7fc ffc5 	bl	800fb94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8012d3c <tcp_receive+0xb0c>)
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	891b      	ldrh	r3, [r3, #8]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d006      	beq.n	8012c22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012c14:	4b49      	ldr	r3, [pc, #292]	@ (8012d3c <tcp_receive+0xb0c>)
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	4a4d      	ldr	r2, [pc, #308]	@ (8012d50 <tcp_receive+0xb20>)
 8012c1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012c1c:	4b47      	ldr	r3, [pc, #284]	@ (8012d3c <tcp_receive+0xb0c>)
 8012c1e:	2200      	movs	r2, #0
 8012c20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c22:	4b46      	ldr	r3, [pc, #280]	@ (8012d3c <tcp_receive+0xb0c>)
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	899b      	ldrh	r3, [r3, #12]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fa fe20 	bl	800d870 <lwip_htons>
 8012c30:	4603      	mov	r3, r0
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f000 80b8 	beq.w	8012dae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012c3e:	4b45      	ldr	r3, [pc, #276]	@ (8012d54 <tcp_receive+0xb24>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	f043 0320 	orr.w	r3, r3, #32
 8012c46:	b2da      	uxtb	r2, r3
 8012c48:	4b42      	ldr	r3, [pc, #264]	@ (8012d54 <tcp_receive+0xb24>)
 8012c4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012c4c:	e0af      	b.n	8012dae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	4a36      	ldr	r2, [pc, #216]	@ (8012d38 <tcp_receive+0xb08>)
 8012c5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	891b      	ldrh	r3, [r3, #8]
 8012c64:	461c      	mov	r4, r3
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	899b      	ldrh	r3, [r3, #12]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fa fdfe 	bl	800d870 <lwip_htons>
 8012c74:	4603      	mov	r3, r0
 8012c76:	b2db      	uxtb	r3, r3
 8012c78:	f003 0303 	and.w	r3, r3, #3
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <tcp_receive+0xa54>
 8012c80:	2301      	movs	r3, #1
 8012c82:	e000      	b.n	8012c86 <tcp_receive+0xa56>
 8012c84:	2300      	movs	r3, #0
 8012c86:	191a      	adds	r2, r3, r4
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c8c:	441a      	add	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c96:	461c      	mov	r4, r3
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	891b      	ldrh	r3, [r3, #8]
 8012c9c:	461d      	mov	r5, r3
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	899b      	ldrh	r3, [r3, #12]
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7fa fde2 	bl	800d870 <lwip_htons>
 8012cac:	4603      	mov	r3, r0
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	f003 0303 	and.w	r3, r3, #3
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d001      	beq.n	8012cbc <tcp_receive+0xa8c>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	e000      	b.n	8012cbe <tcp_receive+0xa8e>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	442b      	add	r3, r5
 8012cc0:	429c      	cmp	r4, r3
 8012cc2:	d206      	bcs.n	8012cd2 <tcp_receive+0xaa2>
 8012cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8012d40 <tcp_receive+0xb10>)
 8012cc6:	f240 622b 	movw	r2, #1579	@ 0x62b
 8012cca:	4923      	ldr	r1, [pc, #140]	@ (8012d58 <tcp_receive+0xb28>)
 8012ccc:	481e      	ldr	r0, [pc, #120]	@ (8012d48 <tcp_receive+0xb18>)
 8012cce:	f005 fa93 	bl	80181f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	891b      	ldrh	r3, [r3, #8]
 8012cd6:	461c      	mov	r4, r3
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	899b      	ldrh	r3, [r3, #12]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fa fdc5 	bl	800d870 <lwip_htons>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	f003 0303 	and.w	r3, r3, #3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d001      	beq.n	8012cf6 <tcp_receive+0xac6>
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	e000      	b.n	8012cf8 <tcp_receive+0xac8>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	1919      	adds	r1, r3, r4
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012cfe:	b28b      	uxth	r3, r1
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7fc ff43 	bl	800fb94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	891b      	ldrh	r3, [r3, #8]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d028      	beq.n	8012d6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012d18:	4b0d      	ldr	r3, [pc, #52]	@ (8012d50 <tcp_receive+0xb20>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d01d      	beq.n	8012d5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012d20:	4b0b      	ldr	r3, [pc, #44]	@ (8012d50 <tcp_receive+0xb20>)
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	4610      	mov	r0, r2
 8012d2c:	f7fc fa60 	bl	800f1f0 <pbuf_cat>
 8012d30:	e018      	b.n	8012d64 <tcp_receive+0xb34>
 8012d32:	bf00      	nop
 8012d34:	2000d5b2 	.word	0x2000d5b2
 8012d38:	2000d5a8 	.word	0x2000d5a8
 8012d3c:	2000d588 	.word	0x2000d588
 8012d40:	0801a434 	.word	0x0801a434
 8012d44:	0801a814 	.word	0x0801a814
 8012d48:	0801a480 	.word	0x0801a480
 8012d4c:	0801a850 	.word	0x0801a850
 8012d50:	2000d5b8 	.word	0x2000d5b8
 8012d54:	2000d5b5 	.word	0x2000d5b5
 8012d58:	0801a870 	.word	0x0801a870
            } else {
              recv_data = cseg->p;
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	4a70      	ldr	r2, [pc, #448]	@ (8012f24 <tcp_receive+0xcf4>)
 8012d62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	2200      	movs	r2, #0
 8012d68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	899b      	ldrh	r3, [r3, #12]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fa fd7c 	bl	800d870 <lwip_htons>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00d      	beq.n	8012da0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012d84:	4b68      	ldr	r3, [pc, #416]	@ (8012f28 <tcp_receive+0xcf8>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f043 0320 	orr.w	r3, r3, #32
 8012d8c:	b2da      	uxtb	r2, r3
 8012d8e:	4b66      	ldr	r3, [pc, #408]	@ (8012f28 <tcp_receive+0xcf8>)
 8012d90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	7d1b      	ldrb	r3, [r3, #20]
 8012d96:	2b04      	cmp	r3, #4
 8012d98:	d102      	bne.n	8012da0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2207      	movs	r2, #7
 8012d9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012da8:	68b8      	ldr	r0, [r7, #8]
 8012daa:	f7fd fbd4 	bl	8010556 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d008      	beq.n	8012dc8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	685a      	ldr	r2, [r3, #4]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	f43f af43 	beq.w	8012c4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	8b5b      	ldrh	r3, [r3, #26]
 8012dcc:	f003 0301 	and.w	r3, r3, #1
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d00e      	beq.n	8012df2 <tcp_receive+0xbc2>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	8b5b      	ldrh	r3, [r3, #26]
 8012dd8:	f023 0301 	bic.w	r3, r3, #1
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	835a      	strh	r2, [r3, #26]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	8b5b      	ldrh	r3, [r3, #26]
 8012de6:	f043 0302 	orr.w	r3, r3, #2
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012df0:	e187      	b.n	8013102 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	8b5b      	ldrh	r3, [r3, #26]
 8012df6:	f043 0301 	orr.w	r3, r3, #1
 8012dfa:	b29a      	uxth	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012e00:	e17f      	b.n	8013102 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012e0a:	4848      	ldr	r0, [pc, #288]	@ (8012f2c <tcp_receive+0xcfc>)
 8012e0c:	f7fd fbbc 	bl	8010588 <tcp_seg_copy>
 8012e10:	4602      	mov	r2, r0
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	675a      	str	r2, [r3, #116]	@ 0x74
 8012e16:	e16c      	b.n	80130f2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012e22:	e156      	b.n	80130d2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8012e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	685a      	ldr	r2, [r3, #4]
 8012e2a:	4b41      	ldr	r3, [pc, #260]	@ (8012f30 <tcp_receive+0xd00>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d11d      	bne.n	8012e6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012e32:	4b3e      	ldr	r3, [pc, #248]	@ (8012f2c <tcp_receive+0xcfc>)
 8012e34:	891a      	ldrh	r2, [r3, #8]
 8012e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e38:	891b      	ldrh	r3, [r3, #8]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	f240 814e 	bls.w	80130dc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e40:	483a      	ldr	r0, [pc, #232]	@ (8012f2c <tcp_receive+0xcfc>)
 8012e42:	f7fd fba1 	bl	8010588 <tcp_seg_copy>
 8012e46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f000 8148 	beq.w	80130e0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d003      	beq.n	8012e5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e58:	697a      	ldr	r2, [r7, #20]
 8012e5a:	601a      	str	r2, [r3, #0]
 8012e5c:	e002      	b.n	8012e64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	697a      	ldr	r2, [r7, #20]
 8012e62:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012e64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012e66:	6978      	ldr	r0, [r7, #20]
 8012e68:	f7ff f8de 	bl	8012028 <tcp_oos_insert_segment>
                }
                break;
 8012e6c:	e138      	b.n	80130e0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d117      	bne.n	8012ea4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012e74:	4b2e      	ldr	r3, [pc, #184]	@ (8012f30 <tcp_receive+0xd00>)
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	1ad3      	subs	r3, r2, r3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	da57      	bge.n	8012f34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e84:	4829      	ldr	r0, [pc, #164]	@ (8012f2c <tcp_receive+0xcfc>)
 8012e86:	f7fd fb7f 	bl	8010588 <tcp_seg_copy>
 8012e8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f000 8128 	beq.w	80130e4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	69ba      	ldr	r2, [r7, #24]
 8012e98:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012e9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012e9c:	69b8      	ldr	r0, [r7, #24]
 8012e9e:	f7ff f8c3 	bl	8012028 <tcp_oos_insert_segment>
                  }
                  break;
 8012ea2:	e11f      	b.n	80130e4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012ea4:	4b22      	ldr	r3, [pc, #136]	@ (8012f30 <tcp_receive+0xd00>)
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	1ad3      	subs	r3, r2, r3
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	db3e      	blt.n	8012f34 <tcp_receive+0xd04>
 8012eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8012f30 <tcp_receive+0xd00>)
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dc35      	bgt.n	8012f34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ec8:	4818      	ldr	r0, [pc, #96]	@ (8012f2c <tcp_receive+0xcfc>)
 8012eca:	f7fd fb5d 	bl	8010588 <tcp_seg_copy>
 8012ece:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f000 8108 	beq.w	80130e8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012eda:	68db      	ldr	r3, [r3, #12]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ee0:	8912      	ldrh	r2, [r2, #8]
 8012ee2:	441a      	add	r2, r3
 8012ee4:	4b12      	ldr	r3, [pc, #72]	@ (8012f30 <tcp_receive+0xd00>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	dd12      	ble.n	8012f14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012eee:	4b10      	ldr	r3, [pc, #64]	@ (8012f30 <tcp_receive+0xd00>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	b29a      	uxth	r2, r3
 8012ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ef6:	68db      	ldr	r3, [r3, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	1ad3      	subs	r3, r2, r3
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f06:	685a      	ldr	r2, [r3, #4]
 8012f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f0a:	891b      	ldrh	r3, [r3, #8]
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	4610      	mov	r0, r2
 8012f10:	f7fb ff1a 	bl	800ed48 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f16:	69fa      	ldr	r2, [r7, #28]
 8012f18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012f1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012f1c:	69f8      	ldr	r0, [r7, #28]
 8012f1e:	f7ff f883 	bl	8012028 <tcp_oos_insert_segment>
                  }
                  break;
 8012f22:	e0e1      	b.n	80130e8 <tcp_receive+0xeb8>
 8012f24:	2000d5b8 	.word	0x2000d5b8
 8012f28:	2000d5b5 	.word	0x2000d5b5
 8012f2c:	2000d588 	.word	0x2000d588
 8012f30:	2000d5a8 	.word	0x2000d5a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f36:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	f040 80c5 	bne.w	80130cc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012f42:	4b7f      	ldr	r3, [pc, #508]	@ (8013140 <tcp_receive+0xf10>)
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	f340 80bc 	ble.w	80130cc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fa fc87 	bl	800d870 <lwip_htons>
 8012f62:	4603      	mov	r3, r0
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f040 80be 	bne.w	80130ec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012f70:	4874      	ldr	r0, [pc, #464]	@ (8013144 <tcp_receive+0xf14>)
 8012f72:	f7fd fb09 	bl	8010588 <tcp_seg_copy>
 8012f76:	4602      	mov	r2, r0
 8012f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f000 80b5 	beq.w	80130f0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f88:	68db      	ldr	r3, [r3, #12]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f8e:	8912      	ldrh	r2, [r2, #8]
 8012f90:	441a      	add	r2, r3
 8012f92:	4b6b      	ldr	r3, [pc, #428]	@ (8013140 <tcp_receive+0xf10>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	dd12      	ble.n	8012fc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012f9c:	4b68      	ldr	r3, [pc, #416]	@ (8013140 <tcp_receive+0xf10>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	1ad3      	subs	r3, r2, r3
 8012fac:	b29a      	uxth	r2, r3
 8012fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb4:	685a      	ldr	r2, [r3, #4]
 8012fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb8:	891b      	ldrh	r3, [r3, #8]
 8012fba:	4619      	mov	r1, r3
 8012fbc:	4610      	mov	r0, r2
 8012fbe:	f7fb fec3 	bl	800ed48 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012fc2:	4b61      	ldr	r3, [pc, #388]	@ (8013148 <tcp_receive+0xf18>)
 8012fc4:	881b      	ldrh	r3, [r3, #0]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	4b5d      	ldr	r3, [pc, #372]	@ (8013140 <tcp_receive+0xf10>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	441a      	add	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd2:	6879      	ldr	r1, [r7, #4]
 8012fd4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012fd6:	440b      	add	r3, r1
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	f340 8088 	ble.w	80130f0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	899b      	ldrh	r3, [r3, #12]
 8012fe8:	b29b      	uxth	r3, r3
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fa fc40 	bl	800d870 <lwip_htons>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	b2db      	uxtb	r3, r3
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d021      	beq.n	8013040 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	68db      	ldr	r3, [r3, #12]
 8013002:	899b      	ldrh	r3, [r3, #12]
 8013004:	b29b      	uxth	r3, r3
 8013006:	b21b      	sxth	r3, r3
 8013008:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801300c:	b21c      	sxth	r4, r3
 801300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	68db      	ldr	r3, [r3, #12]
 8013014:	899b      	ldrh	r3, [r3, #12]
 8013016:	b29b      	uxth	r3, r3
 8013018:	4618      	mov	r0, r3
 801301a:	f7fa fc29 	bl	800d870 <lwip_htons>
 801301e:	4603      	mov	r3, r0
 8013020:	b2db      	uxtb	r3, r3
 8013022:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013026:	b29b      	uxth	r3, r3
 8013028:	4618      	mov	r0, r3
 801302a:	f7fa fc21 	bl	800d870 <lwip_htons>
 801302e:	4603      	mov	r3, r0
 8013030:	b21b      	sxth	r3, r3
 8013032:	4323      	orrs	r3, r4
 8013034:	b21a      	sxth	r2, r3
 8013036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	68db      	ldr	r3, [r3, #12]
 801303c:	b292      	uxth	r2, r2
 801303e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013044:	b29a      	uxth	r2, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801304a:	4413      	add	r3, r2
 801304c:	b299      	uxth	r1, r3
 801304e:	4b3c      	ldr	r3, [pc, #240]	@ (8013140 <tcp_receive+0xf10>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	b29a      	uxth	r2, r3
 8013054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	1a8a      	subs	r2, r1, r2
 801305a:	b292      	uxth	r2, r2
 801305c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	685a      	ldr	r2, [r3, #4]
 8013064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	891b      	ldrh	r3, [r3, #8]
 801306a:	4619      	mov	r1, r3
 801306c:	4610      	mov	r0, r2
 801306e:	f7fb fe6b 	bl	800ed48 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	891c      	ldrh	r4, [r3, #8]
 8013078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	68db      	ldr	r3, [r3, #12]
 801307e:	899b      	ldrh	r3, [r3, #12]
 8013080:	b29b      	uxth	r3, r3
 8013082:	4618      	mov	r0, r3
 8013084:	f7fa fbf4 	bl	800d870 <lwip_htons>
 8013088:	4603      	mov	r3, r0
 801308a:	b2db      	uxtb	r3, r3
 801308c:	f003 0303 	and.w	r3, r3, #3
 8013090:	2b00      	cmp	r3, #0
 8013092:	d001      	beq.n	8013098 <tcp_receive+0xe68>
 8013094:	2301      	movs	r3, #1
 8013096:	e000      	b.n	801309a <tcp_receive+0xe6a>
 8013098:	2300      	movs	r3, #0
 801309a:	4423      	add	r3, r4
 801309c:	b29a      	uxth	r2, r3
 801309e:	4b2a      	ldr	r3, [pc, #168]	@ (8013148 <tcp_receive+0xf18>)
 80130a0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80130a2:	4b29      	ldr	r3, [pc, #164]	@ (8013148 <tcp_receive+0xf18>)
 80130a4:	881b      	ldrh	r3, [r3, #0]
 80130a6:	461a      	mov	r2, r3
 80130a8:	4b25      	ldr	r3, [pc, #148]	@ (8013140 <tcp_receive+0xf10>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	441a      	add	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130b2:	6879      	ldr	r1, [r7, #4]
 80130b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80130b6:	440b      	add	r3, r1
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d019      	beq.n	80130f0 <tcp_receive+0xec0>
 80130bc:	4b23      	ldr	r3, [pc, #140]	@ (801314c <tcp_receive+0xf1c>)
 80130be:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80130c2:	4923      	ldr	r1, [pc, #140]	@ (8013150 <tcp_receive+0xf20>)
 80130c4:	4823      	ldr	r0, [pc, #140]	@ (8013154 <tcp_receive+0xf24>)
 80130c6:	f005 f897 	bl	80181f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80130ca:	e011      	b.n	80130f0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80130cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80130d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f47f aea5 	bne.w	8012e24 <tcp_receive+0xbf4>
 80130da:	e00a      	b.n	80130f2 <tcp_receive+0xec2>
                break;
 80130dc:	bf00      	nop
 80130de:	e008      	b.n	80130f2 <tcp_receive+0xec2>
                break;
 80130e0:	bf00      	nop
 80130e2:	e006      	b.n	80130f2 <tcp_receive+0xec2>
                  break;
 80130e4:	bf00      	nop
 80130e6:	e004      	b.n	80130f2 <tcp_receive+0xec2>
                  break;
 80130e8:	bf00      	nop
 80130ea:	e002      	b.n	80130f2 <tcp_receive+0xec2>
                  break;
 80130ec:	bf00      	nop
 80130ee:	e000      	b.n	80130f2 <tcp_receive+0xec2>
                break;
 80130f0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f001 fa30 	bl	8014558 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80130f8:	e003      	b.n	8013102 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f001 fa2c 	bl	8014558 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013100:	e01a      	b.n	8013138 <tcp_receive+0xf08>
 8013102:	e019      	b.n	8013138 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013104:	4b0e      	ldr	r3, [pc, #56]	@ (8013140 <tcp_receive+0xf10>)
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801310c:	1ad3      	subs	r3, r2, r3
 801310e:	2b00      	cmp	r3, #0
 8013110:	db0a      	blt.n	8013128 <tcp_receive+0xef8>
 8013112:	4b0b      	ldr	r3, [pc, #44]	@ (8013140 <tcp_receive+0xf10>)
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801311a:	6879      	ldr	r1, [r7, #4]
 801311c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801311e:	440b      	add	r3, r1
 8013120:	1ad3      	subs	r3, r2, r3
 8013122:	3301      	adds	r3, #1
 8013124:	2b00      	cmp	r3, #0
 8013126:	dd07      	ble.n	8013138 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	8b5b      	ldrh	r3, [r3, #26]
 801312c:	f043 0302 	orr.w	r3, r3, #2
 8013130:	b29a      	uxth	r2, r3
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013136:	e7ff      	b.n	8013138 <tcp_receive+0xf08>
 8013138:	bf00      	nop
 801313a:	3750      	adds	r7, #80	@ 0x50
 801313c:	46bd      	mov	sp, r7
 801313e:	bdb0      	pop	{r4, r5, r7, pc}
 8013140:	2000d5a8 	.word	0x2000d5a8
 8013144:	2000d588 	.word	0x2000d588
 8013148:	2000d5b2 	.word	0x2000d5b2
 801314c:	0801a434 	.word	0x0801a434
 8013150:	0801a7dc 	.word	0x0801a7dc
 8013154:	0801a480 	.word	0x0801a480

08013158 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013158:	b480      	push	{r7}
 801315a:	b083      	sub	sp, #12
 801315c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801315e:	4b15      	ldr	r3, [pc, #84]	@ (80131b4 <tcp_get_next_optbyte+0x5c>)
 8013160:	881b      	ldrh	r3, [r3, #0]
 8013162:	1c5a      	adds	r2, r3, #1
 8013164:	b291      	uxth	r1, r2
 8013166:	4a13      	ldr	r2, [pc, #76]	@ (80131b4 <tcp_get_next_optbyte+0x5c>)
 8013168:	8011      	strh	r1, [r2, #0]
 801316a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801316c:	4b12      	ldr	r3, [pc, #72]	@ (80131b8 <tcp_get_next_optbyte+0x60>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d004      	beq.n	801317e <tcp_get_next_optbyte+0x26>
 8013174:	4b11      	ldr	r3, [pc, #68]	@ (80131bc <tcp_get_next_optbyte+0x64>)
 8013176:	881b      	ldrh	r3, [r3, #0]
 8013178:	88fa      	ldrh	r2, [r7, #6]
 801317a:	429a      	cmp	r2, r3
 801317c:	d208      	bcs.n	8013190 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801317e:	4b10      	ldr	r3, [pc, #64]	@ (80131c0 <tcp_get_next_optbyte+0x68>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	3314      	adds	r3, #20
 8013184:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013186:	88fb      	ldrh	r3, [r7, #6]
 8013188:	683a      	ldr	r2, [r7, #0]
 801318a:	4413      	add	r3, r2
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	e00b      	b.n	80131a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013190:	88fb      	ldrh	r3, [r7, #6]
 8013192:	b2da      	uxtb	r2, r3
 8013194:	4b09      	ldr	r3, [pc, #36]	@ (80131bc <tcp_get_next_optbyte+0x64>)
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	b2db      	uxtb	r3, r3
 801319a:	1ad3      	subs	r3, r2, r3
 801319c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801319e:	4b06      	ldr	r3, [pc, #24]	@ (80131b8 <tcp_get_next_optbyte+0x60>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	797b      	ldrb	r3, [r7, #5]
 80131a4:	4413      	add	r3, r2
 80131a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	370c      	adds	r7, #12
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr
 80131b4:	2000d5a4 	.word	0x2000d5a4
 80131b8:	2000d5a0 	.word	0x2000d5a0
 80131bc:	2000d59e 	.word	0x2000d59e
 80131c0:	2000d598 	.word	0x2000d598

080131c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <tcp_parseopt+0x1c>
 80131d2:	4b32      	ldr	r3, [pc, #200]	@ (801329c <tcp_parseopt+0xd8>)
 80131d4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80131d8:	4931      	ldr	r1, [pc, #196]	@ (80132a0 <tcp_parseopt+0xdc>)
 80131da:	4832      	ldr	r0, [pc, #200]	@ (80132a4 <tcp_parseopt+0xe0>)
 80131dc:	f005 f80c 	bl	80181f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80131e0:	4b31      	ldr	r3, [pc, #196]	@ (80132a8 <tcp_parseopt+0xe4>)
 80131e2:	881b      	ldrh	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d056      	beq.n	8013296 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80131e8:	4b30      	ldr	r3, [pc, #192]	@ (80132ac <tcp_parseopt+0xe8>)
 80131ea:	2200      	movs	r2, #0
 80131ec:	801a      	strh	r2, [r3, #0]
 80131ee:	e046      	b.n	801327e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80131f0:	f7ff ffb2 	bl	8013158 <tcp_get_next_optbyte>
 80131f4:	4603      	mov	r3, r0
 80131f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80131f8:	7bfb      	ldrb	r3, [r7, #15]
 80131fa:	2b02      	cmp	r3, #2
 80131fc:	d006      	beq.n	801320c <tcp_parseopt+0x48>
 80131fe:	2b02      	cmp	r3, #2
 8013200:	dc2a      	bgt.n	8013258 <tcp_parseopt+0x94>
 8013202:	2b00      	cmp	r3, #0
 8013204:	d042      	beq.n	801328c <tcp_parseopt+0xc8>
 8013206:	2b01      	cmp	r3, #1
 8013208:	d038      	beq.n	801327c <tcp_parseopt+0xb8>
 801320a:	e025      	b.n	8013258 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801320c:	f7ff ffa4 	bl	8013158 <tcp_get_next_optbyte>
 8013210:	4603      	mov	r3, r0
 8013212:	2b04      	cmp	r3, #4
 8013214:	d13c      	bne.n	8013290 <tcp_parseopt+0xcc>
 8013216:	4b25      	ldr	r3, [pc, #148]	@ (80132ac <tcp_parseopt+0xe8>)
 8013218:	881b      	ldrh	r3, [r3, #0]
 801321a:	3301      	adds	r3, #1
 801321c:	4a22      	ldr	r2, [pc, #136]	@ (80132a8 <tcp_parseopt+0xe4>)
 801321e:	8812      	ldrh	r2, [r2, #0]
 8013220:	4293      	cmp	r3, r2
 8013222:	da35      	bge.n	8013290 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013224:	f7ff ff98 	bl	8013158 <tcp_get_next_optbyte>
 8013228:	4603      	mov	r3, r0
 801322a:	021b      	lsls	r3, r3, #8
 801322c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801322e:	f7ff ff93 	bl	8013158 <tcp_get_next_optbyte>
 8013232:	4603      	mov	r3, r0
 8013234:	461a      	mov	r2, r3
 8013236:	89bb      	ldrh	r3, [r7, #12]
 8013238:	4313      	orrs	r3, r2
 801323a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801323c:	89bb      	ldrh	r3, [r7, #12]
 801323e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013242:	d804      	bhi.n	801324e <tcp_parseopt+0x8a>
 8013244:	89bb      	ldrh	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <tcp_parseopt+0x8a>
 801324a:	89ba      	ldrh	r2, [r7, #12]
 801324c:	e001      	b.n	8013252 <tcp_parseopt+0x8e>
 801324e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013256:	e012      	b.n	801327e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013258:	f7ff ff7e 	bl	8013158 <tcp_get_next_optbyte>
 801325c:	4603      	mov	r3, r0
 801325e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013260:	7afb      	ldrb	r3, [r7, #11]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d916      	bls.n	8013294 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013266:	7afb      	ldrb	r3, [r7, #11]
 8013268:	b29a      	uxth	r2, r3
 801326a:	4b10      	ldr	r3, [pc, #64]	@ (80132ac <tcp_parseopt+0xe8>)
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	4413      	add	r3, r2
 8013270:	b29b      	uxth	r3, r3
 8013272:	3b02      	subs	r3, #2
 8013274:	b29a      	uxth	r2, r3
 8013276:	4b0d      	ldr	r3, [pc, #52]	@ (80132ac <tcp_parseopt+0xe8>)
 8013278:	801a      	strh	r2, [r3, #0]
 801327a:	e000      	b.n	801327e <tcp_parseopt+0xba>
          break;
 801327c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801327e:	4b0b      	ldr	r3, [pc, #44]	@ (80132ac <tcp_parseopt+0xe8>)
 8013280:	881a      	ldrh	r2, [r3, #0]
 8013282:	4b09      	ldr	r3, [pc, #36]	@ (80132a8 <tcp_parseopt+0xe4>)
 8013284:	881b      	ldrh	r3, [r3, #0]
 8013286:	429a      	cmp	r2, r3
 8013288:	d3b2      	bcc.n	80131f0 <tcp_parseopt+0x2c>
 801328a:	e004      	b.n	8013296 <tcp_parseopt+0xd2>
          return;
 801328c:	bf00      	nop
 801328e:	e002      	b.n	8013296 <tcp_parseopt+0xd2>
            return;
 8013290:	bf00      	nop
 8013292:	e000      	b.n	8013296 <tcp_parseopt+0xd2>
            return;
 8013294:	bf00      	nop
      }
    }
  }
}
 8013296:	3710      	adds	r7, #16
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	0801a434 	.word	0x0801a434
 80132a0:	0801a898 	.word	0x0801a898
 80132a4:	0801a480 	.word	0x0801a480
 80132a8:	2000d59c 	.word	0x2000d59c
 80132ac:	2000d5a4 	.word	0x2000d5a4

080132b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80132b0:	b480      	push	{r7}
 80132b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80132b4:	4b05      	ldr	r3, [pc, #20]	@ (80132cc <tcp_trigger_input_pcb_close+0x1c>)
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	f043 0310 	orr.w	r3, r3, #16
 80132bc:	b2da      	uxtb	r2, r3
 80132be:	4b03      	ldr	r3, [pc, #12]	@ (80132cc <tcp_trigger_input_pcb_close+0x1c>)
 80132c0:	701a      	strb	r2, [r3, #0]
}
 80132c2:	bf00      	nop
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr
 80132cc:	2000d5b5 	.word	0x2000d5b5

080132d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d00a      	beq.n	80132f8 <tcp_route+0x28>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	7a1b      	ldrb	r3, [r3, #8]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d006      	beq.n	80132f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	7a1b      	ldrb	r3, [r3, #8]
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fb fb22 	bl	800e938 <netif_get_by_index>
 80132f4:	4603      	mov	r3, r0
 80132f6:	e003      	b.n	8013300 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f002 feab 	bl	8016054 <ip4_route>
 80132fe:	4603      	mov	r3, r0
  }
}
 8013300:	4618      	mov	r0, r3
 8013302:	3710      	adds	r7, #16
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013308:	b590      	push	{r4, r7, lr}
 801330a:	b087      	sub	sp, #28
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	603b      	str	r3, [r7, #0]
 8013314:	4613      	mov	r3, r2
 8013316:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d105      	bne.n	801332a <tcp_create_segment+0x22>
 801331e:	4b43      	ldr	r3, [pc, #268]	@ (801342c <tcp_create_segment+0x124>)
 8013320:	22a3      	movs	r2, #163	@ 0xa3
 8013322:	4943      	ldr	r1, [pc, #268]	@ (8013430 <tcp_create_segment+0x128>)
 8013324:	4843      	ldr	r0, [pc, #268]	@ (8013434 <tcp_create_segment+0x12c>)
 8013326:	f004 ff67 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d105      	bne.n	801333c <tcp_create_segment+0x34>
 8013330:	4b3e      	ldr	r3, [pc, #248]	@ (801342c <tcp_create_segment+0x124>)
 8013332:	22a4      	movs	r2, #164	@ 0xa4
 8013334:	4940      	ldr	r1, [pc, #256]	@ (8013438 <tcp_create_segment+0x130>)
 8013336:	483f      	ldr	r0, [pc, #252]	@ (8013434 <tcp_create_segment+0x12c>)
 8013338:	f004 ff5e 	bl	80181f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801333c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	b2db      	uxtb	r3, r3
 8013344:	f003 0304 	and.w	r3, r3, #4
 8013348:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801334a:	2003      	movs	r0, #3
 801334c:	f7fa ff68 	bl	800e220 <memp_malloc>
 8013350:	6138      	str	r0, [r7, #16]
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d104      	bne.n	8013362 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013358:	68b8      	ldr	r0, [r7, #8]
 801335a:	f7fb fe7b 	bl	800f054 <pbuf_free>
    return NULL;
 801335e:	2300      	movs	r3, #0
 8013360:	e060      	b.n	8013424 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013368:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	2200      	movs	r2, #0
 801336e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	68ba      	ldr	r2, [r7, #8]
 8013374:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	891a      	ldrh	r2, [r3, #8]
 801337a:	7dfb      	ldrb	r3, [r7, #23]
 801337c:	b29b      	uxth	r3, r3
 801337e:	429a      	cmp	r2, r3
 8013380:	d205      	bcs.n	801338e <tcp_create_segment+0x86>
 8013382:	4b2a      	ldr	r3, [pc, #168]	@ (801342c <tcp_create_segment+0x124>)
 8013384:	22b0      	movs	r2, #176	@ 0xb0
 8013386:	492d      	ldr	r1, [pc, #180]	@ (801343c <tcp_create_segment+0x134>)
 8013388:	482a      	ldr	r0, [pc, #168]	@ (8013434 <tcp_create_segment+0x12c>)
 801338a:	f004 ff35 	bl	80181f8 <iprintf>
  seg->len = p->tot_len - optlen;
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	891a      	ldrh	r2, [r3, #8]
 8013392:	7dfb      	ldrb	r3, [r7, #23]
 8013394:	b29b      	uxth	r3, r3
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	b29a      	uxth	r2, r3
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801339e:	2114      	movs	r1, #20
 80133a0:	68b8      	ldr	r0, [r7, #8]
 80133a2:	f7fb fdc1 	bl	800ef28 <pbuf_add_header>
 80133a6:	4603      	mov	r3, r0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d004      	beq.n	80133b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80133ac:	6938      	ldr	r0, [r7, #16]
 80133ae:	f7fd f8d2 	bl	8010556 <tcp_seg_free>
    return NULL;
 80133b2:	2300      	movs	r3, #0
 80133b4:	e036      	b.n	8013424 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	8ada      	ldrh	r2, [r3, #22]
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	68dc      	ldr	r4, [r3, #12]
 80133c8:	4610      	mov	r0, r2
 80133ca:	f7fa fa51 	bl	800d870 <lwip_htons>
 80133ce:	4603      	mov	r3, r0
 80133d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	8b1a      	ldrh	r2, [r3, #24]
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	68dc      	ldr	r4, [r3, #12]
 80133da:	4610      	mov	r0, r2
 80133dc:	f7fa fa48 	bl	800d870 <lwip_htons>
 80133e0:	4603      	mov	r3, r0
 80133e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	68dc      	ldr	r4, [r3, #12]
 80133e8:	6838      	ldr	r0, [r7, #0]
 80133ea:	f7fa fa56 	bl	800d89a <lwip_htonl>
 80133ee:	4603      	mov	r3, r0
 80133f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80133f2:	7dfb      	ldrb	r3, [r7, #23]
 80133f4:	089b      	lsrs	r3, r3, #2
 80133f6:	b2db      	uxtb	r3, r3
 80133f8:	3305      	adds	r3, #5
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	031b      	lsls	r3, r3, #12
 80133fe:	b29a      	uxth	r2, r3
 8013400:	79fb      	ldrb	r3, [r7, #7]
 8013402:	b29b      	uxth	r3, r3
 8013404:	4313      	orrs	r3, r2
 8013406:	b29a      	uxth	r2, r3
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	68dc      	ldr	r4, [r3, #12]
 801340c:	4610      	mov	r0, r2
 801340e:	f7fa fa2f 	bl	800d870 <lwip_htons>
 8013412:	4603      	mov	r3, r0
 8013414:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	2200      	movs	r2, #0
 801341c:	749a      	strb	r2, [r3, #18]
 801341e:	2200      	movs	r2, #0
 8013420:	74da      	strb	r2, [r3, #19]
  return seg;
 8013422:	693b      	ldr	r3, [r7, #16]
}
 8013424:	4618      	mov	r0, r3
 8013426:	371c      	adds	r7, #28
 8013428:	46bd      	mov	sp, r7
 801342a:	bd90      	pop	{r4, r7, pc}
 801342c:	0801a8b4 	.word	0x0801a8b4
 8013430:	0801a8e8 	.word	0x0801a8e8
 8013434:	0801a908 	.word	0x0801a908
 8013438:	0801a930 	.word	0x0801a930
 801343c:	0801a954 	.word	0x0801a954

08013440 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013440:	b590      	push	{r4, r7, lr}
 8013442:	b08b      	sub	sp, #44	@ 0x2c
 8013444:	af02      	add	r7, sp, #8
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	460b      	mov	r3, r1
 801344a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801344c:	2300      	movs	r3, #0
 801344e:	61fb      	str	r3, [r7, #28]
 8013450:	2300      	movs	r3, #0
 8013452:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013454:	2300      	movs	r3, #0
 8013456:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d106      	bne.n	801346c <tcp_split_unsent_seg+0x2c>
 801345e:	4b95      	ldr	r3, [pc, #596]	@ (80136b4 <tcp_split_unsent_seg+0x274>)
 8013460:	f240 324b 	movw	r2, #843	@ 0x34b
 8013464:	4994      	ldr	r1, [pc, #592]	@ (80136b8 <tcp_split_unsent_seg+0x278>)
 8013466:	4895      	ldr	r0, [pc, #596]	@ (80136bc <tcp_split_unsent_seg+0x27c>)
 8013468:	f004 fec6 	bl	80181f8 <iprintf>

  useg = pcb->unsent;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013470:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d102      	bne.n	801347e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013478:	f04f 33ff 	mov.w	r3, #4294967295
 801347c:	e116      	b.n	80136ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801347e:	887b      	ldrh	r3, [r7, #2]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d109      	bne.n	8013498 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013484:	4b8b      	ldr	r3, [pc, #556]	@ (80136b4 <tcp_split_unsent_seg+0x274>)
 8013486:	f240 3253 	movw	r2, #851	@ 0x353
 801348a:	498d      	ldr	r1, [pc, #564]	@ (80136c0 <tcp_split_unsent_seg+0x280>)
 801348c:	488b      	ldr	r0, [pc, #556]	@ (80136bc <tcp_split_unsent_seg+0x27c>)
 801348e:	f004 feb3 	bl	80181f8 <iprintf>
    return ERR_VAL;
 8013492:	f06f 0305 	mvn.w	r3, #5
 8013496:	e109      	b.n	80136ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	891b      	ldrh	r3, [r3, #8]
 801349c:	887a      	ldrh	r2, [r7, #2]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d301      	bcc.n	80134a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80134a2:	2300      	movs	r3, #0
 80134a4:	e102      	b.n	80136ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80134aa:	887a      	ldrh	r2, [r7, #2]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d906      	bls.n	80134be <tcp_split_unsent_seg+0x7e>
 80134b0:	4b80      	ldr	r3, [pc, #512]	@ (80136b4 <tcp_split_unsent_seg+0x274>)
 80134b2:	f240 325b 	movw	r2, #859	@ 0x35b
 80134b6:	4983      	ldr	r1, [pc, #524]	@ (80136c4 <tcp_split_unsent_seg+0x284>)
 80134b8:	4880      	ldr	r0, [pc, #512]	@ (80136bc <tcp_split_unsent_seg+0x27c>)
 80134ba:	f004 fe9d 	bl	80181f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	891b      	ldrh	r3, [r3, #8]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d106      	bne.n	80134d4 <tcp_split_unsent_seg+0x94>
 80134c6:	4b7b      	ldr	r3, [pc, #492]	@ (80136b4 <tcp_split_unsent_seg+0x274>)
 80134c8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80134cc:	497e      	ldr	r1, [pc, #504]	@ (80136c8 <tcp_split_unsent_seg+0x288>)
 80134ce:	487b      	ldr	r0, [pc, #492]	@ (80136bc <tcp_split_unsent_seg+0x27c>)
 80134d0:	f004 fe92 	bl	80181f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	7a9b      	ldrb	r3, [r3, #10]
 80134d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80134da:	7bfb      	ldrb	r3, [r7, #15]
 80134dc:	009b      	lsls	r3, r3, #2
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	f003 0304 	and.w	r3, r3, #4
 80134e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	891a      	ldrh	r2, [r3, #8]
 80134ea:	887b      	ldrh	r3, [r7, #2]
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80134f0:	7bbb      	ldrb	r3, [r7, #14]
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	89bb      	ldrh	r3, [r7, #12]
 80134f6:	4413      	add	r3, r2
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80134fe:	4619      	mov	r1, r3
 8013500:	2036      	movs	r0, #54	@ 0x36
 8013502:	f7fb fac3 	bl	800ea8c <pbuf_alloc>
 8013506:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	2b00      	cmp	r3, #0
 801350c:	f000 80b7 	beq.w	801367e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	891a      	ldrh	r2, [r3, #8]
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	891b      	ldrh	r3, [r3, #8]
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	b29a      	uxth	r2, r3
 801351e:	887b      	ldrh	r3, [r7, #2]
 8013520:	4413      	add	r3, r2
 8013522:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	6858      	ldr	r0, [r3, #4]
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	685a      	ldr	r2, [r3, #4]
 801352c:	7bbb      	ldrb	r3, [r7, #14]
 801352e:	18d1      	adds	r1, r2, r3
 8013530:	897b      	ldrh	r3, [r7, #10]
 8013532:	89ba      	ldrh	r2, [r7, #12]
 8013534:	f7fb ff84 	bl	800f440 <pbuf_copy_partial>
 8013538:	4603      	mov	r3, r0
 801353a:	461a      	mov	r2, r3
 801353c:	89bb      	ldrh	r3, [r7, #12]
 801353e:	4293      	cmp	r3, r2
 8013540:	f040 809f 	bne.w	8013682 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	899b      	ldrh	r3, [r3, #12]
 801354a:	b29b      	uxth	r3, r3
 801354c:	4618      	mov	r0, r3
 801354e:	f7fa f98f 	bl	800d870 <lwip_htons>
 8013552:	4603      	mov	r3, r0
 8013554:	b2db      	uxtb	r3, r3
 8013556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801355a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801355c:	2300      	movs	r3, #0
 801355e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013560:	7efb      	ldrb	r3, [r7, #27]
 8013562:	f003 0308 	and.w	r3, r3, #8
 8013566:	2b00      	cmp	r3, #0
 8013568:	d007      	beq.n	801357a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801356a:	7efb      	ldrb	r3, [r7, #27]
 801356c:	f023 0308 	bic.w	r3, r3, #8
 8013570:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013572:	7ebb      	ldrb	r3, [r7, #26]
 8013574:	f043 0308 	orr.w	r3, r3, #8
 8013578:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801357a:	7efb      	ldrb	r3, [r7, #27]
 801357c:	f003 0301 	and.w	r3, r3, #1
 8013580:	2b00      	cmp	r3, #0
 8013582:	d007      	beq.n	8013594 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013584:	7efb      	ldrb	r3, [r7, #27]
 8013586:	f023 0301 	bic.w	r3, r3, #1
 801358a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801358c:	7ebb      	ldrb	r3, [r7, #26]
 801358e:	f043 0301 	orr.w	r3, r3, #1
 8013592:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	68db      	ldr	r3, [r3, #12]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	4618      	mov	r0, r3
 801359c:	f7fa f97d 	bl	800d89a <lwip_htonl>
 80135a0:	4602      	mov	r2, r0
 80135a2:	887b      	ldrh	r3, [r7, #2]
 80135a4:	18d1      	adds	r1, r2, r3
 80135a6:	7eba      	ldrb	r2, [r7, #26]
 80135a8:	7bfb      	ldrb	r3, [r7, #15]
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	460b      	mov	r3, r1
 80135ae:	6939      	ldr	r1, [r7, #16]
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff fea9 	bl	8013308 <tcp_create_segment>
 80135b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d063      	beq.n	8013686 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7fb fdd4 	bl	800f170 <pbuf_clen>
 80135c8:	4603      	mov	r3, r0
 80135ca:	461a      	mov	r2, r3
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80135d2:	1a9b      	subs	r3, r3, r2
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	6858      	ldr	r0, [r3, #4]
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	891a      	ldrh	r2, [r3, #8]
 80135e6:	89bb      	ldrh	r3, [r7, #12]
 80135e8:	1ad3      	subs	r3, r2, r3
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	4619      	mov	r1, r3
 80135ee:	f7fb fbab 	bl	800ed48 <pbuf_realloc>
  useg->len -= remainder;
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	891a      	ldrh	r2, [r3, #8]
 80135f6:	89bb      	ldrh	r3, [r7, #12]
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	68db      	ldr	r3, [r3, #12]
 8013604:	899b      	ldrh	r3, [r3, #12]
 8013606:	b29c      	uxth	r4, r3
 8013608:	7efb      	ldrb	r3, [r7, #27]
 801360a:	b29b      	uxth	r3, r3
 801360c:	4618      	mov	r0, r3
 801360e:	f7fa f92f 	bl	800d870 <lwip_htons>
 8013612:	4603      	mov	r3, r0
 8013614:	461a      	mov	r2, r3
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	4322      	orrs	r2, r4
 801361c:	b292      	uxth	r2, r2
 801361e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	4618      	mov	r0, r3
 8013626:	f7fb fda3 	bl	800f170 <pbuf_clen>
 801362a:	4603      	mov	r3, r0
 801362c:	461a      	mov	r2, r3
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013634:	4413      	add	r3, r2
 8013636:	b29a      	uxth	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801363e:	69fb      	ldr	r3, [r7, #28]
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	4618      	mov	r0, r3
 8013644:	f7fb fd94 	bl	800f170 <pbuf_clen>
 8013648:	4603      	mov	r3, r0
 801364a:	461a      	mov	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013652:	4413      	add	r3, r2
 8013654:	b29a      	uxth	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	69fa      	ldr	r2, [r7, #28]
 8013668:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d103      	bne.n	801367a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2200      	movs	r2, #0
 8013676:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801367a:	2300      	movs	r3, #0
 801367c:	e016      	b.n	80136ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801367e:	bf00      	nop
 8013680:	e002      	b.n	8013688 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013682:	bf00      	nop
 8013684:	e000      	b.n	8013688 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013686:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d006      	beq.n	801369c <tcp_split_unsent_seg+0x25c>
 801368e:	4b09      	ldr	r3, [pc, #36]	@ (80136b4 <tcp_split_unsent_seg+0x274>)
 8013690:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013694:	490d      	ldr	r1, [pc, #52]	@ (80136cc <tcp_split_unsent_seg+0x28c>)
 8013696:	4809      	ldr	r0, [pc, #36]	@ (80136bc <tcp_split_unsent_seg+0x27c>)
 8013698:	f004 fdae 	bl	80181f8 <iprintf>
  if (p != NULL) {
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d002      	beq.n	80136a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80136a2:	6938      	ldr	r0, [r7, #16]
 80136a4:	f7fb fcd6 	bl	800f054 <pbuf_free>
  }

  return ERR_MEM;
 80136a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3724      	adds	r7, #36	@ 0x24
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd90      	pop	{r4, r7, pc}
 80136b4:	0801a8b4 	.word	0x0801a8b4
 80136b8:	0801ac48 	.word	0x0801ac48
 80136bc:	0801a908 	.word	0x0801a908
 80136c0:	0801ac6c 	.word	0x0801ac6c
 80136c4:	0801ac90 	.word	0x0801ac90
 80136c8:	0801aca0 	.word	0x0801aca0
 80136cc:	0801acb0 	.word	0x0801acb0

080136d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80136d0:	b590      	push	{r4, r7, lr}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d106      	bne.n	80136ec <tcp_send_fin+0x1c>
 80136de:	4b21      	ldr	r3, [pc, #132]	@ (8013764 <tcp_send_fin+0x94>)
 80136e0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80136e4:	4920      	ldr	r1, [pc, #128]	@ (8013768 <tcp_send_fin+0x98>)
 80136e6:	4821      	ldr	r0, [pc, #132]	@ (801376c <tcp_send_fin+0x9c>)
 80136e8:	f004 fd86 	bl	80181f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d02e      	beq.n	8013752 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136f8:	60fb      	str	r3, [r7, #12]
 80136fa:	e002      	b.n	8013702 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d1f8      	bne.n	80136fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	68db      	ldr	r3, [r3, #12]
 801370e:	899b      	ldrh	r3, [r3, #12]
 8013710:	b29b      	uxth	r3, r3
 8013712:	4618      	mov	r0, r3
 8013714:	f7fa f8ac 	bl	800d870 <lwip_htons>
 8013718:	4603      	mov	r3, r0
 801371a:	b2db      	uxtb	r3, r3
 801371c:	f003 0307 	and.w	r3, r3, #7
 8013720:	2b00      	cmp	r3, #0
 8013722:	d116      	bne.n	8013752 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	68db      	ldr	r3, [r3, #12]
 8013728:	899b      	ldrh	r3, [r3, #12]
 801372a:	b29c      	uxth	r4, r3
 801372c:	2001      	movs	r0, #1
 801372e:	f7fa f89f 	bl	800d870 <lwip_htons>
 8013732:	4603      	mov	r3, r0
 8013734:	461a      	mov	r2, r3
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	4322      	orrs	r2, r4
 801373c:	b292      	uxth	r2, r2
 801373e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	8b5b      	ldrh	r3, [r3, #26]
 8013744:	f043 0320 	orr.w	r3, r3, #32
 8013748:	b29a      	uxth	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801374e:	2300      	movs	r3, #0
 8013750:	e004      	b.n	801375c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013752:	2101      	movs	r1, #1
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 f80b 	bl	8013770 <tcp_enqueue_flags>
 801375a:	4603      	mov	r3, r0
}
 801375c:	4618      	mov	r0, r3
 801375e:	3714      	adds	r7, #20
 8013760:	46bd      	mov	sp, r7
 8013762:	bd90      	pop	{r4, r7, pc}
 8013764:	0801a8b4 	.word	0x0801a8b4
 8013768:	0801acbc 	.word	0x0801acbc
 801376c:	0801a908 	.word	0x0801a908

08013770 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b08a      	sub	sp, #40	@ 0x28
 8013774:	af02      	add	r7, sp, #8
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	460b      	mov	r3, r1
 801377a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801377c:	2300      	movs	r3, #0
 801377e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013780:	2300      	movs	r3, #0
 8013782:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013784:	78fb      	ldrb	r3, [r7, #3]
 8013786:	f003 0303 	and.w	r3, r3, #3
 801378a:	2b00      	cmp	r3, #0
 801378c:	d106      	bne.n	801379c <tcp_enqueue_flags+0x2c>
 801378e:	4b67      	ldr	r3, [pc, #412]	@ (801392c <tcp_enqueue_flags+0x1bc>)
 8013790:	f240 4211 	movw	r2, #1041	@ 0x411
 8013794:	4966      	ldr	r1, [pc, #408]	@ (8013930 <tcp_enqueue_flags+0x1c0>)
 8013796:	4867      	ldr	r0, [pc, #412]	@ (8013934 <tcp_enqueue_flags+0x1c4>)
 8013798:	f004 fd2e 	bl	80181f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d106      	bne.n	80137b0 <tcp_enqueue_flags+0x40>
 80137a2:	4b62      	ldr	r3, [pc, #392]	@ (801392c <tcp_enqueue_flags+0x1bc>)
 80137a4:	f240 4213 	movw	r2, #1043	@ 0x413
 80137a8:	4963      	ldr	r1, [pc, #396]	@ (8013938 <tcp_enqueue_flags+0x1c8>)
 80137aa:	4862      	ldr	r0, [pc, #392]	@ (8013934 <tcp_enqueue_flags+0x1c4>)
 80137ac:	f004 fd24 	bl	80181f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80137b0:	78fb      	ldrb	r3, [r7, #3]
 80137b2:	f003 0302 	and.w	r3, r3, #2
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d001      	beq.n	80137be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80137ba:	2301      	movs	r3, #1
 80137bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80137be:	7ffb      	ldrb	r3, [r7, #31]
 80137c0:	009b      	lsls	r3, r3, #2
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	f003 0304 	and.w	r3, r3, #4
 80137c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80137ca:	7dfb      	ldrb	r3, [r7, #23]
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80137d2:	4619      	mov	r1, r3
 80137d4:	2036      	movs	r0, #54	@ 0x36
 80137d6:	f7fb f959 	bl	800ea8c <pbuf_alloc>
 80137da:	6138      	str	r0, [r7, #16]
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d109      	bne.n	80137f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	8b5b      	ldrh	r3, [r3, #26]
 80137e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80137f0:	f04f 33ff 	mov.w	r3, #4294967295
 80137f4:	e095      	b.n	8013922 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	895a      	ldrh	r2, [r3, #10]
 80137fa:	7dfb      	ldrb	r3, [r7, #23]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	429a      	cmp	r2, r3
 8013800:	d206      	bcs.n	8013810 <tcp_enqueue_flags+0xa0>
 8013802:	4b4a      	ldr	r3, [pc, #296]	@ (801392c <tcp_enqueue_flags+0x1bc>)
 8013804:	f240 4239 	movw	r2, #1081	@ 0x439
 8013808:	494c      	ldr	r1, [pc, #304]	@ (801393c <tcp_enqueue_flags+0x1cc>)
 801380a:	484a      	ldr	r0, [pc, #296]	@ (8013934 <tcp_enqueue_flags+0x1c4>)
 801380c:	f004 fcf4 	bl	80181f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013814:	78fa      	ldrb	r2, [r7, #3]
 8013816:	7ffb      	ldrb	r3, [r7, #31]
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	460b      	mov	r3, r1
 801381c:	6939      	ldr	r1, [r7, #16]
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7ff fd72 	bl	8013308 <tcp_create_segment>
 8013824:	60f8      	str	r0, [r7, #12]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d109      	bne.n	8013840 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	8b5b      	ldrh	r3, [r3, #26]
 8013830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013834:	b29a      	uxth	r2, r3
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801383a:	f04f 33ff 	mov.w	r3, #4294967295
 801383e:	e070      	b.n	8013922 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	f003 0303 	and.w	r3, r3, #3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d006      	beq.n	801385a <tcp_enqueue_flags+0xea>
 801384c:	4b37      	ldr	r3, [pc, #220]	@ (801392c <tcp_enqueue_flags+0x1bc>)
 801384e:	f240 4242 	movw	r2, #1090	@ 0x442
 8013852:	493b      	ldr	r1, [pc, #236]	@ (8013940 <tcp_enqueue_flags+0x1d0>)
 8013854:	4837      	ldr	r0, [pc, #220]	@ (8013934 <tcp_enqueue_flags+0x1c4>)
 8013856:	f004 fccf 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	891b      	ldrh	r3, [r3, #8]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d006      	beq.n	8013870 <tcp_enqueue_flags+0x100>
 8013862:	4b32      	ldr	r3, [pc, #200]	@ (801392c <tcp_enqueue_flags+0x1bc>)
 8013864:	f240 4243 	movw	r2, #1091	@ 0x443
 8013868:	4936      	ldr	r1, [pc, #216]	@ (8013944 <tcp_enqueue_flags+0x1d4>)
 801386a:	4832      	ldr	r0, [pc, #200]	@ (8013934 <tcp_enqueue_flags+0x1c4>)
 801386c:	f004 fcc4 	bl	80181f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013874:	2b00      	cmp	r3, #0
 8013876:	d103      	bne.n	8013880 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	68fa      	ldr	r2, [r7, #12]
 801387c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801387e:	e00d      	b.n	801389c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013884:	61bb      	str	r3, [r7, #24]
 8013886:	e002      	b.n	801388e <tcp_enqueue_flags+0x11e>
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	61bb      	str	r3, [r7, #24]
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d1f8      	bne.n	8013888 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2200      	movs	r2, #0
 80138a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80138a4:	78fb      	ldrb	r3, [r7, #3]
 80138a6:	f003 0302 	and.w	r3, r3, #2
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d104      	bne.n	80138b8 <tcp_enqueue_flags+0x148>
 80138ae:	78fb      	ldrb	r3, [r7, #3]
 80138b0:	f003 0301 	and.w	r3, r3, #1
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d004      	beq.n	80138c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80138bc:	1c5a      	adds	r2, r3, #1
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80138c2:	78fb      	ldrb	r3, [r7, #3]
 80138c4:	f003 0301 	and.w	r3, r3, #1
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d006      	beq.n	80138da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	8b5b      	ldrh	r3, [r3, #26]
 80138d0:	f043 0320 	orr.w	r3, r3, #32
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fb fc46 	bl	800f170 <pbuf_clen>
 80138e4:	4603      	mov	r3, r0
 80138e6:	461a      	mov	r2, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80138ee:	4413      	add	r3, r2
 80138f0:	b29a      	uxth	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d00e      	beq.n	8013920 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013906:	2b00      	cmp	r3, #0
 8013908:	d10a      	bne.n	8013920 <tcp_enqueue_flags+0x1b0>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801390e:	2b00      	cmp	r3, #0
 8013910:	d106      	bne.n	8013920 <tcp_enqueue_flags+0x1b0>
 8013912:	4b06      	ldr	r3, [pc, #24]	@ (801392c <tcp_enqueue_flags+0x1bc>)
 8013914:	f240 4265 	movw	r2, #1125	@ 0x465
 8013918:	490b      	ldr	r1, [pc, #44]	@ (8013948 <tcp_enqueue_flags+0x1d8>)
 801391a:	4806      	ldr	r0, [pc, #24]	@ (8013934 <tcp_enqueue_flags+0x1c4>)
 801391c:	f004 fc6c 	bl	80181f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013920:	2300      	movs	r3, #0
}
 8013922:	4618      	mov	r0, r3
 8013924:	3720      	adds	r7, #32
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	0801a8b4 	.word	0x0801a8b4
 8013930:	0801acd8 	.word	0x0801acd8
 8013934:	0801a908 	.word	0x0801a908
 8013938:	0801ad30 	.word	0x0801ad30
 801393c:	0801ad50 	.word	0x0801ad50
 8013940:	0801ad8c 	.word	0x0801ad8c
 8013944:	0801ada4 	.word	0x0801ada4
 8013948:	0801add0 	.word	0x0801add0

0801394c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801394c:	b5b0      	push	{r4, r5, r7, lr}
 801394e:	b08a      	sub	sp, #40	@ 0x28
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d106      	bne.n	8013968 <tcp_output+0x1c>
 801395a:	4b8a      	ldr	r3, [pc, #552]	@ (8013b84 <tcp_output+0x238>)
 801395c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013960:	4989      	ldr	r1, [pc, #548]	@ (8013b88 <tcp_output+0x23c>)
 8013962:	488a      	ldr	r0, [pc, #552]	@ (8013b8c <tcp_output+0x240>)
 8013964:	f004 fc48 	bl	80181f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	7d1b      	ldrb	r3, [r3, #20]
 801396c:	2b01      	cmp	r3, #1
 801396e:	d106      	bne.n	801397e <tcp_output+0x32>
 8013970:	4b84      	ldr	r3, [pc, #528]	@ (8013b84 <tcp_output+0x238>)
 8013972:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013976:	4986      	ldr	r1, [pc, #536]	@ (8013b90 <tcp_output+0x244>)
 8013978:	4884      	ldr	r0, [pc, #528]	@ (8013b8c <tcp_output+0x240>)
 801397a:	f004 fc3d 	bl	80181f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801397e:	4b85      	ldr	r3, [pc, #532]	@ (8013b94 <tcp_output+0x248>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	687a      	ldr	r2, [r7, #4]
 8013984:	429a      	cmp	r2, r3
 8013986:	d101      	bne.n	801398c <tcp_output+0x40>
    return ERR_OK;
 8013988:	2300      	movs	r3, #0
 801398a:	e1ce      	b.n	8013d2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013998:	4293      	cmp	r3, r2
 801399a:	bf28      	it	cs
 801399c:	4613      	movcs	r3, r2
 801399e:	b29b      	uxth	r3, r3
 80139a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80139a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80139a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10b      	bne.n	80139c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8b5b      	ldrh	r3, [r3, #26]
 80139b2:	f003 0302 	and.w	r3, r3, #2
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f000 81aa 	beq.w	8013d10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 fdcb 	bl	8014558 <tcp_send_empty_ack>
 80139c2:	4603      	mov	r3, r0
 80139c4:	e1b1      	b.n	8013d2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	3304      	adds	r3, #4
 80139cc:	461a      	mov	r2, r3
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f7ff fc7e 	bl	80132d0 <tcp_route>
 80139d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d102      	bne.n	80139e2 <tcp_output+0x96>
    return ERR_RTE;
 80139dc:	f06f 0303 	mvn.w	r3, #3
 80139e0:	e1a3      	b.n	8013d2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d003      	beq.n	80139f0 <tcp_output+0xa4>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d111      	bne.n	8013a14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d002      	beq.n	80139fc <tcp_output+0xb0>
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	3304      	adds	r3, #4
 80139fa:	e000      	b.n	80139fe <tcp_output+0xb2>
 80139fc:	2300      	movs	r3, #0
 80139fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d102      	bne.n	8013a0c <tcp_output+0xc0>
      return ERR_RTE;
 8013a06:	f06f 0303 	mvn.w	r3, #3
 8013a0a:	e18e      	b.n	8013d2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f9 ff3d 	bl	800d89a <lwip_htonl>
 8013a20:	4602      	mov	r2, r0
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a2a:	8912      	ldrh	r2, [r2, #8]
 8013a2c:	4413      	add	r3, r2
 8013a2e:	69ba      	ldr	r2, [r7, #24]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d227      	bcs.n	8013a84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	4293      	cmp	r3, r2
 8013a40:	d114      	bne.n	8013a6c <tcp_output+0x120>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d110      	bne.n	8013a6c <tcp_output+0x120>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10b      	bne.n	8013a6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2200      	movs	r2, #0
 8013a58:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2201      	movs	r2, #1
 8013a60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2200      	movs	r2, #0
 8013a68:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	8b5b      	ldrh	r3, [r3, #26]
 8013a70:	f003 0302 	and.w	r3, r3, #2
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f000 814d 	beq.w	8013d14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f000 fd6c 	bl	8014558 <tcp_send_empty_ack>
 8013a80:	4603      	mov	r3, r0
 8013a82:	e152      	b.n	8013d2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2200      	movs	r2, #0
 8013a88:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013a92:	6a3b      	ldr	r3, [r7, #32]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	f000 811c 	beq.w	8013cd2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013a9a:	e002      	b.n	8013aa2 <tcp_output+0x156>
 8013a9c:	6a3b      	ldr	r3, [r7, #32]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	623b      	str	r3, [r7, #32]
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d1f8      	bne.n	8013a9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013aaa:	e112      	b.n	8013cd2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	899b      	ldrh	r3, [r3, #12]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7f9 fedb 	bl	800d870 <lwip_htons>
 8013aba:	4603      	mov	r3, r0
 8013abc:	b2db      	uxtb	r3, r3
 8013abe:	f003 0304 	and.w	r3, r3, #4
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d006      	beq.n	8013ad4 <tcp_output+0x188>
 8013ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8013b84 <tcp_output+0x238>)
 8013ac8:	f240 5236 	movw	r2, #1334	@ 0x536
 8013acc:	4932      	ldr	r1, [pc, #200]	@ (8013b98 <tcp_output+0x24c>)
 8013ace:	482f      	ldr	r0, [pc, #188]	@ (8013b8c <tcp_output+0x240>)
 8013ad0:	f004 fb92 	bl	80181f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d01f      	beq.n	8013b1c <tcp_output+0x1d0>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	8b5b      	ldrh	r3, [r3, #26]
 8013ae0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d119      	bne.n	8013b1c <tcp_output+0x1d0>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00b      	beq.n	8013b08 <tcp_output+0x1bc>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d110      	bne.n	8013b1c <tcp_output+0x1d0>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013afe:	891a      	ldrh	r2, [r3, #8]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d209      	bcs.n	8013b1c <tcp_output+0x1d0>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d004      	beq.n	8013b1c <tcp_output+0x1d0>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b18:	2b08      	cmp	r3, #8
 8013b1a:	d901      	bls.n	8013b20 <tcp_output+0x1d4>
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	e000      	b.n	8013b22 <tcp_output+0x1d6>
 8013b20:	2300      	movs	r3, #0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d106      	bne.n	8013b34 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	8b5b      	ldrh	r3, [r3, #26]
 8013b2a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 80e4 	beq.w	8013cfc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	7d1b      	ldrb	r3, [r3, #20]
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d00d      	beq.n	8013b58 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	899b      	ldrh	r3, [r3, #12]
 8013b42:	b29c      	uxth	r4, r3
 8013b44:	2010      	movs	r0, #16
 8013b46:	f7f9 fe93 	bl	800d870 <lwip_htons>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b50:	68db      	ldr	r3, [r3, #12]
 8013b52:	4322      	orrs	r2, r4
 8013b54:	b292      	uxth	r2, r2
 8013b56:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013b58:	697a      	ldr	r2, [r7, #20]
 8013b5a:	6879      	ldr	r1, [r7, #4]
 8013b5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b5e:	f000 f909 	bl	8013d74 <tcp_output_segment>
 8013b62:	4603      	mov	r3, r0
 8013b64:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d016      	beq.n	8013b9c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	8b5b      	ldrh	r3, [r3, #26]
 8013b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b76:	b29a      	uxth	r2, r3
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	835a      	strh	r2, [r3, #26]
      return err;
 8013b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b80:	e0d3      	b.n	8013d2a <tcp_output+0x3de>
 8013b82:	bf00      	nop
 8013b84:	0801a8b4 	.word	0x0801a8b4
 8013b88:	0801adf8 	.word	0x0801adf8
 8013b8c:	0801a908 	.word	0x0801a908
 8013b90:	0801ae10 	.word	0x0801ae10
 8013b94:	2000d5bc 	.word	0x2000d5bc
 8013b98:	0801ae38 	.word	0x0801ae38
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d006      	beq.n	8013bba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	8b5b      	ldrh	r3, [r3, #26]
 8013bb0:	f023 0303 	bic.w	r3, r3, #3
 8013bb4:	b29a      	uxth	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7f9 fe6a 	bl	800d89a <lwip_htonl>
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bca:	891b      	ldrh	r3, [r3, #8]
 8013bcc:	461d      	mov	r5, r3
 8013bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd0:	68db      	ldr	r3, [r3, #12]
 8013bd2:	899b      	ldrh	r3, [r3, #12]
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7f9 fe4a 	bl	800d870 <lwip_htons>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	f003 0303 	and.w	r3, r3, #3
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d001      	beq.n	8013bec <tcp_output+0x2a0>
 8013be8:	2301      	movs	r3, #1
 8013bea:	e000      	b.n	8013bee <tcp_output+0x2a2>
 8013bec:	2300      	movs	r3, #0
 8013bee:	442b      	add	r3, r5
 8013bf0:	4423      	add	r3, r4
 8013bf2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	da02      	bge.n	8013c06 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	68ba      	ldr	r2, [r7, #8]
 8013c04:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c08:	891b      	ldrh	r3, [r3, #8]
 8013c0a:	461c      	mov	r4, r3
 8013c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	899b      	ldrh	r3, [r3, #12]
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7f9 fe2b 	bl	800d870 <lwip_htons>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	f003 0303 	and.w	r3, r3, #3
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d001      	beq.n	8013c2a <tcp_output+0x2de>
 8013c26:	2301      	movs	r3, #1
 8013c28:	e000      	b.n	8013c2c <tcp_output+0x2e0>
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	4423      	add	r3, r4
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d049      	beq.n	8013cc6 <tcp_output+0x37a>
      seg->next = NULL;
 8013c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c34:	2200      	movs	r2, #0
 8013c36:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d105      	bne.n	8013c4c <tcp_output+0x300>
        pcb->unacked = seg;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c44:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c48:	623b      	str	r3, [r7, #32]
 8013c4a:	e03f      	b.n	8013ccc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7f9 fe21 	bl	800d89a <lwip_htonl>
 8013c58:	4604      	mov	r4, r0
 8013c5a:	6a3b      	ldr	r3, [r7, #32]
 8013c5c:	68db      	ldr	r3, [r3, #12]
 8013c5e:	685b      	ldr	r3, [r3, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7f9 fe1a 	bl	800d89a <lwip_htonl>
 8013c66:	4603      	mov	r3, r0
 8013c68:	1ae3      	subs	r3, r4, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	da24      	bge.n	8013cb8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	3370      	adds	r3, #112	@ 0x70
 8013c72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013c74:	e002      	b.n	8013c7c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013c76:	69fb      	ldr	r3, [r7, #28]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d011      	beq.n	8013ca8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7f9 fe04 	bl	800d89a <lwip_htonl>
 8013c92:	4604      	mov	r4, r0
 8013c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7f9 fdfd 	bl	800d89a <lwip_htonl>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	dbe6      	blt.n	8013c76 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013ca8:	69fb      	ldr	r3, [r7, #28]
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cb4:	601a      	str	r2, [r3, #0]
 8013cb6:	e009      	b.n	8013ccc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013cb8:	6a3b      	ldr	r3, [r7, #32]
 8013cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cbc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013cbe:	6a3b      	ldr	r3, [r7, #32]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	623b      	str	r3, [r7, #32]
 8013cc4:	e002      	b.n	8013ccc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013cc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cc8:	f7fc fc45 	bl	8010556 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d012      	beq.n	8013cfe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7f9 fddb 	bl	800d89a <lwip_htonl>
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cea:	1ad3      	subs	r3, r2, r3
 8013cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cee:	8912      	ldrh	r2, [r2, #8]
 8013cf0:	4413      	add	r3, r2
  while (seg != NULL &&
 8013cf2:	69ba      	ldr	r2, [r7, #24]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	f4bf aed9 	bcs.w	8013aac <tcp_output+0x160>
 8013cfa:	e000      	b.n	8013cfe <tcp_output+0x3b2>
      break;
 8013cfc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d108      	bne.n	8013d18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013d0e:	e004      	b.n	8013d1a <tcp_output+0x3ce>
    goto output_done;
 8013d10:	bf00      	nop
 8013d12:	e002      	b.n	8013d1a <tcp_output+0x3ce>
    goto output_done;
 8013d14:	bf00      	nop
 8013d16:	e000      	b.n	8013d1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013d18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	8b5b      	ldrh	r3, [r3, #26]
 8013d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3728      	adds	r7, #40	@ 0x28
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bdb0      	pop	{r4, r5, r7, pc}
 8013d32:	bf00      	nop

08013d34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <tcp_output_segment_busy+0x1c>
 8013d42:	4b09      	ldr	r3, [pc, #36]	@ (8013d68 <tcp_output_segment_busy+0x34>)
 8013d44:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013d48:	4908      	ldr	r1, [pc, #32]	@ (8013d6c <tcp_output_segment_busy+0x38>)
 8013d4a:	4809      	ldr	r0, [pc, #36]	@ (8013d70 <tcp_output_segment_busy+0x3c>)
 8013d4c:	f004 fa54 	bl	80181f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	7b9b      	ldrb	r3, [r3, #14]
 8013d56:	2b01      	cmp	r3, #1
 8013d58:	d001      	beq.n	8013d5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e000      	b.n	8013d60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013d5e:	2300      	movs	r3, #0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3708      	adds	r7, #8
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	0801a8b4 	.word	0x0801a8b4
 8013d6c:	0801ae50 	.word	0x0801ae50
 8013d70:	0801a908 	.word	0x0801a908

08013d74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013d74:	b5b0      	push	{r4, r5, r7, lr}
 8013d76:	b08c      	sub	sp, #48	@ 0x30
 8013d78:	af04      	add	r7, sp, #16
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d106      	bne.n	8013d94 <tcp_output_segment+0x20>
 8013d86:	4b64      	ldr	r3, [pc, #400]	@ (8013f18 <tcp_output_segment+0x1a4>)
 8013d88:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013d8c:	4963      	ldr	r1, [pc, #396]	@ (8013f1c <tcp_output_segment+0x1a8>)
 8013d8e:	4864      	ldr	r0, [pc, #400]	@ (8013f20 <tcp_output_segment+0x1ac>)
 8013d90:	f004 fa32 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d106      	bne.n	8013da8 <tcp_output_segment+0x34>
 8013d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8013f18 <tcp_output_segment+0x1a4>)
 8013d9c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013da0:	4960      	ldr	r1, [pc, #384]	@ (8013f24 <tcp_output_segment+0x1b0>)
 8013da2:	485f      	ldr	r0, [pc, #380]	@ (8013f20 <tcp_output_segment+0x1ac>)
 8013da4:	f004 fa28 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <tcp_output_segment+0x48>
 8013dae:	4b5a      	ldr	r3, [pc, #360]	@ (8013f18 <tcp_output_segment+0x1a4>)
 8013db0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013db4:	495c      	ldr	r1, [pc, #368]	@ (8013f28 <tcp_output_segment+0x1b4>)
 8013db6:	485a      	ldr	r0, [pc, #360]	@ (8013f20 <tcp_output_segment+0x1ac>)
 8013db8:	f004 fa1e 	bl	80181f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f7ff ffb9 	bl	8013d34 <tcp_output_segment_busy>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d001      	beq.n	8013dcc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	e0a1      	b.n	8013f10 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	68dc      	ldr	r4, [r3, #12]
 8013dd4:	4610      	mov	r0, r2
 8013dd6:	f7f9 fd60 	bl	800d89a <lwip_htonl>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	68dc      	ldr	r4, [r3, #12]
 8013de6:	4610      	mov	r0, r2
 8013de8:	f7f9 fd42 	bl	800d870 <lwip_htons>
 8013dec:	4603      	mov	r3, r0
 8013dee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013df4:	68ba      	ldr	r2, [r7, #8]
 8013df6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013df8:	441a      	add	r2, r3
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	3314      	adds	r3, #20
 8013e04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	7a9b      	ldrb	r3, [r3, #10]
 8013e0a:	f003 0301 	and.w	r3, r3, #1
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d015      	beq.n	8013e3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	3304      	adds	r3, #4
 8013e16:	461a      	mov	r2, r3
 8013e18:	6879      	ldr	r1, [r7, #4]
 8013e1a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8013e1e:	f7fc fe91 	bl	8010b44 <tcp_eff_send_mss_netif>
 8013e22:	4603      	mov	r3, r0
 8013e24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013e26:	8b7b      	ldrh	r3, [r7, #26]
 8013e28:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7f9 fd34 	bl	800d89a <lwip_htonl>
 8013e32:	4602      	mov	r2, r0
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	3304      	adds	r3, #4
 8013e3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	da02      	bge.n	8013e4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d10c      	bne.n	8013e70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013e56:	4b35      	ldr	r3, [pc, #212]	@ (8013f2c <tcp_output_segment+0x1b8>)
 8013e58:	681a      	ldr	r2, [r3, #0]
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	68db      	ldr	r3, [r3, #12]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7f9 fd18 	bl	800d89a <lwip_htonl>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	68da      	ldr	r2, [r3, #12]
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	8959      	ldrh	r1, [r3, #10]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	8b3a      	ldrh	r2, [r7, #24]
 8013e8a:	1a8a      	subs	r2, r1, r2
 8013e8c:	b292      	uxth	r2, r2
 8013e8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	685b      	ldr	r3, [r3, #4]
 8013e94:	8919      	ldrh	r1, [r3, #8]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	8b3a      	ldrh	r2, [r7, #24]
 8013e9c:	1a8a      	subs	r2, r1, r2
 8013e9e:	b292      	uxth	r2, r2
 8013ea0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	685b      	ldr	r3, [r3, #4]
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	68d2      	ldr	r2, [r2, #12]
 8013eaa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	741a      	strb	r2, [r3, #16]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	68da      	ldr	r2, [r3, #12]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	7a9b      	ldrb	r3, [r3, #10]
 8013ec0:	f003 0301 	and.w	r3, r3, #1
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <tcp_output_segment+0x158>
 8013ec8:	2318      	movs	r3, #24
 8013eca:	e000      	b.n	8013ece <tcp_output_segment+0x15a>
 8013ecc:	2314      	movs	r3, #20
 8013ece:	4413      	add	r3, r2
 8013ed0:	69fa      	ldr	r2, [r7, #28]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d006      	beq.n	8013ee4 <tcp_output_segment+0x170>
 8013ed6:	4b10      	ldr	r3, [pc, #64]	@ (8013f18 <tcp_output_segment+0x1a4>)
 8013ed8:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013edc:	4914      	ldr	r1, [pc, #80]	@ (8013f30 <tcp_output_segment+0x1bc>)
 8013ede:	4810      	ldr	r0, [pc, #64]	@ (8013f20 <tcp_output_segment+0x1ac>)
 8013ee0:	f004 f98a 	bl	80181f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6858      	ldr	r0, [r3, #4]
 8013ee8:	68b9      	ldr	r1, [r7, #8]
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	1d1c      	adds	r4, r3, #4
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	7add      	ldrb	r5, [r3, #11]
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	7a9b      	ldrb	r3, [r3, #10]
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	9202      	str	r2, [sp, #8]
 8013efa:	2206      	movs	r2, #6
 8013efc:	9201      	str	r2, [sp, #4]
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	462b      	mov	r3, r5
 8013f02:	4622      	mov	r2, r4
 8013f04:	f002 fa64 	bl	80163d0 <ip4_output_if>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3720      	adds	r7, #32
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bdb0      	pop	{r4, r5, r7, pc}
 8013f18:	0801a8b4 	.word	0x0801a8b4
 8013f1c:	0801ae78 	.word	0x0801ae78
 8013f20:	0801a908 	.word	0x0801a908
 8013f24:	0801ae98 	.word	0x0801ae98
 8013f28:	0801aeb8 	.word	0x0801aeb8
 8013f2c:	2000d570 	.word	0x2000d570
 8013f30:	0801aedc 	.word	0x0801aedc

08013f34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013f34:	b5b0      	push	{r4, r5, r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d106      	bne.n	8013f50 <tcp_rexmit_rto_prepare+0x1c>
 8013f42:	4b31      	ldr	r3, [pc, #196]	@ (8014008 <tcp_rexmit_rto_prepare+0xd4>)
 8013f44:	f240 6263 	movw	r2, #1635	@ 0x663
 8013f48:	4930      	ldr	r1, [pc, #192]	@ (801400c <tcp_rexmit_rto_prepare+0xd8>)
 8013f4a:	4831      	ldr	r0, [pc, #196]	@ (8014010 <tcp_rexmit_rto_prepare+0xdc>)
 8013f4c:	f004 f954 	bl	80181f8 <iprintf>

  if (pcb->unacked == NULL) {
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d102      	bne.n	8013f5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013f58:	f06f 0305 	mvn.w	r3, #5
 8013f5c:	e050      	b.n	8014000 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f62:	60fb      	str	r3, [r7, #12]
 8013f64:	e00b      	b.n	8013f7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	f7ff fee4 	bl	8013d34 <tcp_output_segment_busy>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d002      	beq.n	8013f78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013f72:	f06f 0305 	mvn.w	r3, #5
 8013f76:	e043      	b.n	8014000 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	60fb      	str	r3, [r7, #12]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d1ef      	bne.n	8013f66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f7ff fed4 	bl	8013d34 <tcp_output_segment_busy>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013f92:	f06f 0305 	mvn.w	r3, #5
 8013f96:	e033      	b.n	8014000 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2200      	movs	r2, #0
 8013fac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	8b5b      	ldrh	r3, [r3, #26]
 8013fb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013fb6:	b29a      	uxth	r2, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7f9 fc69 	bl	800d89a <lwip_htonl>
 8013fc8:	4604      	mov	r4, r0
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	891b      	ldrh	r3, [r3, #8]
 8013fce:	461d      	mov	r5, r3
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	899b      	ldrh	r3, [r3, #12]
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f9 fc49 	bl	800d870 <lwip_htons>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	f003 0303 	and.w	r3, r3, #3
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <tcp_rexmit_rto_prepare+0xba>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e000      	b.n	8013ff0 <tcp_rexmit_rto_prepare+0xbc>
 8013fee:	2300      	movs	r3, #0
 8013ff0:	442b      	add	r3, r5
 8013ff2:	18e2      	adds	r2, r4, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8013ffe:	2300      	movs	r3, #0
}
 8014000:	4618      	mov	r0, r3
 8014002:	3710      	adds	r7, #16
 8014004:	46bd      	mov	sp, r7
 8014006:	bdb0      	pop	{r4, r5, r7, pc}
 8014008:	0801a8b4 	.word	0x0801a8b4
 801400c:	0801aef0 	.word	0x0801aef0
 8014010:	0801a908 	.word	0x0801a908

08014014 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d106      	bne.n	8014030 <tcp_rexmit_rto_commit+0x1c>
 8014022:	4b0d      	ldr	r3, [pc, #52]	@ (8014058 <tcp_rexmit_rto_commit+0x44>)
 8014024:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014028:	490c      	ldr	r1, [pc, #48]	@ (801405c <tcp_rexmit_rto_commit+0x48>)
 801402a:	480d      	ldr	r0, [pc, #52]	@ (8014060 <tcp_rexmit_rto_commit+0x4c>)
 801402c:	f004 f8e4 	bl	80181f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014036:	2bff      	cmp	r3, #255	@ 0xff
 8014038:	d007      	beq.n	801404a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014040:	3301      	adds	r3, #1
 8014042:	b2da      	uxtb	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f7ff fc7e 	bl	801394c <tcp_output>
}
 8014050:	bf00      	nop
 8014052:	3708      	adds	r7, #8
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	0801a8b4 	.word	0x0801a8b4
 801405c:	0801af14 	.word	0x0801af14
 8014060:	0801a908 	.word	0x0801a908

08014064 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d106      	bne.n	8014080 <tcp_rexmit_rto+0x1c>
 8014072:	4b0a      	ldr	r3, [pc, #40]	@ (801409c <tcp_rexmit_rto+0x38>)
 8014074:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014078:	4909      	ldr	r1, [pc, #36]	@ (80140a0 <tcp_rexmit_rto+0x3c>)
 801407a:	480a      	ldr	r0, [pc, #40]	@ (80140a4 <tcp_rexmit_rto+0x40>)
 801407c:	f004 f8bc 	bl	80181f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7ff ff57 	bl	8013f34 <tcp_rexmit_rto_prepare>
 8014086:	4603      	mov	r3, r0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d102      	bne.n	8014092 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f7ff ffc1 	bl	8014014 <tcp_rexmit_rto_commit>
  }
}
 8014092:	bf00      	nop
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	0801a8b4 	.word	0x0801a8b4
 80140a0:	0801af38 	.word	0x0801af38
 80140a4:	0801a908 	.word	0x0801a908

080140a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80140a8:	b590      	push	{r4, r7, lr}
 80140aa:	b085      	sub	sp, #20
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d106      	bne.n	80140c4 <tcp_rexmit+0x1c>
 80140b6:	4b2f      	ldr	r3, [pc, #188]	@ (8014174 <tcp_rexmit+0xcc>)
 80140b8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80140bc:	492e      	ldr	r1, [pc, #184]	@ (8014178 <tcp_rexmit+0xd0>)
 80140be:	482f      	ldr	r0, [pc, #188]	@ (801417c <tcp_rexmit+0xd4>)
 80140c0:	f004 f89a 	bl	80181f8 <iprintf>

  if (pcb->unacked == NULL) {
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d102      	bne.n	80140d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80140cc:	f06f 0305 	mvn.w	r3, #5
 80140d0:	e04c      	b.n	801416c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80140d8:	68b8      	ldr	r0, [r7, #8]
 80140da:	f7ff fe2b 	bl	8013d34 <tcp_output_segment_busy>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d002      	beq.n	80140ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80140e4:	f06f 0305 	mvn.w	r3, #5
 80140e8:	e040      	b.n	801416c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	336c      	adds	r3, #108	@ 0x6c
 80140f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80140f8:	e002      	b.n	8014100 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d011      	beq.n	801412c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	68db      	ldr	r3, [r3, #12]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	4618      	mov	r0, r3
 8014112:	f7f9 fbc2 	bl	800d89a <lwip_htonl>
 8014116:	4604      	mov	r4, r0
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	68db      	ldr	r3, [r3, #12]
 801411c:	685b      	ldr	r3, [r3, #4]
 801411e:	4618      	mov	r0, r3
 8014120:	f7f9 fbbb 	bl	800d89a <lwip_htonl>
 8014124:	4603      	mov	r3, r0
 8014126:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014128:	2b00      	cmp	r3, #0
 801412a:	dbe6      	blt.n	80140fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	68ba      	ldr	r2, [r7, #8]
 8014138:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d103      	bne.n	801414a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2200      	movs	r2, #0
 8014146:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014150:	2bff      	cmp	r3, #255	@ 0xff
 8014152:	d007      	beq.n	8014164 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801415a:	3301      	adds	r3, #1
 801415c:	b2da      	uxtb	r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801416a:	2300      	movs	r3, #0
}
 801416c:	4618      	mov	r0, r3
 801416e:	3714      	adds	r7, #20
 8014170:	46bd      	mov	sp, r7
 8014172:	bd90      	pop	{r4, r7, pc}
 8014174:	0801a8b4 	.word	0x0801a8b4
 8014178:	0801af54 	.word	0x0801af54
 801417c:	0801a908 	.word	0x0801a908

08014180 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d106      	bne.n	801419c <tcp_rexmit_fast+0x1c>
 801418e:	4b2a      	ldr	r3, [pc, #168]	@ (8014238 <tcp_rexmit_fast+0xb8>)
 8014190:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014194:	4929      	ldr	r1, [pc, #164]	@ (801423c <tcp_rexmit_fast+0xbc>)
 8014196:	482a      	ldr	r0, [pc, #168]	@ (8014240 <tcp_rexmit_fast+0xc0>)
 8014198:	f004 f82e 	bl	80181f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d044      	beq.n	801422e <tcp_rexmit_fast+0xae>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	8b5b      	ldrh	r3, [r3, #26]
 80141a8:	f003 0304 	and.w	r3, r3, #4
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d13e      	bne.n	801422e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7ff ff79 	bl	80140a8 <tcp_rexmit>
 80141b6:	4603      	mov	r3, r0
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d138      	bne.n	801422e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80141c8:	4293      	cmp	r3, r2
 80141ca:	bf28      	it	cs
 80141cc:	4613      	movcs	r3, r2
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	0fda      	lsrs	r2, r3, #31
 80141d2:	4413      	add	r3, r2
 80141d4:	105b      	asrs	r3, r3, #1
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80141e4:	461a      	mov	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141ea:	005b      	lsls	r3, r3, #1
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d206      	bcs.n	80141fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014208:	4619      	mov	r1, r3
 801420a:	0049      	lsls	r1, r1, #1
 801420c:	440b      	add	r3, r1
 801420e:	b29b      	uxth	r3, r3
 8014210:	4413      	add	r3, r2
 8014212:	b29a      	uxth	r2, r3
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	8b5b      	ldrh	r3, [r3, #26]
 801421e:	f043 0304 	orr.w	r3, r3, #4
 8014222:	b29a      	uxth	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801422e:	bf00      	nop
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	0801a8b4 	.word	0x0801a8b4
 801423c:	0801af6c 	.word	0x0801af6c
 8014240:	0801a908 	.word	0x0801a908

08014244 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b086      	sub	sp, #24
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	607b      	str	r3, [r7, #4]
 801424e:	460b      	mov	r3, r1
 8014250:	817b      	strh	r3, [r7, #10]
 8014252:	4613      	mov	r3, r2
 8014254:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014256:	897a      	ldrh	r2, [r7, #10]
 8014258:	893b      	ldrh	r3, [r7, #8]
 801425a:	4413      	add	r3, r2
 801425c:	b29b      	uxth	r3, r3
 801425e:	3314      	adds	r3, #20
 8014260:	b29b      	uxth	r3, r3
 8014262:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014266:	4619      	mov	r1, r3
 8014268:	2022      	movs	r0, #34	@ 0x22
 801426a:	f7fa fc0f 	bl	800ea8c <pbuf_alloc>
 801426e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d04d      	beq.n	8014312 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014276:	897b      	ldrh	r3, [r7, #10]
 8014278:	3313      	adds	r3, #19
 801427a:	697a      	ldr	r2, [r7, #20]
 801427c:	8952      	ldrh	r2, [r2, #10]
 801427e:	4293      	cmp	r3, r2
 8014280:	db06      	blt.n	8014290 <tcp_output_alloc_header_common+0x4c>
 8014282:	4b26      	ldr	r3, [pc, #152]	@ (801431c <tcp_output_alloc_header_common+0xd8>)
 8014284:	f240 7223 	movw	r2, #1827	@ 0x723
 8014288:	4925      	ldr	r1, [pc, #148]	@ (8014320 <tcp_output_alloc_header_common+0xdc>)
 801428a:	4826      	ldr	r0, [pc, #152]	@ (8014324 <tcp_output_alloc_header_common+0xe0>)
 801428c:	f003 ffb4 	bl	80181f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014296:	8c3b      	ldrh	r3, [r7, #32]
 8014298:	4618      	mov	r0, r3
 801429a:	f7f9 fae9 	bl	800d870 <lwip_htons>
 801429e:	4603      	mov	r3, r0
 80142a0:	461a      	mov	r2, r3
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80142a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7f9 fae1 	bl	800d870 <lwip_htons>
 80142ae:	4603      	mov	r3, r0
 80142b0:	461a      	mov	r2, r3
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80142b6:	693b      	ldr	r3, [r7, #16]
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80142bc:	68f8      	ldr	r0, [r7, #12]
 80142be:	f7f9 faec 	bl	800d89a <lwip_htonl>
 80142c2:	4602      	mov	r2, r0
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80142c8:	897b      	ldrh	r3, [r7, #10]
 80142ca:	089b      	lsrs	r3, r3, #2
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	3305      	adds	r3, #5
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	031b      	lsls	r3, r3, #12
 80142d4:	b29a      	uxth	r2, r3
 80142d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80142da:	b29b      	uxth	r3, r3
 80142dc:	4313      	orrs	r3, r2
 80142de:	b29b      	uxth	r3, r3
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f9 fac5 	bl	800d870 <lwip_htons>
 80142e6:	4603      	mov	r3, r0
 80142e8:	461a      	mov	r2, r3
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80142ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7f9 fabd 	bl	800d870 <lwip_htons>
 80142f6:	4603      	mov	r3, r0
 80142f8:	461a      	mov	r2, r3
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	2200      	movs	r2, #0
 8014302:	741a      	strb	r2, [r3, #16]
 8014304:	2200      	movs	r2, #0
 8014306:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	2200      	movs	r2, #0
 801430c:	749a      	strb	r2, [r3, #18]
 801430e:	2200      	movs	r2, #0
 8014310:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014312:	697b      	ldr	r3, [r7, #20]
}
 8014314:	4618      	mov	r0, r3
 8014316:	3718      	adds	r7, #24
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	0801a8b4 	.word	0x0801a8b4
 8014320:	0801af8c 	.word	0x0801af8c
 8014324:	0801a908 	.word	0x0801a908

08014328 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014328:	b5b0      	push	{r4, r5, r7, lr}
 801432a:	b08a      	sub	sp, #40	@ 0x28
 801432c:	af04      	add	r7, sp, #16
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	607b      	str	r3, [r7, #4]
 8014332:	460b      	mov	r3, r1
 8014334:	817b      	strh	r3, [r7, #10]
 8014336:	4613      	mov	r3, r2
 8014338:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d106      	bne.n	801434e <tcp_output_alloc_header+0x26>
 8014340:	4b15      	ldr	r3, [pc, #84]	@ (8014398 <tcp_output_alloc_header+0x70>)
 8014342:	f240 7242 	movw	r2, #1858	@ 0x742
 8014346:	4915      	ldr	r1, [pc, #84]	@ (801439c <tcp_output_alloc_header+0x74>)
 8014348:	4815      	ldr	r0, [pc, #84]	@ (80143a0 <tcp_output_alloc_header+0x78>)
 801434a:	f003 ff55 	bl	80181f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	8adb      	ldrh	r3, [r3, #22]
 8014356:	68fa      	ldr	r2, [r7, #12]
 8014358:	8b12      	ldrh	r2, [r2, #24]
 801435a:	68f9      	ldr	r1, [r7, #12]
 801435c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801435e:	893d      	ldrh	r5, [r7, #8]
 8014360:	897c      	ldrh	r4, [r7, #10]
 8014362:	9103      	str	r1, [sp, #12]
 8014364:	2110      	movs	r1, #16
 8014366:	9102      	str	r1, [sp, #8]
 8014368:	9201      	str	r2, [sp, #4]
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	462a      	mov	r2, r5
 8014370:	4621      	mov	r1, r4
 8014372:	f7ff ff67 	bl	8014244 <tcp_output_alloc_header_common>
 8014376:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d006      	beq.n	801438c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014382:	68fa      	ldr	r2, [r7, #12]
 8014384:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014386:	441a      	add	r2, r3
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801438c:	697b      	ldr	r3, [r7, #20]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3718      	adds	r7, #24
 8014392:	46bd      	mov	sp, r7
 8014394:	bdb0      	pop	{r4, r5, r7, pc}
 8014396:	bf00      	nop
 8014398:	0801a8b4 	.word	0x0801a8b4
 801439c:	0801afbc 	.word	0x0801afbc
 80143a0:	0801a908 	.word	0x0801a908

080143a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b088      	sub	sp, #32
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60f8      	str	r0, [r7, #12]
 80143ac:	60b9      	str	r1, [r7, #8]
 80143ae:	4611      	mov	r1, r2
 80143b0:	461a      	mov	r2, r3
 80143b2:	460b      	mov	r3, r1
 80143b4:	71fb      	strb	r3, [r7, #7]
 80143b6:	4613      	mov	r3, r2
 80143b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d106      	bne.n	80143d2 <tcp_output_fill_options+0x2e>
 80143c4:	4b12      	ldr	r3, [pc, #72]	@ (8014410 <tcp_output_fill_options+0x6c>)
 80143c6:	f240 7256 	movw	r2, #1878	@ 0x756
 80143ca:	4912      	ldr	r1, [pc, #72]	@ (8014414 <tcp_output_fill_options+0x70>)
 80143cc:	4812      	ldr	r0, [pc, #72]	@ (8014418 <tcp_output_fill_options+0x74>)
 80143ce:	f003 ff13 	bl	80181f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	3314      	adds	r3, #20
 80143dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80143de:	8bfb      	ldrh	r3, [r7, #30]
 80143e0:	009b      	lsls	r3, r3, #2
 80143e2:	461a      	mov	r2, r3
 80143e4:	79fb      	ldrb	r3, [r7, #7]
 80143e6:	009b      	lsls	r3, r3, #2
 80143e8:	f003 0304 	and.w	r3, r3, #4
 80143ec:	4413      	add	r3, r2
 80143ee:	3314      	adds	r3, #20
 80143f0:	69ba      	ldr	r2, [r7, #24]
 80143f2:	4413      	add	r3, r2
 80143f4:	697a      	ldr	r2, [r7, #20]
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d006      	beq.n	8014408 <tcp_output_fill_options+0x64>
 80143fa:	4b05      	ldr	r3, [pc, #20]	@ (8014410 <tcp_output_fill_options+0x6c>)
 80143fc:	f240 7275 	movw	r2, #1909	@ 0x775
 8014400:	4906      	ldr	r1, [pc, #24]	@ (801441c <tcp_output_fill_options+0x78>)
 8014402:	4805      	ldr	r0, [pc, #20]	@ (8014418 <tcp_output_fill_options+0x74>)
 8014404:	f003 fef8 	bl	80181f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014408:	bf00      	nop
 801440a:	3720      	adds	r7, #32
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	0801a8b4 	.word	0x0801a8b4
 8014414:	0801afe4 	.word	0x0801afe4
 8014418:	0801a908 	.word	0x0801a908
 801441c:	0801aedc 	.word	0x0801aedc

08014420 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08a      	sub	sp, #40	@ 0x28
 8014424:	af04      	add	r7, sp, #16
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
 801442c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d106      	bne.n	8014442 <tcp_output_control_segment+0x22>
 8014434:	4b1c      	ldr	r3, [pc, #112]	@ (80144a8 <tcp_output_control_segment+0x88>)
 8014436:	f240 7287 	movw	r2, #1927	@ 0x787
 801443a:	491c      	ldr	r1, [pc, #112]	@ (80144ac <tcp_output_control_segment+0x8c>)
 801443c:	481c      	ldr	r0, [pc, #112]	@ (80144b0 <tcp_output_control_segment+0x90>)
 801443e:	f003 fedb 	bl	80181f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014442:	683a      	ldr	r2, [r7, #0]
 8014444:	6879      	ldr	r1, [r7, #4]
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f7fe ff42 	bl	80132d0 <tcp_route>
 801444c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d102      	bne.n	801445a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014454:	23fc      	movs	r3, #252	@ 0xfc
 8014456:	75fb      	strb	r3, [r7, #23]
 8014458:	e01c      	b.n	8014494 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d006      	beq.n	801446e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	7adb      	ldrb	r3, [r3, #11]
 8014464:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	7a9b      	ldrb	r3, [r3, #10]
 801446a:	757b      	strb	r3, [r7, #21]
 801446c:	e003      	b.n	8014476 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801446e:	23ff      	movs	r3, #255	@ 0xff
 8014470:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014472:	2300      	movs	r3, #0
 8014474:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014476:	7dba      	ldrb	r2, [r7, #22]
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	9302      	str	r3, [sp, #8]
 801447c:	2306      	movs	r3, #6
 801447e:	9301      	str	r3, [sp, #4]
 8014480:	7d7b      	ldrb	r3, [r7, #21]
 8014482:	9300      	str	r3, [sp, #0]
 8014484:	4613      	mov	r3, r2
 8014486:	683a      	ldr	r2, [r7, #0]
 8014488:	6879      	ldr	r1, [r7, #4]
 801448a:	68b8      	ldr	r0, [r7, #8]
 801448c:	f001 ffa0 	bl	80163d0 <ip4_output_if>
 8014490:	4603      	mov	r3, r0
 8014492:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014494:	68b8      	ldr	r0, [r7, #8]
 8014496:	f7fa fddd 	bl	800f054 <pbuf_free>
  return err;
 801449a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3718      	adds	r7, #24
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	0801a8b4 	.word	0x0801a8b4
 80144ac:	0801b00c 	.word	0x0801b00c
 80144b0:	0801a908 	.word	0x0801a908

080144b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80144b4:	b590      	push	{r4, r7, lr}
 80144b6:	b08b      	sub	sp, #44	@ 0x2c
 80144b8:	af04      	add	r7, sp, #16
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d106      	bne.n	80144d6 <tcp_rst+0x22>
 80144c8:	4b1f      	ldr	r3, [pc, #124]	@ (8014548 <tcp_rst+0x94>)
 80144ca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80144ce:	491f      	ldr	r1, [pc, #124]	@ (801454c <tcp_rst+0x98>)
 80144d0:	481f      	ldr	r0, [pc, #124]	@ (8014550 <tcp_rst+0x9c>)
 80144d2:	f003 fe91 	bl	80181f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80144d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d106      	bne.n	80144ea <tcp_rst+0x36>
 80144dc:	4b1a      	ldr	r3, [pc, #104]	@ (8014548 <tcp_rst+0x94>)
 80144de:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80144e2:	491c      	ldr	r1, [pc, #112]	@ (8014554 <tcp_rst+0xa0>)
 80144e4:	481a      	ldr	r0, [pc, #104]	@ (8014550 <tcp_rst+0x9c>)
 80144e6:	f003 fe87 	bl	80181f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80144ea:	2300      	movs	r3, #0
 80144ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80144ee:	f246 0308 	movw	r3, #24584	@ 0x6008
 80144f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80144f4:	7dfb      	ldrb	r3, [r7, #23]
 80144f6:	b29c      	uxth	r4, r3
 80144f8:	68b8      	ldr	r0, [r7, #8]
 80144fa:	f7f9 f9ce 	bl	800d89a <lwip_htonl>
 80144fe:	4602      	mov	r2, r0
 8014500:	8abb      	ldrh	r3, [r7, #20]
 8014502:	9303      	str	r3, [sp, #12]
 8014504:	2314      	movs	r3, #20
 8014506:	9302      	str	r3, [sp, #8]
 8014508:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801450a:	9301      	str	r3, [sp, #4]
 801450c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	4613      	mov	r3, r2
 8014512:	2200      	movs	r2, #0
 8014514:	4621      	mov	r1, r4
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f7ff fe94 	bl	8014244 <tcp_output_alloc_header_common>
 801451c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d00c      	beq.n	801453e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014524:	7dfb      	ldrb	r3, [r7, #23]
 8014526:	2200      	movs	r2, #0
 8014528:	6939      	ldr	r1, [r7, #16]
 801452a:	68f8      	ldr	r0, [r7, #12]
 801452c:	f7ff ff3a 	bl	80143a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	6939      	ldr	r1, [r7, #16]
 8014536:	68f8      	ldr	r0, [r7, #12]
 8014538:	f7ff ff72 	bl	8014420 <tcp_output_control_segment>
 801453c:	e000      	b.n	8014540 <tcp_rst+0x8c>
    return;
 801453e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014540:	371c      	adds	r7, #28
 8014542:	46bd      	mov	sp, r7
 8014544:	bd90      	pop	{r4, r7, pc}
 8014546:	bf00      	nop
 8014548:	0801a8b4 	.word	0x0801a8b4
 801454c:	0801b038 	.word	0x0801b038
 8014550:	0801a908 	.word	0x0801a908
 8014554:	0801b054 	.word	0x0801b054

08014558 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014558:	b590      	push	{r4, r7, lr}
 801455a:	b087      	sub	sp, #28
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014560:	2300      	movs	r3, #0
 8014562:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014564:	2300      	movs	r3, #0
 8014566:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <tcp_send_empty_ack+0x24>
 801456e:	4b28      	ldr	r3, [pc, #160]	@ (8014610 <tcp_send_empty_ack+0xb8>)
 8014570:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8014574:	4927      	ldr	r1, [pc, #156]	@ (8014614 <tcp_send_empty_ack+0xbc>)
 8014576:	4828      	ldr	r0, [pc, #160]	@ (8014618 <tcp_send_empty_ack+0xc0>)
 8014578:	f003 fe3e 	bl	80181f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801457c:	7dfb      	ldrb	r3, [r7, #23]
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	b2db      	uxtb	r3, r3
 8014582:	f003 0304 	and.w	r3, r3, #4
 8014586:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014588:	7d7b      	ldrb	r3, [r7, #21]
 801458a:	b29c      	uxth	r4, r3
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014590:	4618      	mov	r0, r3
 8014592:	f7f9 f982 	bl	800d89a <lwip_htonl>
 8014596:	4603      	mov	r3, r0
 8014598:	2200      	movs	r2, #0
 801459a:	4621      	mov	r1, r4
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f7ff fec3 	bl	8014328 <tcp_output_alloc_header>
 80145a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d109      	bne.n	80145be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	8b5b      	ldrh	r3, [r3, #26]
 80145ae:	f043 0303 	orr.w	r3, r3, #3
 80145b2:	b29a      	uxth	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80145b8:	f06f 0301 	mvn.w	r3, #1
 80145bc:	e023      	b.n	8014606 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80145be:	7dbb      	ldrb	r3, [r7, #22]
 80145c0:	7dfa      	ldrb	r2, [r7, #23]
 80145c2:	6939      	ldr	r1, [r7, #16]
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7ff feed 	bl	80143a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	3304      	adds	r3, #4
 80145d0:	6939      	ldr	r1, [r7, #16]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff ff24 	bl	8014420 <tcp_output_control_segment>
 80145d8:	4603      	mov	r3, r0
 80145da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80145dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d007      	beq.n	80145f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	8b5b      	ldrh	r3, [r3, #26]
 80145e8:	f043 0303 	orr.w	r3, r3, #3
 80145ec:	b29a      	uxth	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	835a      	strh	r2, [r3, #26]
 80145f2:	e006      	b.n	8014602 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	8b5b      	ldrh	r3, [r3, #26]
 80145f8:	f023 0303 	bic.w	r3, r3, #3
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014606:	4618      	mov	r0, r3
 8014608:	371c      	adds	r7, #28
 801460a:	46bd      	mov	sp, r7
 801460c:	bd90      	pop	{r4, r7, pc}
 801460e:	bf00      	nop
 8014610:	0801a8b4 	.word	0x0801a8b4
 8014614:	0801b070 	.word	0x0801b070
 8014618:	0801a908 	.word	0x0801a908

0801461c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801461c:	b590      	push	{r4, r7, lr}
 801461e:	b087      	sub	sp, #28
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014624:	2300      	movs	r3, #0
 8014626:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d106      	bne.n	801463c <tcp_keepalive+0x20>
 801462e:	4b18      	ldr	r3, [pc, #96]	@ (8014690 <tcp_keepalive+0x74>)
 8014630:	f640 0224 	movw	r2, #2084	@ 0x824
 8014634:	4917      	ldr	r1, [pc, #92]	@ (8014694 <tcp_keepalive+0x78>)
 8014636:	4818      	ldr	r0, [pc, #96]	@ (8014698 <tcp_keepalive+0x7c>)
 8014638:	f003 fdde 	bl	80181f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801463c:	7dfb      	ldrb	r3, [r7, #23]
 801463e:	b29c      	uxth	r4, r3
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014644:	3b01      	subs	r3, #1
 8014646:	4618      	mov	r0, r3
 8014648:	f7f9 f927 	bl	800d89a <lwip_htonl>
 801464c:	4603      	mov	r3, r0
 801464e:	2200      	movs	r2, #0
 8014650:	4621      	mov	r1, r4
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f7ff fe68 	bl	8014328 <tcp_output_alloc_header>
 8014658:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d102      	bne.n	8014666 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014660:	f04f 33ff 	mov.w	r3, #4294967295
 8014664:	e010      	b.n	8014688 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014666:	7dfb      	ldrb	r3, [r7, #23]
 8014668:	2200      	movs	r2, #0
 801466a:	6939      	ldr	r1, [r7, #16]
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7ff fe99 	bl	80143a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	3304      	adds	r3, #4
 8014678:	6939      	ldr	r1, [r7, #16]
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f7ff fed0 	bl	8014420 <tcp_output_control_segment>
 8014680:	4603      	mov	r3, r0
 8014682:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014688:	4618      	mov	r0, r3
 801468a:	371c      	adds	r7, #28
 801468c:	46bd      	mov	sp, r7
 801468e:	bd90      	pop	{r4, r7, pc}
 8014690:	0801a8b4 	.word	0x0801a8b4
 8014694:	0801b090 	.word	0x0801b090
 8014698:	0801a908 	.word	0x0801a908

0801469c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801469c:	b590      	push	{r4, r7, lr}
 801469e:	b08b      	sub	sp, #44	@ 0x2c
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80146a4:	2300      	movs	r3, #0
 80146a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d106      	bne.n	80146be <tcp_zero_window_probe+0x22>
 80146b0:	4b4c      	ldr	r3, [pc, #304]	@ (80147e4 <tcp_zero_window_probe+0x148>)
 80146b2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80146b6:	494c      	ldr	r1, [pc, #304]	@ (80147e8 <tcp_zero_window_probe+0x14c>)
 80146b8:	484c      	ldr	r0, [pc, #304]	@ (80147ec <tcp_zero_window_probe+0x150>)
 80146ba:	f003 fd9d 	bl	80181f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80146c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80146c4:	6a3b      	ldr	r3, [r7, #32]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d101      	bne.n	80146ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80146ca:	2300      	movs	r3, #0
 80146cc:	e086      	b.n	80147dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80146d4:	2bff      	cmp	r3, #255	@ 0xff
 80146d6:	d007      	beq.n	80146e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80146de:	3301      	adds	r3, #1
 80146e0:	b2da      	uxtb	r2, r3
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80146e8:	6a3b      	ldr	r3, [r7, #32]
 80146ea:	68db      	ldr	r3, [r3, #12]
 80146ec:	899b      	ldrh	r3, [r3, #12]
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7f9 f8bd 	bl	800d870 <lwip_htons>
 80146f6:	4603      	mov	r3, r0
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	f003 0301 	and.w	r3, r3, #1
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d005      	beq.n	801470e <tcp_zero_window_probe+0x72>
 8014702:	6a3b      	ldr	r3, [r7, #32]
 8014704:	891b      	ldrh	r3, [r3, #8]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d101      	bne.n	801470e <tcp_zero_window_probe+0x72>
 801470a:	2301      	movs	r3, #1
 801470c:	e000      	b.n	8014710 <tcp_zero_window_probe+0x74>
 801470e:	2300      	movs	r3, #0
 8014710:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014712:	7ffb      	ldrb	r3, [r7, #31]
 8014714:	2b00      	cmp	r3, #0
 8014716:	bf0c      	ite	eq
 8014718:	2301      	moveq	r3, #1
 801471a:	2300      	movne	r3, #0
 801471c:	b2db      	uxtb	r3, r3
 801471e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014724:	b299      	uxth	r1, r3
 8014726:	6a3b      	ldr	r3, [r7, #32]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	685b      	ldr	r3, [r3, #4]
 801472c:	8bba      	ldrh	r2, [r7, #28]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7ff fdfa 	bl	8014328 <tcp_output_alloc_header>
 8014734:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d102      	bne.n	8014742 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801473c:	f04f 33ff 	mov.w	r3, #4294967295
 8014740:	e04c      	b.n	80147dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014748:	7ffb      	ldrb	r3, [r7, #31]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d011      	beq.n	8014772 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	899b      	ldrh	r3, [r3, #12]
 8014752:	b29b      	uxth	r3, r3
 8014754:	b21b      	sxth	r3, r3
 8014756:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801475a:	b21c      	sxth	r4, r3
 801475c:	2011      	movs	r0, #17
 801475e:	f7f9 f887 	bl	800d870 <lwip_htons>
 8014762:	4603      	mov	r3, r0
 8014764:	b21b      	sxth	r3, r3
 8014766:	4323      	orrs	r3, r4
 8014768:	b21b      	sxth	r3, r3
 801476a:	b29a      	uxth	r2, r3
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	819a      	strh	r2, [r3, #12]
 8014770:	e010      	b.n	8014794 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	3314      	adds	r3, #20
 8014778:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801477a:	6a3b      	ldr	r3, [r7, #32]
 801477c:	6858      	ldr	r0, [r3, #4]
 801477e:	6a3b      	ldr	r3, [r7, #32]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	891a      	ldrh	r2, [r3, #8]
 8014784:	6a3b      	ldr	r3, [r7, #32]
 8014786:	891b      	ldrh	r3, [r3, #8]
 8014788:	1ad3      	subs	r3, r2, r3
 801478a:	b29b      	uxth	r3, r3
 801478c:	2201      	movs	r2, #1
 801478e:	6939      	ldr	r1, [r7, #16]
 8014790:	f7fa fe56 	bl	800f440 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014794:	6a3b      	ldr	r3, [r7, #32]
 8014796:	68db      	ldr	r3, [r3, #12]
 8014798:	685b      	ldr	r3, [r3, #4]
 801479a:	4618      	mov	r0, r3
 801479c:	f7f9 f87d 	bl	800d89a <lwip_htonl>
 80147a0:	4603      	mov	r3, r0
 80147a2:	3301      	adds	r3, #1
 80147a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	da02      	bge.n	80147b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	68fa      	ldr	r2, [r7, #12]
 80147b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80147b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147bc:	2200      	movs	r2, #0
 80147be:	69b9      	ldr	r1, [r7, #24]
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff fdef 	bl	80143a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	3304      	adds	r3, #4
 80147cc:	69b9      	ldr	r1, [r7, #24]
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f7ff fe26 	bl	8014420 <tcp_output_control_segment>
 80147d4:	4603      	mov	r3, r0
 80147d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80147d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80147dc:	4618      	mov	r0, r3
 80147de:	372c      	adds	r7, #44	@ 0x2c
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd90      	pop	{r4, r7, pc}
 80147e4:	0801a8b4 	.word	0x0801a8b4
 80147e8:	0801b0ac 	.word	0x0801b0ac
 80147ec:	0801a908 	.word	0x0801a908

080147f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80147f8:	f7fa ff10 	bl	800f61c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80147fc:	4b0a      	ldr	r3, [pc, #40]	@ (8014828 <tcpip_tcp_timer+0x38>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d103      	bne.n	801480c <tcpip_tcp_timer+0x1c>
 8014804:	4b09      	ldr	r3, [pc, #36]	@ (801482c <tcpip_tcp_timer+0x3c>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d005      	beq.n	8014818 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801480c:	2200      	movs	r2, #0
 801480e:	4908      	ldr	r1, [pc, #32]	@ (8014830 <tcpip_tcp_timer+0x40>)
 8014810:	20fa      	movs	r0, #250	@ 0xfa
 8014812:	f000 f8f3 	bl	80149fc <sys_timeout>
 8014816:	e003      	b.n	8014820 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014818:	4b06      	ldr	r3, [pc, #24]	@ (8014834 <tcpip_tcp_timer+0x44>)
 801481a:	2200      	movs	r2, #0
 801481c:	601a      	str	r2, [r3, #0]
  }
}
 801481e:	bf00      	nop
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	2000d57c 	.word	0x2000d57c
 801482c:	2000d580 	.word	0x2000d580
 8014830:	080147f1 	.word	0x080147f1
 8014834:	2000d5c8 	.word	0x2000d5c8

08014838 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801483c:	4b0a      	ldr	r3, [pc, #40]	@ (8014868 <tcp_timer_needed+0x30>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d10f      	bne.n	8014864 <tcp_timer_needed+0x2c>
 8014844:	4b09      	ldr	r3, [pc, #36]	@ (801486c <tcp_timer_needed+0x34>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d103      	bne.n	8014854 <tcp_timer_needed+0x1c>
 801484c:	4b08      	ldr	r3, [pc, #32]	@ (8014870 <tcp_timer_needed+0x38>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d007      	beq.n	8014864 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014854:	4b04      	ldr	r3, [pc, #16]	@ (8014868 <tcp_timer_needed+0x30>)
 8014856:	2201      	movs	r2, #1
 8014858:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801485a:	2200      	movs	r2, #0
 801485c:	4905      	ldr	r1, [pc, #20]	@ (8014874 <tcp_timer_needed+0x3c>)
 801485e:	20fa      	movs	r0, #250	@ 0xfa
 8014860:	f000 f8cc 	bl	80149fc <sys_timeout>
  }
}
 8014864:	bf00      	nop
 8014866:	bd80      	pop	{r7, pc}
 8014868:	2000d5c8 	.word	0x2000d5c8
 801486c:	2000d57c 	.word	0x2000d57c
 8014870:	2000d580 	.word	0x2000d580
 8014874:	080147f1 	.word	0x080147f1

08014878 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014884:	200a      	movs	r0, #10
 8014886:	f7f9 fccb 	bl	800e220 <memp_malloc>
 801488a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d109      	bne.n	80148a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d151      	bne.n	801493c <sys_timeout_abs+0xc4>
 8014898:	4b2a      	ldr	r3, [pc, #168]	@ (8014944 <sys_timeout_abs+0xcc>)
 801489a:	22be      	movs	r2, #190	@ 0xbe
 801489c:	492a      	ldr	r1, [pc, #168]	@ (8014948 <sys_timeout_abs+0xd0>)
 801489e:	482b      	ldr	r0, [pc, #172]	@ (801494c <sys_timeout_abs+0xd4>)
 80148a0:	f003 fcaa 	bl	80181f8 <iprintf>
    return;
 80148a4:	e04a      	b.n	801493c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	2200      	movs	r2, #0
 80148aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	68ba      	ldr	r2, [r7, #8]
 80148b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80148be:	4b24      	ldr	r3, [pc, #144]	@ (8014950 <sys_timeout_abs+0xd8>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d103      	bne.n	80148ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80148c6:	4a22      	ldr	r2, [pc, #136]	@ (8014950 <sys_timeout_abs+0xd8>)
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	6013      	str	r3, [r2, #0]
    return;
 80148cc:	e037      	b.n	801493e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	685a      	ldr	r2, [r3, #4]
 80148d2:	4b1f      	ldr	r3, [pc, #124]	@ (8014950 <sys_timeout_abs+0xd8>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	0fdb      	lsrs	r3, r3, #31
 80148dc:	f003 0301 	and.w	r3, r3, #1
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d007      	beq.n	80148f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80148e6:	4b1a      	ldr	r3, [pc, #104]	@ (8014950 <sys_timeout_abs+0xd8>)
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80148ee:	4a18      	ldr	r2, [pc, #96]	@ (8014950 <sys_timeout_abs+0xd8>)
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	6013      	str	r3, [r2, #0]
 80148f4:	e023      	b.n	801493e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80148f6:	4b16      	ldr	r3, [pc, #88]	@ (8014950 <sys_timeout_abs+0xd8>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	617b      	str	r3, [r7, #20]
 80148fc:	e01a      	b.n	8014934 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00b      	beq.n	801491e <sys_timeout_abs+0xa6>
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	685a      	ldr	r2, [r3, #4]
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	0fdb      	lsrs	r3, r3, #31
 8014914:	f003 0301 	and.w	r3, r3, #1
 8014918:	b2db      	uxtb	r3, r3
 801491a:	2b00      	cmp	r3, #0
 801491c:	d007      	beq.n	801492e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	693a      	ldr	r2, [r7, #16]
 801492a:	601a      	str	r2, [r3, #0]
        break;
 801492c:	e007      	b.n	801493e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	617b      	str	r3, [r7, #20]
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d1e1      	bne.n	80148fe <sys_timeout_abs+0x86>
 801493a:	e000      	b.n	801493e <sys_timeout_abs+0xc6>
    return;
 801493c:	bf00      	nop
      }
    }
  }
}
 801493e:	3718      	adds	r7, #24
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	0801b0d0 	.word	0x0801b0d0
 8014948:	0801b104 	.word	0x0801b104
 801494c:	0801b144 	.word	0x0801b144
 8014950:	2000d5c0 	.word	0x2000d5c0

08014954 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b086      	sub	sp, #24
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	4798      	blx	r3

  now = sys_now();
 8014966:	f7f2 fd7d 	bl	8007464 <sys_now>
 801496a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	4b0f      	ldr	r3, [pc, #60]	@ (80149b0 <lwip_cyclic_timer+0x5c>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	4413      	add	r3, r2
 8014976:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014978:	68fa      	ldr	r2, [r7, #12]
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	0fdb      	lsrs	r3, r3, #31
 8014980:	f003 0301 	and.w	r3, r3, #1
 8014984:	b2db      	uxtb	r3, r3
 8014986:	2b00      	cmp	r3, #0
 8014988:	d009      	beq.n	801499e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	681a      	ldr	r2, [r3, #0]
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	4413      	add	r3, r2
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	4907      	ldr	r1, [pc, #28]	@ (80149b4 <lwip_cyclic_timer+0x60>)
 8014996:	4618      	mov	r0, r3
 8014998:	f7ff ff6e 	bl	8014878 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801499c:	e004      	b.n	80149a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	4904      	ldr	r1, [pc, #16]	@ (80149b4 <lwip_cyclic_timer+0x60>)
 80149a2:	68f8      	ldr	r0, [r7, #12]
 80149a4:	f7ff ff68 	bl	8014878 <sys_timeout_abs>
}
 80149a8:	bf00      	nop
 80149aa:	3718      	adds	r7, #24
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	2000d5c4 	.word	0x2000d5c4
 80149b4:	08014955 	.word	0x08014955

080149b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80149be:	2301      	movs	r3, #1
 80149c0:	607b      	str	r3, [r7, #4]
 80149c2:	e00e      	b.n	80149e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80149c4:	4a0b      	ldr	r2, [pc, #44]	@ (80149f4 <sys_timeouts_init+0x3c>)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	00db      	lsls	r3, r3, #3
 80149d0:	4a08      	ldr	r2, [pc, #32]	@ (80149f4 <sys_timeouts_init+0x3c>)
 80149d2:	4413      	add	r3, r2
 80149d4:	461a      	mov	r2, r3
 80149d6:	4908      	ldr	r1, [pc, #32]	@ (80149f8 <sys_timeouts_init+0x40>)
 80149d8:	f000 f810 	bl	80149fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	3301      	adds	r3, #1
 80149e0:	607b      	str	r3, [r7, #4]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2b02      	cmp	r3, #2
 80149e6:	d9ed      	bls.n	80149c4 <sys_timeouts_init+0xc>
  }
}
 80149e8:	bf00      	nop
 80149ea:	bf00      	nop
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	0801bd68 	.word	0x0801bd68
 80149f8:	08014955 	.word	0x08014955

080149fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a0e:	d306      	bcc.n	8014a1e <sys_timeout+0x22>
 8014a10:	4b0a      	ldr	r3, [pc, #40]	@ (8014a3c <sys_timeout+0x40>)
 8014a12:	f240 1229 	movw	r2, #297	@ 0x129
 8014a16:	490a      	ldr	r1, [pc, #40]	@ (8014a40 <sys_timeout+0x44>)
 8014a18:	480a      	ldr	r0, [pc, #40]	@ (8014a44 <sys_timeout+0x48>)
 8014a1a:	f003 fbed 	bl	80181f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014a1e:	f7f2 fd21 	bl	8007464 <sys_now>
 8014a22:	4602      	mov	r2, r0
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	4413      	add	r3, r2
 8014a28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	68b9      	ldr	r1, [r7, #8]
 8014a2e:	6978      	ldr	r0, [r7, #20]
 8014a30:	f7ff ff22 	bl	8014878 <sys_timeout_abs>
#endif
}
 8014a34:	bf00      	nop
 8014a36:	3718      	adds	r7, #24
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	0801b0d0 	.word	0x0801b0d0
 8014a40:	0801b16c 	.word	0x0801b16c
 8014a44:	0801b144 	.word	0x0801b144

08014a48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b084      	sub	sp, #16
 8014a4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014a4e:	f7f2 fd09 	bl	8007464 <sys_now>
 8014a52:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014a54:	4b17      	ldr	r3, [pc, #92]	@ (8014ab4 <sys_check_timeouts+0x6c>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d022      	beq.n	8014aa6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	68fa      	ldr	r2, [r7, #12]
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	0fdb      	lsrs	r3, r3, #31
 8014a6a:	f003 0301 	and.w	r3, r3, #1
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d11a      	bne.n	8014aaa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	4a0e      	ldr	r2, [pc, #56]	@ (8014ab4 <sys_check_timeouts+0x6c>)
 8014a7a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	689b      	ldr	r3, [r3, #8]
 8014a80:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8014ab8 <sys_check_timeouts+0x70>)
 8014a8e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014a90:	68b9      	ldr	r1, [r7, #8]
 8014a92:	200a      	movs	r0, #10
 8014a94:	f7f9 fc3a 	bl	800e30c <memp_free>
    if (handler != NULL) {
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d0da      	beq.n	8014a54 <sys_check_timeouts+0xc>
      handler(arg);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6838      	ldr	r0, [r7, #0]
 8014aa2:	4798      	blx	r3
  do {
 8014aa4:	e7d6      	b.n	8014a54 <sys_check_timeouts+0xc>
      return;
 8014aa6:	bf00      	nop
 8014aa8:	e000      	b.n	8014aac <sys_check_timeouts+0x64>
      return;
 8014aaa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014aac:	3710      	adds	r7, #16
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	2000d5c0 	.word	0x2000d5c0
 8014ab8:	2000d5c4 	.word	0x2000d5c4

08014abc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014ac2:	4b16      	ldr	r3, [pc, #88]	@ (8014b1c <sys_timeouts_sleeptime+0x60>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d102      	bne.n	8014ad0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014aca:	f04f 33ff 	mov.w	r3, #4294967295
 8014ace:	e020      	b.n	8014b12 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014ad0:	f7f2 fcc8 	bl	8007464 <sys_now>
 8014ad4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014ad6:	4b11      	ldr	r3, [pc, #68]	@ (8014b1c <sys_timeouts_sleeptime+0x60>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	685a      	ldr	r2, [r3, #4]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	1ad3      	subs	r3, r2, r3
 8014ae0:	0fdb      	lsrs	r3, r3, #31
 8014ae2:	f003 0301 	and.w	r3, r3, #1
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d001      	beq.n	8014af0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	e010      	b.n	8014b12 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014af0:	4b0a      	ldr	r3, [pc, #40]	@ (8014b1c <sys_timeouts_sleeptime+0x60>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	685a      	ldr	r2, [r3, #4]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	1ad3      	subs	r3, r2, r3
 8014afa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	da06      	bge.n	8014b10 <sys_timeouts_sleeptime+0x54>
 8014b02:	4b07      	ldr	r3, [pc, #28]	@ (8014b20 <sys_timeouts_sleeptime+0x64>)
 8014b04:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014b08:	4906      	ldr	r1, [pc, #24]	@ (8014b24 <sys_timeouts_sleeptime+0x68>)
 8014b0a:	4807      	ldr	r0, [pc, #28]	@ (8014b28 <sys_timeouts_sleeptime+0x6c>)
 8014b0c:	f003 fb74 	bl	80181f8 <iprintf>
    return ret;
 8014b10:	683b      	ldr	r3, [r7, #0]
  }
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3708      	adds	r7, #8
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	2000d5c0 	.word	0x2000d5c0
 8014b20:	0801b0d0 	.word	0x0801b0d0
 8014b24:	0801b1a4 	.word	0x0801b1a4
 8014b28:	0801b144 	.word	0x0801b144

08014b2c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014b30:	f003 fa62 	bl	8017ff8 <rand>
 8014b34:	4603      	mov	r3, r0
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014b3c:	b29b      	uxth	r3, r3
 8014b3e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	4b01      	ldr	r3, [pc, #4]	@ (8014b4c <udp_init+0x20>)
 8014b46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014b48:	bf00      	nop
 8014b4a:	bd80      	pop	{r7, pc}
 8014b4c:	200000c8 	.word	0x200000c8

08014b50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d105      	bne.n	8014b70 <udp_input_local_match+0x20>
 8014b64:	4b27      	ldr	r3, [pc, #156]	@ (8014c04 <udp_input_local_match+0xb4>)
 8014b66:	2287      	movs	r2, #135	@ 0x87
 8014b68:	4927      	ldr	r1, [pc, #156]	@ (8014c08 <udp_input_local_match+0xb8>)
 8014b6a:	4828      	ldr	r0, [pc, #160]	@ (8014c0c <udp_input_local_match+0xbc>)
 8014b6c:	f003 fb44 	bl	80181f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d105      	bne.n	8014b82 <udp_input_local_match+0x32>
 8014b76:	4b23      	ldr	r3, [pc, #140]	@ (8014c04 <udp_input_local_match+0xb4>)
 8014b78:	2288      	movs	r2, #136	@ 0x88
 8014b7a:	4925      	ldr	r1, [pc, #148]	@ (8014c10 <udp_input_local_match+0xc0>)
 8014b7c:	4823      	ldr	r0, [pc, #140]	@ (8014c0c <udp_input_local_match+0xbc>)
 8014b7e:	f003 fb3b 	bl	80181f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	7a1b      	ldrb	r3, [r3, #8]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d00b      	beq.n	8014ba2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	7a1a      	ldrb	r2, [r3, #8]
 8014b8e:	4b21      	ldr	r3, [pc, #132]	@ (8014c14 <udp_input_local_match+0xc4>)
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014b96:	3301      	adds	r3, #1
 8014b98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d001      	beq.n	8014ba2 <udp_input_local_match+0x52>
    return 0;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	e02b      	b.n	8014bfa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d018      	beq.n	8014bda <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d013      	beq.n	8014bd6 <udp_input_local_match+0x86>
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00f      	beq.n	8014bd6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014bb6:	4b17      	ldr	r3, [pc, #92]	@ (8014c14 <udp_input_local_match+0xc4>)
 8014bb8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bbe:	d00a      	beq.n	8014bd6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	4b13      	ldr	r3, [pc, #76]	@ (8014c14 <udp_input_local_match+0xc4>)
 8014bc6:	695b      	ldr	r3, [r3, #20]
 8014bc8:	405a      	eors	r2, r3
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	3308      	adds	r3, #8
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d110      	bne.n	8014bf8 <udp_input_local_match+0xa8>
          return 1;
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	e00f      	b.n	8014bfa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d009      	beq.n	8014bf4 <udp_input_local_match+0xa4>
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d005      	beq.n	8014bf4 <udp_input_local_match+0xa4>
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681a      	ldr	r2, [r3, #0]
 8014bec:	4b09      	ldr	r3, [pc, #36]	@ (8014c14 <udp_input_local_match+0xc4>)
 8014bee:	695b      	ldr	r3, [r3, #20]
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d101      	bne.n	8014bf8 <udp_input_local_match+0xa8>
        return 1;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e000      	b.n	8014bfa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014bf8:	2300      	movs	r3, #0
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	0801b1b8 	.word	0x0801b1b8
 8014c08:	0801b1e8 	.word	0x0801b1e8
 8014c0c:	0801b20c 	.word	0x0801b20c
 8014c10:	0801b234 	.word	0x0801b234
 8014c14:	20009e1c 	.word	0x20009e1c

08014c18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014c18:	b590      	push	{r4, r7, lr}
 8014c1a:	b08d      	sub	sp, #52	@ 0x34
 8014c1c:	af02      	add	r7, sp, #8
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014c22:	2300      	movs	r3, #0
 8014c24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d105      	bne.n	8014c38 <udp_input+0x20>
 8014c2c:	4b7c      	ldr	r3, [pc, #496]	@ (8014e20 <udp_input+0x208>)
 8014c2e:	22cf      	movs	r2, #207	@ 0xcf
 8014c30:	497c      	ldr	r1, [pc, #496]	@ (8014e24 <udp_input+0x20c>)
 8014c32:	487d      	ldr	r0, [pc, #500]	@ (8014e28 <udp_input+0x210>)
 8014c34:	f003 fae0 	bl	80181f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d105      	bne.n	8014c4a <udp_input+0x32>
 8014c3e:	4b78      	ldr	r3, [pc, #480]	@ (8014e20 <udp_input+0x208>)
 8014c40:	22d0      	movs	r2, #208	@ 0xd0
 8014c42:	497a      	ldr	r1, [pc, #488]	@ (8014e2c <udp_input+0x214>)
 8014c44:	4878      	ldr	r0, [pc, #480]	@ (8014e28 <udp_input+0x210>)
 8014c46:	f003 fad7 	bl	80181f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	895b      	ldrh	r3, [r3, #10]
 8014c4e:	2b07      	cmp	r3, #7
 8014c50:	d803      	bhi.n	8014c5a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7fa f9fe 	bl	800f054 <pbuf_free>
    goto end;
 8014c58:	e0de      	b.n	8014e18 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014c60:	4b73      	ldr	r3, [pc, #460]	@ (8014e30 <udp_input+0x218>)
 8014c62:	695b      	ldr	r3, [r3, #20]
 8014c64:	4a72      	ldr	r2, [pc, #456]	@ (8014e30 <udp_input+0x218>)
 8014c66:	6812      	ldr	r2, [r2, #0]
 8014c68:	4611      	mov	r1, r2
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f001 fc88 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8014c70:	4603      	mov	r3, r0
 8014c72:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	881b      	ldrh	r3, [r3, #0]
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7f8 fdf8 	bl	800d870 <lwip_htons>
 8014c80:	4603      	mov	r3, r0
 8014c82:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	885b      	ldrh	r3, [r3, #2]
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7f8 fdf0 	bl	800d870 <lwip_htons>
 8014c90:	4603      	mov	r3, r0
 8014c92:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014c94:	2300      	movs	r3, #0
 8014c96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ca0:	4b64      	ldr	r3, [pc, #400]	@ (8014e34 <udp_input+0x21c>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ca6:	e054      	b.n	8014d52 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014caa:	8a5b      	ldrh	r3, [r3, #18]
 8014cac:	89fa      	ldrh	r2, [r7, #14]
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d14a      	bne.n	8014d48 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014cb2:	7cfb      	ldrb	r3, [r7, #19]
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	6839      	ldr	r1, [r7, #0]
 8014cb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014cba:	f7ff ff49 	bl	8014b50 <udp_input_local_match>
 8014cbe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d041      	beq.n	8014d48 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc6:	7c1b      	ldrb	r3, [r3, #16]
 8014cc8:	f003 0304 	and.w	r3, r3, #4
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d11d      	bne.n	8014d0c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d102      	bne.n	8014cdc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd8:	61fb      	str	r3, [r7, #28]
 8014cda:	e017      	b.n	8014d0c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014cdc:	7cfb      	ldrb	r3, [r7, #19]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d014      	beq.n	8014d0c <udp_input+0xf4>
 8014ce2:	4b53      	ldr	r3, [pc, #332]	@ (8014e30 <udp_input+0x218>)
 8014ce4:	695b      	ldr	r3, [r3, #20]
 8014ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cea:	d10f      	bne.n	8014d0c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d008      	beq.n	8014d0c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cfc:	681a      	ldr	r2, [r3, #0]
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	3304      	adds	r3, #4
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d101      	bne.n	8014d0c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d0a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d0e:	8a9b      	ldrh	r3, [r3, #20]
 8014d10:	8a3a      	ldrh	r2, [r7, #16]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d118      	bne.n	8014d48 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d18:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d005      	beq.n	8014d2a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d20:	685a      	ldr	r2, [r3, #4]
 8014d22:	4b43      	ldr	r3, [pc, #268]	@ (8014e30 <udp_input+0x218>)
 8014d24:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d10e      	bne.n	8014d48 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014d2a:	6a3b      	ldr	r3, [r7, #32]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d014      	beq.n	8014d5a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d32:	68da      	ldr	r2, [r3, #12]
 8014d34:	6a3b      	ldr	r3, [r7, #32]
 8014d36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014d38:	4b3e      	ldr	r3, [pc, #248]	@ (8014e34 <udp_input+0x21c>)
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014d40:	4a3c      	ldr	r2, [pc, #240]	@ (8014e34 <udp_input+0x21c>)
 8014d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014d46:	e008      	b.n	8014d5a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d1a7      	bne.n	8014ca8 <udp_input+0x90>
 8014d58:	e000      	b.n	8014d5c <udp_input+0x144>
        break;
 8014d5a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d101      	bne.n	8014d66 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014d62:	69fb      	ldr	r3, [r7, #28]
 8014d64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d002      	beq.n	8014d72 <udp_input+0x15a>
    for_us = 1;
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	76fb      	strb	r3, [r7, #27]
 8014d70:	e00a      	b.n	8014d88 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	3304      	adds	r3, #4
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	4b2d      	ldr	r3, [pc, #180]	@ (8014e30 <udp_input+0x218>)
 8014d7a:	695b      	ldr	r3, [r3, #20]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	bf0c      	ite	eq
 8014d80:	2301      	moveq	r3, #1
 8014d82:	2300      	movne	r3, #0
 8014d84:	b2db      	uxtb	r3, r3
 8014d86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014d88:	7efb      	ldrb	r3, [r7, #27]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d041      	beq.n	8014e12 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014d8e:	2108      	movs	r1, #8
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f7fa f8d9 	bl	800ef48 <pbuf_remove_header>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d00a      	beq.n	8014db2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014d9c:	4b20      	ldr	r3, [pc, #128]	@ (8014e20 <udp_input+0x208>)
 8014d9e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014da2:	4925      	ldr	r1, [pc, #148]	@ (8014e38 <udp_input+0x220>)
 8014da4:	4820      	ldr	r0, [pc, #128]	@ (8014e28 <udp_input+0x210>)
 8014da6:	f003 fa27 	bl	80181f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7fa f952 	bl	800f054 <pbuf_free>
      goto end;
 8014db0:	e032      	b.n	8014e18 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d012      	beq.n	8014dde <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dba:	699b      	ldr	r3, [r3, #24]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d00a      	beq.n	8014dd6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc2:	699c      	ldr	r4, [r3, #24]
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc6:	69d8      	ldr	r0, [r3, #28]
 8014dc8:	8a3b      	ldrh	r3, [r7, #16]
 8014dca:	9300      	str	r3, [sp, #0]
 8014dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8014e3c <udp_input+0x224>)
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014dd2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014dd4:	e021      	b.n	8014e1a <udp_input+0x202>
        pbuf_free(p);
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f7fa f93c 	bl	800f054 <pbuf_free>
        goto end;
 8014ddc:	e01c      	b.n	8014e18 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014dde:	7cfb      	ldrb	r3, [r7, #19]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d112      	bne.n	8014e0a <udp_input+0x1f2>
 8014de4:	4b12      	ldr	r3, [pc, #72]	@ (8014e30 <udp_input+0x218>)
 8014de6:	695b      	ldr	r3, [r3, #20]
 8014de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014dec:	2be0      	cmp	r3, #224	@ 0xe0
 8014dee:	d00c      	beq.n	8014e0a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014df0:	4b0f      	ldr	r3, [pc, #60]	@ (8014e30 <udp_input+0x218>)
 8014df2:	899b      	ldrh	r3, [r3, #12]
 8014df4:	3308      	adds	r3, #8
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	b21b      	sxth	r3, r3
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f7fa f916 	bl	800f02e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014e02:	2103      	movs	r1, #3
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f001 f89b 	bl	8015f40 <icmp_dest_unreach>
      pbuf_free(p);
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7fa f922 	bl	800f054 <pbuf_free>
  return;
 8014e10:	e003      	b.n	8014e1a <udp_input+0x202>
    pbuf_free(p);
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7fa f91e 	bl	800f054 <pbuf_free>
  return;
 8014e18:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014e1a:	372c      	adds	r7, #44	@ 0x2c
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd90      	pop	{r4, r7, pc}
 8014e20:	0801b1b8 	.word	0x0801b1b8
 8014e24:	0801b25c 	.word	0x0801b25c
 8014e28:	0801b20c 	.word	0x0801b20c
 8014e2c:	0801b274 	.word	0x0801b274
 8014e30:	20009e1c 	.word	0x20009e1c
 8014e34:	2000d5cc 	.word	0x2000d5cc
 8014e38:	0801b290 	.word	0x0801b290
 8014e3c:	20009e2c 	.word	0x20009e2c

08014e40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014e40:	b480      	push	{r7}
 8014e42:	b085      	sub	sp, #20
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d01e      	beq.n	8014e8e <udp_netif_ip_addr_changed+0x4e>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d01a      	beq.n	8014e8e <udp_netif_ip_addr_changed+0x4e>
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d017      	beq.n	8014e8e <udp_netif_ip_addr_changed+0x4e>
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d013      	beq.n	8014e8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014e66:	4b0d      	ldr	r3, [pc, #52]	@ (8014e9c <udp_netif_ip_addr_changed+0x5c>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	60fb      	str	r3, [r7, #12]
 8014e6c:	e00c      	b.n	8014e88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d103      	bne.n	8014e82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	681a      	ldr	r2, [r3, #0]
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	68db      	ldr	r3, [r3, #12]
 8014e86:	60fb      	str	r3, [r7, #12]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d1ef      	bne.n	8014e6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014e8e:	bf00      	nop
 8014e90:	3714      	adds	r7, #20
 8014e92:	46bd      	mov	sp, r7
 8014e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e98:	4770      	bx	lr
 8014e9a:	bf00      	nop
 8014e9c:	2000d5cc 	.word	0x2000d5cc

08014ea0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014ea8:	4915      	ldr	r1, [pc, #84]	@ (8014f00 <etharp_free_entry+0x60>)
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	4613      	mov	r3, r2
 8014eae:	005b      	lsls	r3, r3, #1
 8014eb0:	4413      	add	r3, r2
 8014eb2:	00db      	lsls	r3, r3, #3
 8014eb4:	440b      	add	r3, r1
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d013      	beq.n	8014ee4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014ebc:	4910      	ldr	r1, [pc, #64]	@ (8014f00 <etharp_free_entry+0x60>)
 8014ebe:	687a      	ldr	r2, [r7, #4]
 8014ec0:	4613      	mov	r3, r2
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	4413      	add	r3, r2
 8014ec6:	00db      	lsls	r3, r3, #3
 8014ec8:	440b      	add	r3, r1
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7fa f8c1 	bl	800f054 <pbuf_free>
    arp_table[i].q = NULL;
 8014ed2:	490b      	ldr	r1, [pc, #44]	@ (8014f00 <etharp_free_entry+0x60>)
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	005b      	lsls	r3, r3, #1
 8014eda:	4413      	add	r3, r2
 8014edc:	00db      	lsls	r3, r3, #3
 8014ede:	440b      	add	r3, r1
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014ee4:	4906      	ldr	r1, [pc, #24]	@ (8014f00 <etharp_free_entry+0x60>)
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	4613      	mov	r3, r2
 8014eea:	005b      	lsls	r3, r3, #1
 8014eec:	4413      	add	r3, r2
 8014eee:	00db      	lsls	r3, r3, #3
 8014ef0:	440b      	add	r3, r1
 8014ef2:	3314      	adds	r3, #20
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014ef8:	bf00      	nop
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	2000d5d0 	.word	0x2000d5d0

08014f04 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	607b      	str	r3, [r7, #4]
 8014f0e:	e096      	b.n	801503e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014f10:	494f      	ldr	r1, [pc, #316]	@ (8015050 <etharp_tmr+0x14c>)
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	4613      	mov	r3, r2
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	4413      	add	r3, r2
 8014f1a:	00db      	lsls	r3, r3, #3
 8014f1c:	440b      	add	r3, r1
 8014f1e:	3314      	adds	r3, #20
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014f24:	78fb      	ldrb	r3, [r7, #3]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 8086 	beq.w	8015038 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014f2c:	4948      	ldr	r1, [pc, #288]	@ (8015050 <etharp_tmr+0x14c>)
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	4613      	mov	r3, r2
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	4413      	add	r3, r2
 8014f36:	00db      	lsls	r3, r3, #3
 8014f38:	440b      	add	r3, r1
 8014f3a:	3312      	adds	r3, #18
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	b298      	uxth	r0, r3
 8014f42:	4943      	ldr	r1, [pc, #268]	@ (8015050 <etharp_tmr+0x14c>)
 8014f44:	687a      	ldr	r2, [r7, #4]
 8014f46:	4613      	mov	r3, r2
 8014f48:	005b      	lsls	r3, r3, #1
 8014f4a:	4413      	add	r3, r2
 8014f4c:	00db      	lsls	r3, r3, #3
 8014f4e:	440b      	add	r3, r1
 8014f50:	3312      	adds	r3, #18
 8014f52:	4602      	mov	r2, r0
 8014f54:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f56:	493e      	ldr	r1, [pc, #248]	@ (8015050 <etharp_tmr+0x14c>)
 8014f58:	687a      	ldr	r2, [r7, #4]
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	005b      	lsls	r3, r3, #1
 8014f5e:	4413      	add	r3, r2
 8014f60:	00db      	lsls	r3, r3, #3
 8014f62:	440b      	add	r3, r1
 8014f64:	3312      	adds	r3, #18
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014f6c:	d215      	bcs.n	8014f9a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014f6e:	4938      	ldr	r1, [pc, #224]	@ (8015050 <etharp_tmr+0x14c>)
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	4613      	mov	r3, r2
 8014f74:	005b      	lsls	r3, r3, #1
 8014f76:	4413      	add	r3, r2
 8014f78:	00db      	lsls	r3, r3, #3
 8014f7a:	440b      	add	r3, r1
 8014f7c:	3314      	adds	r3, #20
 8014f7e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	d10e      	bne.n	8014fa2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014f84:	4932      	ldr	r1, [pc, #200]	@ (8015050 <etharp_tmr+0x14c>)
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	4613      	mov	r3, r2
 8014f8a:	005b      	lsls	r3, r3, #1
 8014f8c:	4413      	add	r3, r2
 8014f8e:	00db      	lsls	r3, r3, #3
 8014f90:	440b      	add	r3, r1
 8014f92:	3312      	adds	r3, #18
 8014f94:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014f96:	2b04      	cmp	r3, #4
 8014f98:	d903      	bls.n	8014fa2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f7ff ff80 	bl	8014ea0 <etharp_free_entry>
 8014fa0:	e04a      	b.n	8015038 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014fa2:	492b      	ldr	r1, [pc, #172]	@ (8015050 <etharp_tmr+0x14c>)
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	005b      	lsls	r3, r3, #1
 8014faa:	4413      	add	r3, r2
 8014fac:	00db      	lsls	r3, r3, #3
 8014fae:	440b      	add	r3, r1
 8014fb0:	3314      	adds	r3, #20
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	2b03      	cmp	r3, #3
 8014fb6:	d10a      	bne.n	8014fce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014fb8:	4925      	ldr	r1, [pc, #148]	@ (8015050 <etharp_tmr+0x14c>)
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	005b      	lsls	r3, r3, #1
 8014fc0:	4413      	add	r3, r2
 8014fc2:	00db      	lsls	r3, r3, #3
 8014fc4:	440b      	add	r3, r1
 8014fc6:	3314      	adds	r3, #20
 8014fc8:	2204      	movs	r2, #4
 8014fca:	701a      	strb	r2, [r3, #0]
 8014fcc:	e034      	b.n	8015038 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014fce:	4920      	ldr	r1, [pc, #128]	@ (8015050 <etharp_tmr+0x14c>)
 8014fd0:	687a      	ldr	r2, [r7, #4]
 8014fd2:	4613      	mov	r3, r2
 8014fd4:	005b      	lsls	r3, r3, #1
 8014fd6:	4413      	add	r3, r2
 8014fd8:	00db      	lsls	r3, r3, #3
 8014fda:	440b      	add	r3, r1
 8014fdc:	3314      	adds	r3, #20
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	2b04      	cmp	r3, #4
 8014fe2:	d10a      	bne.n	8014ffa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014fe4:	491a      	ldr	r1, [pc, #104]	@ (8015050 <etharp_tmr+0x14c>)
 8014fe6:	687a      	ldr	r2, [r7, #4]
 8014fe8:	4613      	mov	r3, r2
 8014fea:	005b      	lsls	r3, r3, #1
 8014fec:	4413      	add	r3, r2
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	440b      	add	r3, r1
 8014ff2:	3314      	adds	r3, #20
 8014ff4:	2202      	movs	r2, #2
 8014ff6:	701a      	strb	r2, [r3, #0]
 8014ff8:	e01e      	b.n	8015038 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014ffa:	4915      	ldr	r1, [pc, #84]	@ (8015050 <etharp_tmr+0x14c>)
 8014ffc:	687a      	ldr	r2, [r7, #4]
 8014ffe:	4613      	mov	r3, r2
 8015000:	005b      	lsls	r3, r3, #1
 8015002:	4413      	add	r3, r2
 8015004:	00db      	lsls	r3, r3, #3
 8015006:	440b      	add	r3, r1
 8015008:	3314      	adds	r3, #20
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	2b01      	cmp	r3, #1
 801500e:	d113      	bne.n	8015038 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015010:	490f      	ldr	r1, [pc, #60]	@ (8015050 <etharp_tmr+0x14c>)
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	4613      	mov	r3, r2
 8015016:	005b      	lsls	r3, r3, #1
 8015018:	4413      	add	r3, r2
 801501a:	00db      	lsls	r3, r3, #3
 801501c:	440b      	add	r3, r1
 801501e:	3308      	adds	r3, #8
 8015020:	6818      	ldr	r0, [r3, #0]
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	4613      	mov	r3, r2
 8015026:	005b      	lsls	r3, r3, #1
 8015028:	4413      	add	r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	4a08      	ldr	r2, [pc, #32]	@ (8015050 <etharp_tmr+0x14c>)
 801502e:	4413      	add	r3, r2
 8015030:	3304      	adds	r3, #4
 8015032:	4619      	mov	r1, r3
 8015034:	f000 fe6e 	bl	8015d14 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3301      	adds	r3, #1
 801503c:	607b      	str	r3, [r7, #4]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2b09      	cmp	r3, #9
 8015042:	f77f af65 	ble.w	8014f10 <etharp_tmr+0xc>
      }
    }
  }
}
 8015046:	bf00      	nop
 8015048:	bf00      	nop
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	2000d5d0 	.word	0x2000d5d0

08015054 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b08a      	sub	sp, #40	@ 0x28
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	460b      	mov	r3, r1
 801505e:	607a      	str	r2, [r7, #4]
 8015060:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015062:	230a      	movs	r3, #10
 8015064:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015066:	230a      	movs	r3, #10
 8015068:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801506a:	230a      	movs	r3, #10
 801506c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801506e:	2300      	movs	r3, #0
 8015070:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015072:	230a      	movs	r3, #10
 8015074:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015076:	2300      	movs	r3, #0
 8015078:	83bb      	strh	r3, [r7, #28]
 801507a:	2300      	movs	r3, #0
 801507c:	837b      	strh	r3, [r7, #26]
 801507e:	2300      	movs	r3, #0
 8015080:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015082:	2300      	movs	r3, #0
 8015084:	843b      	strh	r3, [r7, #32]
 8015086:	e0ae      	b.n	80151e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015088:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801508c:	49a6      	ldr	r1, [pc, #664]	@ (8015328 <etharp_find_entry+0x2d4>)
 801508e:	4613      	mov	r3, r2
 8015090:	005b      	lsls	r3, r3, #1
 8015092:	4413      	add	r3, r2
 8015094:	00db      	lsls	r3, r3, #3
 8015096:	440b      	add	r3, r1
 8015098:	3314      	adds	r3, #20
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801509e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80150a2:	2b0a      	cmp	r3, #10
 80150a4:	d105      	bne.n	80150b2 <etharp_find_entry+0x5e>
 80150a6:	7dfb      	ldrb	r3, [r7, #23]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d102      	bne.n	80150b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80150ac:	8c3b      	ldrh	r3, [r7, #32]
 80150ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80150b0:	e095      	b.n	80151de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80150b2:	7dfb      	ldrb	r3, [r7, #23]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f000 8092 	beq.w	80151de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80150ba:	7dfb      	ldrb	r3, [r7, #23]
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d009      	beq.n	80150d4 <etharp_find_entry+0x80>
 80150c0:	7dfb      	ldrb	r3, [r7, #23]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d806      	bhi.n	80150d4 <etharp_find_entry+0x80>
 80150c6:	4b99      	ldr	r3, [pc, #612]	@ (801532c <etharp_find_entry+0x2d8>)
 80150c8:	f240 1223 	movw	r2, #291	@ 0x123
 80150cc:	4998      	ldr	r1, [pc, #608]	@ (8015330 <etharp_find_entry+0x2dc>)
 80150ce:	4899      	ldr	r0, [pc, #612]	@ (8015334 <etharp_find_entry+0x2e0>)
 80150d0:	f003 f892 	bl	80181f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d020      	beq.n	801511c <etharp_find_entry+0xc8>
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	6819      	ldr	r1, [r3, #0]
 80150de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150e2:	4891      	ldr	r0, [pc, #580]	@ (8015328 <etharp_find_entry+0x2d4>)
 80150e4:	4613      	mov	r3, r2
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	4413      	add	r3, r2
 80150ea:	00db      	lsls	r3, r3, #3
 80150ec:	4403      	add	r3, r0
 80150ee:	3304      	adds	r3, #4
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	4299      	cmp	r1, r3
 80150f4:	d112      	bne.n	801511c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d00c      	beq.n	8015116 <etharp_find_entry+0xc2>
 80150fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015100:	4989      	ldr	r1, [pc, #548]	@ (8015328 <etharp_find_entry+0x2d4>)
 8015102:	4613      	mov	r3, r2
 8015104:	005b      	lsls	r3, r3, #1
 8015106:	4413      	add	r3, r2
 8015108:	00db      	lsls	r3, r3, #3
 801510a:	440b      	add	r3, r1
 801510c:	3308      	adds	r3, #8
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	687a      	ldr	r2, [r7, #4]
 8015112:	429a      	cmp	r2, r3
 8015114:	d102      	bne.n	801511c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015116:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801511a:	e100      	b.n	801531e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801511c:	7dfb      	ldrb	r3, [r7, #23]
 801511e:	2b01      	cmp	r3, #1
 8015120:	d140      	bne.n	80151a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015126:	4980      	ldr	r1, [pc, #512]	@ (8015328 <etharp_find_entry+0x2d4>)
 8015128:	4613      	mov	r3, r2
 801512a:	005b      	lsls	r3, r3, #1
 801512c:	4413      	add	r3, r2
 801512e:	00db      	lsls	r3, r3, #3
 8015130:	440b      	add	r3, r1
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d01a      	beq.n	801516e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801513c:	497a      	ldr	r1, [pc, #488]	@ (8015328 <etharp_find_entry+0x2d4>)
 801513e:	4613      	mov	r3, r2
 8015140:	005b      	lsls	r3, r3, #1
 8015142:	4413      	add	r3, r2
 8015144:	00db      	lsls	r3, r3, #3
 8015146:	440b      	add	r3, r1
 8015148:	3312      	adds	r3, #18
 801514a:	881b      	ldrh	r3, [r3, #0]
 801514c:	8bba      	ldrh	r2, [r7, #28]
 801514e:	429a      	cmp	r2, r3
 8015150:	d845      	bhi.n	80151de <etharp_find_entry+0x18a>
            old_queue = i;
 8015152:	8c3b      	ldrh	r3, [r7, #32]
 8015154:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801515a:	4973      	ldr	r1, [pc, #460]	@ (8015328 <etharp_find_entry+0x2d4>)
 801515c:	4613      	mov	r3, r2
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	00db      	lsls	r3, r3, #3
 8015164:	440b      	add	r3, r1
 8015166:	3312      	adds	r3, #18
 8015168:	881b      	ldrh	r3, [r3, #0]
 801516a:	83bb      	strh	r3, [r7, #28]
 801516c:	e037      	b.n	80151de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801516e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015172:	496d      	ldr	r1, [pc, #436]	@ (8015328 <etharp_find_entry+0x2d4>)
 8015174:	4613      	mov	r3, r2
 8015176:	005b      	lsls	r3, r3, #1
 8015178:	4413      	add	r3, r2
 801517a:	00db      	lsls	r3, r3, #3
 801517c:	440b      	add	r3, r1
 801517e:	3312      	adds	r3, #18
 8015180:	881b      	ldrh	r3, [r3, #0]
 8015182:	8b7a      	ldrh	r2, [r7, #26]
 8015184:	429a      	cmp	r2, r3
 8015186:	d82a      	bhi.n	80151de <etharp_find_entry+0x18a>
            old_pending = i;
 8015188:	8c3b      	ldrh	r3, [r7, #32]
 801518a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801518c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015190:	4965      	ldr	r1, [pc, #404]	@ (8015328 <etharp_find_entry+0x2d4>)
 8015192:	4613      	mov	r3, r2
 8015194:	005b      	lsls	r3, r3, #1
 8015196:	4413      	add	r3, r2
 8015198:	00db      	lsls	r3, r3, #3
 801519a:	440b      	add	r3, r1
 801519c:	3312      	adds	r3, #18
 801519e:	881b      	ldrh	r3, [r3, #0]
 80151a0:	837b      	strh	r3, [r7, #26]
 80151a2:	e01c      	b.n	80151de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80151a4:	7dfb      	ldrb	r3, [r7, #23]
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	d919      	bls.n	80151de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80151aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151ae:	495e      	ldr	r1, [pc, #376]	@ (8015328 <etharp_find_entry+0x2d4>)
 80151b0:	4613      	mov	r3, r2
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	440b      	add	r3, r1
 80151ba:	3312      	adds	r3, #18
 80151bc:	881b      	ldrh	r3, [r3, #0]
 80151be:	8b3a      	ldrh	r2, [r7, #24]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d80c      	bhi.n	80151de <etharp_find_entry+0x18a>
            old_stable = i;
 80151c4:	8c3b      	ldrh	r3, [r7, #32]
 80151c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80151c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151cc:	4956      	ldr	r1, [pc, #344]	@ (8015328 <etharp_find_entry+0x2d4>)
 80151ce:	4613      	mov	r3, r2
 80151d0:	005b      	lsls	r3, r3, #1
 80151d2:	4413      	add	r3, r2
 80151d4:	00db      	lsls	r3, r3, #3
 80151d6:	440b      	add	r3, r1
 80151d8:	3312      	adds	r3, #18
 80151da:	881b      	ldrh	r3, [r3, #0]
 80151dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151de:	8c3b      	ldrh	r3, [r7, #32]
 80151e0:	3301      	adds	r3, #1
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	843b      	strh	r3, [r7, #32]
 80151e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80151ea:	2b09      	cmp	r3, #9
 80151ec:	f77f af4c 	ble.w	8015088 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80151f0:	7afb      	ldrb	r3, [r7, #11]
 80151f2:	f003 0302 	and.w	r3, r3, #2
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d108      	bne.n	801520c <etharp_find_entry+0x1b8>
 80151fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80151fe:	2b0a      	cmp	r3, #10
 8015200:	d107      	bne.n	8015212 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015202:	7afb      	ldrb	r3, [r7, #11]
 8015204:	f003 0301 	and.w	r3, r3, #1
 8015208:	2b00      	cmp	r3, #0
 801520a:	d102      	bne.n	8015212 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801520c:	f04f 33ff 	mov.w	r3, #4294967295
 8015210:	e085      	b.n	801531e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015212:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015216:	2b09      	cmp	r3, #9
 8015218:	dc02      	bgt.n	8015220 <etharp_find_entry+0x1cc>
    i = empty;
 801521a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801521c:	843b      	strh	r3, [r7, #32]
 801521e:	e039      	b.n	8015294 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015220:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015224:	2b09      	cmp	r3, #9
 8015226:	dc14      	bgt.n	8015252 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801522a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801522c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015230:	493d      	ldr	r1, [pc, #244]	@ (8015328 <etharp_find_entry+0x2d4>)
 8015232:	4613      	mov	r3, r2
 8015234:	005b      	lsls	r3, r3, #1
 8015236:	4413      	add	r3, r2
 8015238:	00db      	lsls	r3, r3, #3
 801523a:	440b      	add	r3, r1
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d018      	beq.n	8015274 <etharp_find_entry+0x220>
 8015242:	4b3a      	ldr	r3, [pc, #232]	@ (801532c <etharp_find_entry+0x2d8>)
 8015244:	f240 126d 	movw	r2, #365	@ 0x16d
 8015248:	493b      	ldr	r1, [pc, #236]	@ (8015338 <etharp_find_entry+0x2e4>)
 801524a:	483a      	ldr	r0, [pc, #232]	@ (8015334 <etharp_find_entry+0x2e0>)
 801524c:	f002 ffd4 	bl	80181f8 <iprintf>
 8015250:	e010      	b.n	8015274 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015252:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015256:	2b09      	cmp	r3, #9
 8015258:	dc02      	bgt.n	8015260 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801525a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801525c:	843b      	strh	r3, [r7, #32]
 801525e:	e009      	b.n	8015274 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015260:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015264:	2b09      	cmp	r3, #9
 8015266:	dc02      	bgt.n	801526e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015268:	8bfb      	ldrh	r3, [r7, #30]
 801526a:	843b      	strh	r3, [r7, #32]
 801526c:	e002      	b.n	8015274 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801526e:	f04f 33ff 	mov.w	r3, #4294967295
 8015272:	e054      	b.n	801531e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015274:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015278:	2b09      	cmp	r3, #9
 801527a:	dd06      	ble.n	801528a <etharp_find_entry+0x236>
 801527c:	4b2b      	ldr	r3, [pc, #172]	@ (801532c <etharp_find_entry+0x2d8>)
 801527e:	f240 127f 	movw	r2, #383	@ 0x17f
 8015282:	492e      	ldr	r1, [pc, #184]	@ (801533c <etharp_find_entry+0x2e8>)
 8015284:	482b      	ldr	r0, [pc, #172]	@ (8015334 <etharp_find_entry+0x2e0>)
 8015286:	f002 ffb7 	bl	80181f8 <iprintf>
    etharp_free_entry(i);
 801528a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801528e:	4618      	mov	r0, r3
 8015290:	f7ff fe06 	bl	8014ea0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015294:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015298:	2b09      	cmp	r3, #9
 801529a:	dd06      	ble.n	80152aa <etharp_find_entry+0x256>
 801529c:	4b23      	ldr	r3, [pc, #140]	@ (801532c <etharp_find_entry+0x2d8>)
 801529e:	f240 1283 	movw	r2, #387	@ 0x183
 80152a2:	4926      	ldr	r1, [pc, #152]	@ (801533c <etharp_find_entry+0x2e8>)
 80152a4:	4823      	ldr	r0, [pc, #140]	@ (8015334 <etharp_find_entry+0x2e0>)
 80152a6:	f002 ffa7 	bl	80181f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80152aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ae:	491e      	ldr	r1, [pc, #120]	@ (8015328 <etharp_find_entry+0x2d4>)
 80152b0:	4613      	mov	r3, r2
 80152b2:	005b      	lsls	r3, r3, #1
 80152b4:	4413      	add	r3, r2
 80152b6:	00db      	lsls	r3, r3, #3
 80152b8:	440b      	add	r3, r1
 80152ba:	3314      	adds	r3, #20
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d006      	beq.n	80152d0 <etharp_find_entry+0x27c>
 80152c2:	4b1a      	ldr	r3, [pc, #104]	@ (801532c <etharp_find_entry+0x2d8>)
 80152c4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80152c8:	491d      	ldr	r1, [pc, #116]	@ (8015340 <etharp_find_entry+0x2ec>)
 80152ca:	481a      	ldr	r0, [pc, #104]	@ (8015334 <etharp_find_entry+0x2e0>)
 80152cc:	f002 ff94 	bl	80181f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d00b      	beq.n	80152ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80152d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	6819      	ldr	r1, [r3, #0]
 80152de:	4812      	ldr	r0, [pc, #72]	@ (8015328 <etharp_find_entry+0x2d4>)
 80152e0:	4613      	mov	r3, r2
 80152e2:	005b      	lsls	r3, r3, #1
 80152e4:	4413      	add	r3, r2
 80152e6:	00db      	lsls	r3, r3, #3
 80152e8:	4403      	add	r3, r0
 80152ea:	3304      	adds	r3, #4
 80152ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80152ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152f2:	490d      	ldr	r1, [pc, #52]	@ (8015328 <etharp_find_entry+0x2d4>)
 80152f4:	4613      	mov	r3, r2
 80152f6:	005b      	lsls	r3, r3, #1
 80152f8:	4413      	add	r3, r2
 80152fa:	00db      	lsls	r3, r3, #3
 80152fc:	440b      	add	r3, r1
 80152fe:	3312      	adds	r3, #18
 8015300:	2200      	movs	r2, #0
 8015302:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015304:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015308:	4907      	ldr	r1, [pc, #28]	@ (8015328 <etharp_find_entry+0x2d4>)
 801530a:	4613      	mov	r3, r2
 801530c:	005b      	lsls	r3, r3, #1
 801530e:	4413      	add	r3, r2
 8015310:	00db      	lsls	r3, r3, #3
 8015312:	440b      	add	r3, r1
 8015314:	3308      	adds	r3, #8
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801531a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801531e:	4618      	mov	r0, r3
 8015320:	3728      	adds	r7, #40	@ 0x28
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop
 8015328:	2000d5d0 	.word	0x2000d5d0
 801532c:	0801b51c 	.word	0x0801b51c
 8015330:	0801b554 	.word	0x0801b554
 8015334:	0801b594 	.word	0x0801b594
 8015338:	0801b5bc 	.word	0x0801b5bc
 801533c:	0801b5d4 	.word	0x0801b5d4
 8015340:	0801b5e8 	.word	0x0801b5e8

08015344 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b088      	sub	sp, #32
 8015348:	af02      	add	r7, sp, #8
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015358:	2b06      	cmp	r3, #6
 801535a:	d006      	beq.n	801536a <etharp_update_arp_entry+0x26>
 801535c:	4b48      	ldr	r3, [pc, #288]	@ (8015480 <etharp_update_arp_entry+0x13c>)
 801535e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015362:	4948      	ldr	r1, [pc, #288]	@ (8015484 <etharp_update_arp_entry+0x140>)
 8015364:	4848      	ldr	r0, [pc, #288]	@ (8015488 <etharp_update_arp_entry+0x144>)
 8015366:	f002 ff47 	bl	80181f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d012      	beq.n	8015396 <etharp_update_arp_entry+0x52>
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00e      	beq.n	8015396 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	68f9      	ldr	r1, [r7, #12]
 801537e:	4618      	mov	r0, r3
 8015380:	f001 f8fe 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8015384:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015386:	2b00      	cmp	r3, #0
 8015388:	d105      	bne.n	8015396 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015392:	2be0      	cmp	r3, #224	@ 0xe0
 8015394:	d102      	bne.n	801539c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015396:	f06f 030f 	mvn.w	r3, #15
 801539a:	e06c      	b.n	8015476 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801539c:	78fb      	ldrb	r3, [r7, #3]
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	4619      	mov	r1, r3
 80153a2:	68b8      	ldr	r0, [r7, #8]
 80153a4:	f7ff fe56 	bl	8015054 <etharp_find_entry>
 80153a8:	4603      	mov	r3, r0
 80153aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80153ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	da02      	bge.n	80153ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80153b4:	8afb      	ldrh	r3, [r7, #22]
 80153b6:	b25b      	sxtb	r3, r3
 80153b8:	e05d      	b.n	8015476 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80153ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153be:	4933      	ldr	r1, [pc, #204]	@ (801548c <etharp_update_arp_entry+0x148>)
 80153c0:	4613      	mov	r3, r2
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	4413      	add	r3, r2
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	440b      	add	r3, r1
 80153ca:	3314      	adds	r3, #20
 80153cc:	2202      	movs	r2, #2
 80153ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80153d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153d4:	492d      	ldr	r1, [pc, #180]	@ (801548c <etharp_update_arp_entry+0x148>)
 80153d6:	4613      	mov	r3, r2
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	4413      	add	r3, r2
 80153dc:	00db      	lsls	r3, r3, #3
 80153de:	440b      	add	r3, r1
 80153e0:	3308      	adds	r3, #8
 80153e2:	68fa      	ldr	r2, [r7, #12]
 80153e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80153e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153ea:	4613      	mov	r3, r2
 80153ec:	005b      	lsls	r3, r3, #1
 80153ee:	4413      	add	r3, r2
 80153f0:	00db      	lsls	r3, r3, #3
 80153f2:	3308      	adds	r3, #8
 80153f4:	4a25      	ldr	r2, [pc, #148]	@ (801548c <etharp_update_arp_entry+0x148>)
 80153f6:	4413      	add	r3, r2
 80153f8:	3304      	adds	r3, #4
 80153fa:	2206      	movs	r2, #6
 80153fc:	6879      	ldr	r1, [r7, #4]
 80153fe:	4618      	mov	r0, r3
 8015400:	f003 f82b 	bl	801845a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015404:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015408:	4920      	ldr	r1, [pc, #128]	@ (801548c <etharp_update_arp_entry+0x148>)
 801540a:	4613      	mov	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	4413      	add	r3, r2
 8015410:	00db      	lsls	r3, r3, #3
 8015412:	440b      	add	r3, r1
 8015414:	3312      	adds	r3, #18
 8015416:	2200      	movs	r2, #0
 8015418:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801541a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801541e:	491b      	ldr	r1, [pc, #108]	@ (801548c <etharp_update_arp_entry+0x148>)
 8015420:	4613      	mov	r3, r2
 8015422:	005b      	lsls	r3, r3, #1
 8015424:	4413      	add	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	440b      	add	r3, r1
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d021      	beq.n	8015474 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015430:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015434:	4915      	ldr	r1, [pc, #84]	@ (801548c <etharp_update_arp_entry+0x148>)
 8015436:	4613      	mov	r3, r2
 8015438:	005b      	lsls	r3, r3, #1
 801543a:	4413      	add	r3, r2
 801543c:	00db      	lsls	r3, r3, #3
 801543e:	440b      	add	r3, r1
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015444:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015448:	4910      	ldr	r1, [pc, #64]	@ (801548c <etharp_update_arp_entry+0x148>)
 801544a:	4613      	mov	r3, r2
 801544c:	005b      	lsls	r3, r3, #1
 801544e:	4413      	add	r3, r2
 8015450:	00db      	lsls	r3, r3, #3
 8015452:	440b      	add	r3, r1
 8015454:	2200      	movs	r2, #0
 8015456:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801545e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015462:	9300      	str	r3, [sp, #0]
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	6939      	ldr	r1, [r7, #16]
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f001 ff97 	bl	801739c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801546e:	6938      	ldr	r0, [r7, #16]
 8015470:	f7f9 fdf0 	bl	800f054 <pbuf_free>
  }
  return ERR_OK;
 8015474:	2300      	movs	r3, #0
}
 8015476:	4618      	mov	r0, r3
 8015478:	3718      	adds	r7, #24
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	0801b51c 	.word	0x0801b51c
 8015484:	0801b614 	.word	0x0801b614
 8015488:	0801b594 	.word	0x0801b594
 801548c:	2000d5d0 	.word	0x2000d5d0

08015490 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015498:	2300      	movs	r3, #0
 801549a:	60fb      	str	r3, [r7, #12]
 801549c:	e01e      	b.n	80154dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801549e:	4913      	ldr	r1, [pc, #76]	@ (80154ec <etharp_cleanup_netif+0x5c>)
 80154a0:	68fa      	ldr	r2, [r7, #12]
 80154a2:	4613      	mov	r3, r2
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	4413      	add	r3, r2
 80154a8:	00db      	lsls	r3, r3, #3
 80154aa:	440b      	add	r3, r1
 80154ac:	3314      	adds	r3, #20
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80154b2:	7afb      	ldrb	r3, [r7, #11]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d00e      	beq.n	80154d6 <etharp_cleanup_netif+0x46>
 80154b8:	490c      	ldr	r1, [pc, #48]	@ (80154ec <etharp_cleanup_netif+0x5c>)
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	4613      	mov	r3, r2
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	4413      	add	r3, r2
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	440b      	add	r3, r1
 80154c6:	3308      	adds	r3, #8
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	687a      	ldr	r2, [r7, #4]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d102      	bne.n	80154d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f7ff fce5 	bl	8014ea0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	3301      	adds	r3, #1
 80154da:	60fb      	str	r3, [r7, #12]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	2b09      	cmp	r3, #9
 80154e0:	dddd      	ble.n	801549e <etharp_cleanup_netif+0xe>
    }
  }
}
 80154e2:	bf00      	nop
 80154e4:	bf00      	nop
 80154e6:	3710      	adds	r7, #16
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	2000d5d0 	.word	0x2000d5d0

080154f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80154f0:	b5b0      	push	{r4, r5, r7, lr}
 80154f2:	b08a      	sub	sp, #40	@ 0x28
 80154f4:	af04      	add	r7, sp, #16
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d107      	bne.n	8015510 <etharp_input+0x20>
 8015500:	4b3d      	ldr	r3, [pc, #244]	@ (80155f8 <etharp_input+0x108>)
 8015502:	f240 228a 	movw	r2, #650	@ 0x28a
 8015506:	493d      	ldr	r1, [pc, #244]	@ (80155fc <etharp_input+0x10c>)
 8015508:	483d      	ldr	r0, [pc, #244]	@ (8015600 <etharp_input+0x110>)
 801550a:	f002 fe75 	bl	80181f8 <iprintf>
 801550e:	e06f      	b.n	80155f0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	685b      	ldr	r3, [r3, #4]
 8015514:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	881b      	ldrh	r3, [r3, #0]
 801551a:	b29b      	uxth	r3, r3
 801551c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015520:	d10c      	bne.n	801553c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015526:	2b06      	cmp	r3, #6
 8015528:	d108      	bne.n	801553c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801552e:	2b04      	cmp	r3, #4
 8015530:	d104      	bne.n	801553c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	885b      	ldrh	r3, [r3, #2]
 8015536:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015538:	2b08      	cmp	r3, #8
 801553a:	d003      	beq.n	8015544 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f7f9 fd89 	bl	800f054 <pbuf_free>
    return;
 8015542:	e055      	b.n	80155f0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	330e      	adds	r3, #14
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	3318      	adds	r3, #24
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	3304      	adds	r3, #4
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d102      	bne.n	8015564 <etharp_input+0x74>
    for_us = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	75fb      	strb	r3, [r7, #23]
 8015562:	e009      	b.n	8015578 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015564:	68ba      	ldr	r2, [r7, #8]
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	3304      	adds	r3, #4
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	429a      	cmp	r2, r3
 801556e:	bf0c      	ite	eq
 8015570:	2301      	moveq	r3, #1
 8015572:	2300      	movne	r3, #0
 8015574:	b2db      	uxtb	r3, r3
 8015576:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	f103 0208 	add.w	r2, r3, #8
 801557e:	7dfb      	ldrb	r3, [r7, #23]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d001      	beq.n	8015588 <etharp_input+0x98>
 8015584:	2301      	movs	r3, #1
 8015586:	e000      	b.n	801558a <etharp_input+0x9a>
 8015588:	2302      	movs	r3, #2
 801558a:	f107 010c 	add.w	r1, r7, #12
 801558e:	6838      	ldr	r0, [r7, #0]
 8015590:	f7ff fed8 	bl	8015344 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	88db      	ldrh	r3, [r3, #6]
 8015598:	b29b      	uxth	r3, r3
 801559a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801559e:	d003      	beq.n	80155a8 <etharp_input+0xb8>
 80155a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155a4:	d01e      	beq.n	80155e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80155a6:	e020      	b.n	80155ea <etharp_input+0xfa>
      if (for_us) {
 80155a8:	7dfb      	ldrb	r3, [r7, #23]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d01c      	beq.n	80155e8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80155c4:	693a      	ldr	r2, [r7, #16]
 80155c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80155c8:	2102      	movs	r1, #2
 80155ca:	9103      	str	r1, [sp, #12]
 80155cc:	f107 010c 	add.w	r1, r7, #12
 80155d0:	9102      	str	r1, [sp, #8]
 80155d2:	9201      	str	r2, [sp, #4]
 80155d4:	9300      	str	r3, [sp, #0]
 80155d6:	462b      	mov	r3, r5
 80155d8:	4622      	mov	r2, r4
 80155da:	4601      	mov	r1, r0
 80155dc:	6838      	ldr	r0, [r7, #0]
 80155de:	f000 faeb 	bl	8015bb8 <etharp_raw>
      break;
 80155e2:	e001      	b.n	80155e8 <etharp_input+0xf8>
      break;
 80155e4:	bf00      	nop
 80155e6:	e000      	b.n	80155ea <etharp_input+0xfa>
      break;
 80155e8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f7f9 fd32 	bl	800f054 <pbuf_free>
}
 80155f0:	3718      	adds	r7, #24
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bdb0      	pop	{r4, r5, r7, pc}
 80155f6:	bf00      	nop
 80155f8:	0801b51c 	.word	0x0801b51c
 80155fc:	0801b66c 	.word	0x0801b66c
 8015600:	0801b594 	.word	0x0801b594

08015604 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af02      	add	r7, sp, #8
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	4613      	mov	r3, r2
 8015610:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015612:	79fa      	ldrb	r2, [r7, #7]
 8015614:	4944      	ldr	r1, [pc, #272]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 8015616:	4613      	mov	r3, r2
 8015618:	005b      	lsls	r3, r3, #1
 801561a:	4413      	add	r3, r2
 801561c:	00db      	lsls	r3, r3, #3
 801561e:	440b      	add	r3, r1
 8015620:	3314      	adds	r3, #20
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	2b01      	cmp	r3, #1
 8015626:	d806      	bhi.n	8015636 <etharp_output_to_arp_index+0x32>
 8015628:	4b40      	ldr	r3, [pc, #256]	@ (801572c <etharp_output_to_arp_index+0x128>)
 801562a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801562e:	4940      	ldr	r1, [pc, #256]	@ (8015730 <etharp_output_to_arp_index+0x12c>)
 8015630:	4840      	ldr	r0, [pc, #256]	@ (8015734 <etharp_output_to_arp_index+0x130>)
 8015632:	f002 fde1 	bl	80181f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015636:	79fa      	ldrb	r2, [r7, #7]
 8015638:	493b      	ldr	r1, [pc, #236]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 801563a:	4613      	mov	r3, r2
 801563c:	005b      	lsls	r3, r3, #1
 801563e:	4413      	add	r3, r2
 8015640:	00db      	lsls	r3, r3, #3
 8015642:	440b      	add	r3, r1
 8015644:	3314      	adds	r3, #20
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	2b02      	cmp	r3, #2
 801564a:	d153      	bne.n	80156f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801564c:	79fa      	ldrb	r2, [r7, #7]
 801564e:	4936      	ldr	r1, [pc, #216]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 8015650:	4613      	mov	r3, r2
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	4413      	add	r3, r2
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	440b      	add	r3, r1
 801565a:	3312      	adds	r3, #18
 801565c:	881b      	ldrh	r3, [r3, #0]
 801565e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8015662:	d919      	bls.n	8015698 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015664:	79fa      	ldrb	r2, [r7, #7]
 8015666:	4613      	mov	r3, r2
 8015668:	005b      	lsls	r3, r3, #1
 801566a:	4413      	add	r3, r2
 801566c:	00db      	lsls	r3, r3, #3
 801566e:	4a2e      	ldr	r2, [pc, #184]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 8015670:	4413      	add	r3, r2
 8015672:	3304      	adds	r3, #4
 8015674:	4619      	mov	r1, r3
 8015676:	68f8      	ldr	r0, [r7, #12]
 8015678:	f000 fb4c 	bl	8015d14 <etharp_request>
 801567c:	4603      	mov	r3, r0
 801567e:	2b00      	cmp	r3, #0
 8015680:	d138      	bne.n	80156f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015682:	79fa      	ldrb	r2, [r7, #7]
 8015684:	4928      	ldr	r1, [pc, #160]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 8015686:	4613      	mov	r3, r2
 8015688:	005b      	lsls	r3, r3, #1
 801568a:	4413      	add	r3, r2
 801568c:	00db      	lsls	r3, r3, #3
 801568e:	440b      	add	r3, r1
 8015690:	3314      	adds	r3, #20
 8015692:	2203      	movs	r2, #3
 8015694:	701a      	strb	r2, [r3, #0]
 8015696:	e02d      	b.n	80156f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015698:	79fa      	ldrb	r2, [r7, #7]
 801569a:	4923      	ldr	r1, [pc, #140]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 801569c:	4613      	mov	r3, r2
 801569e:	005b      	lsls	r3, r3, #1
 80156a0:	4413      	add	r3, r2
 80156a2:	00db      	lsls	r3, r3, #3
 80156a4:	440b      	add	r3, r1
 80156a6:	3312      	adds	r3, #18
 80156a8:	881b      	ldrh	r3, [r3, #0]
 80156aa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80156ae:	d321      	bcc.n	80156f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80156b0:	79fa      	ldrb	r2, [r7, #7]
 80156b2:	4613      	mov	r3, r2
 80156b4:	005b      	lsls	r3, r3, #1
 80156b6:	4413      	add	r3, r2
 80156b8:	00db      	lsls	r3, r3, #3
 80156ba:	4a1b      	ldr	r2, [pc, #108]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 80156bc:	4413      	add	r3, r2
 80156be:	1d19      	adds	r1, r3, #4
 80156c0:	79fa      	ldrb	r2, [r7, #7]
 80156c2:	4613      	mov	r3, r2
 80156c4:	005b      	lsls	r3, r3, #1
 80156c6:	4413      	add	r3, r2
 80156c8:	00db      	lsls	r3, r3, #3
 80156ca:	3308      	adds	r3, #8
 80156cc:	4a16      	ldr	r2, [pc, #88]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 80156ce:	4413      	add	r3, r2
 80156d0:	3304      	adds	r3, #4
 80156d2:	461a      	mov	r2, r3
 80156d4:	68f8      	ldr	r0, [r7, #12]
 80156d6:	f000 fafb 	bl	8015cd0 <etharp_request_dst>
 80156da:	4603      	mov	r3, r0
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d109      	bne.n	80156f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80156e0:	79fa      	ldrb	r2, [r7, #7]
 80156e2:	4911      	ldr	r1, [pc, #68]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 80156e4:	4613      	mov	r3, r2
 80156e6:	005b      	lsls	r3, r3, #1
 80156e8:	4413      	add	r3, r2
 80156ea:	00db      	lsls	r3, r3, #3
 80156ec:	440b      	add	r3, r1
 80156ee:	3314      	adds	r3, #20
 80156f0:	2203      	movs	r2, #3
 80156f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80156fa:	79fa      	ldrb	r2, [r7, #7]
 80156fc:	4613      	mov	r3, r2
 80156fe:	005b      	lsls	r3, r3, #1
 8015700:	4413      	add	r3, r2
 8015702:	00db      	lsls	r3, r3, #3
 8015704:	3308      	adds	r3, #8
 8015706:	4a08      	ldr	r2, [pc, #32]	@ (8015728 <etharp_output_to_arp_index+0x124>)
 8015708:	4413      	add	r3, r2
 801570a:	3304      	adds	r3, #4
 801570c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015710:	9200      	str	r2, [sp, #0]
 8015712:	460a      	mov	r2, r1
 8015714:	68b9      	ldr	r1, [r7, #8]
 8015716:	68f8      	ldr	r0, [r7, #12]
 8015718:	f001 fe40 	bl	801739c <ethernet_output>
 801571c:	4603      	mov	r3, r0
}
 801571e:	4618      	mov	r0, r3
 8015720:	3710      	adds	r7, #16
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}
 8015726:	bf00      	nop
 8015728:	2000d5d0 	.word	0x2000d5d0
 801572c:	0801b51c 	.word	0x0801b51c
 8015730:	0801b68c 	.word	0x0801b68c
 8015734:	0801b594 	.word	0x0801b594

08015738 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b08a      	sub	sp, #40	@ 0x28
 801573c:	af02      	add	r7, sp, #8
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d106      	bne.n	801575c <etharp_output+0x24>
 801574e:	4b73      	ldr	r3, [pc, #460]	@ (801591c <etharp_output+0x1e4>)
 8015750:	f240 321e 	movw	r2, #798	@ 0x31e
 8015754:	4972      	ldr	r1, [pc, #456]	@ (8015920 <etharp_output+0x1e8>)
 8015756:	4873      	ldr	r0, [pc, #460]	@ (8015924 <etharp_output+0x1ec>)
 8015758:	f002 fd4e 	bl	80181f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d106      	bne.n	8015770 <etharp_output+0x38>
 8015762:	4b6e      	ldr	r3, [pc, #440]	@ (801591c <etharp_output+0x1e4>)
 8015764:	f240 321f 	movw	r2, #799	@ 0x31f
 8015768:	496f      	ldr	r1, [pc, #444]	@ (8015928 <etharp_output+0x1f0>)
 801576a:	486e      	ldr	r0, [pc, #440]	@ (8015924 <etharp_output+0x1ec>)
 801576c:	f002 fd44 	bl	80181f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d106      	bne.n	8015784 <etharp_output+0x4c>
 8015776:	4b69      	ldr	r3, [pc, #420]	@ (801591c <etharp_output+0x1e4>)
 8015778:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801577c:	496b      	ldr	r1, [pc, #428]	@ (801592c <etharp_output+0x1f4>)
 801577e:	4869      	ldr	r0, [pc, #420]	@ (8015924 <etharp_output+0x1ec>)
 8015780:	f002 fd3a 	bl	80181f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	68f9      	ldr	r1, [r7, #12]
 801578a:	4618      	mov	r0, r3
 801578c:	f000 fef8 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d002      	beq.n	801579c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015796:	4b66      	ldr	r3, [pc, #408]	@ (8015930 <etharp_output+0x1f8>)
 8015798:	61fb      	str	r3, [r7, #28]
 801579a:	e0af      	b.n	80158fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80157a4:	2be0      	cmp	r3, #224	@ 0xe0
 80157a6:	d118      	bne.n	80157da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80157a8:	2301      	movs	r3, #1
 80157aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80157ac:	2300      	movs	r3, #0
 80157ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80157b0:	235e      	movs	r3, #94	@ 0x5e
 80157b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	3301      	adds	r3, #1
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	3302      	adds	r3, #2
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	3303      	adds	r3, #3
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80157d2:	f107 0310 	add.w	r3, r7, #16
 80157d6:	61fb      	str	r3, [r7, #28]
 80157d8:	e090      	b.n	80158fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681a      	ldr	r2, [r3, #0]
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	3304      	adds	r3, #4
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	405a      	eors	r2, r3
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	3308      	adds	r3, #8
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	4013      	ands	r3, r2
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d012      	beq.n	8015818 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80157f8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80157fc:	4293      	cmp	r3, r2
 80157fe:	d00b      	beq.n	8015818 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	330c      	adds	r3, #12
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d003      	beq.n	8015812 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	330c      	adds	r3, #12
 801580e:	61bb      	str	r3, [r7, #24]
 8015810:	e002      	b.n	8015818 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015812:	f06f 0303 	mvn.w	r3, #3
 8015816:	e07d      	b.n	8015914 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015818:	4b46      	ldr	r3, [pc, #280]	@ (8015934 <etharp_output+0x1fc>)
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	4619      	mov	r1, r3
 801581e:	4a46      	ldr	r2, [pc, #280]	@ (8015938 <etharp_output+0x200>)
 8015820:	460b      	mov	r3, r1
 8015822:	005b      	lsls	r3, r3, #1
 8015824:	440b      	add	r3, r1
 8015826:	00db      	lsls	r3, r3, #3
 8015828:	4413      	add	r3, r2
 801582a:	3314      	adds	r3, #20
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	2b01      	cmp	r3, #1
 8015830:	d925      	bls.n	801587e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015832:	4b40      	ldr	r3, [pc, #256]	@ (8015934 <etharp_output+0x1fc>)
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	4619      	mov	r1, r3
 8015838:	4a3f      	ldr	r2, [pc, #252]	@ (8015938 <etharp_output+0x200>)
 801583a:	460b      	mov	r3, r1
 801583c:	005b      	lsls	r3, r3, #1
 801583e:	440b      	add	r3, r1
 8015840:	00db      	lsls	r3, r3, #3
 8015842:	4413      	add	r3, r2
 8015844:	3308      	adds	r3, #8
 8015846:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015848:	68fa      	ldr	r2, [r7, #12]
 801584a:	429a      	cmp	r2, r3
 801584c:	d117      	bne.n	801587e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	4b38      	ldr	r3, [pc, #224]	@ (8015934 <etharp_output+0x1fc>)
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	4618      	mov	r0, r3
 8015858:	4937      	ldr	r1, [pc, #220]	@ (8015938 <etharp_output+0x200>)
 801585a:	4603      	mov	r3, r0
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	4403      	add	r3, r0
 8015860:	00db      	lsls	r3, r3, #3
 8015862:	440b      	add	r3, r1
 8015864:	3304      	adds	r3, #4
 8015866:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015868:	429a      	cmp	r2, r3
 801586a:	d108      	bne.n	801587e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801586c:	4b31      	ldr	r3, [pc, #196]	@ (8015934 <etharp_output+0x1fc>)
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	461a      	mov	r2, r3
 8015872:	68b9      	ldr	r1, [r7, #8]
 8015874:	68f8      	ldr	r0, [r7, #12]
 8015876:	f7ff fec5 	bl	8015604 <etharp_output_to_arp_index>
 801587a:	4603      	mov	r3, r0
 801587c:	e04a      	b.n	8015914 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801587e:	2300      	movs	r3, #0
 8015880:	75fb      	strb	r3, [r7, #23]
 8015882:	e031      	b.n	80158e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015884:	7dfa      	ldrb	r2, [r7, #23]
 8015886:	492c      	ldr	r1, [pc, #176]	@ (8015938 <etharp_output+0x200>)
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	3314      	adds	r3, #20
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	2b01      	cmp	r3, #1
 8015898:	d923      	bls.n	80158e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801589a:	7dfa      	ldrb	r2, [r7, #23]
 801589c:	4926      	ldr	r1, [pc, #152]	@ (8015938 <etharp_output+0x200>)
 801589e:	4613      	mov	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	4413      	add	r3, r2
 80158a4:	00db      	lsls	r3, r3, #3
 80158a6:	440b      	add	r3, r1
 80158a8:	3308      	adds	r3, #8
 80158aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80158ac:	68fa      	ldr	r2, [r7, #12]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d117      	bne.n	80158e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	6819      	ldr	r1, [r3, #0]
 80158b6:	7dfa      	ldrb	r2, [r7, #23]
 80158b8:	481f      	ldr	r0, [pc, #124]	@ (8015938 <etharp_output+0x200>)
 80158ba:	4613      	mov	r3, r2
 80158bc:	005b      	lsls	r3, r3, #1
 80158be:	4413      	add	r3, r2
 80158c0:	00db      	lsls	r3, r3, #3
 80158c2:	4403      	add	r3, r0
 80158c4:	3304      	adds	r3, #4
 80158c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80158c8:	4299      	cmp	r1, r3
 80158ca:	d10a      	bne.n	80158e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80158cc:	4a19      	ldr	r2, [pc, #100]	@ (8015934 <etharp_output+0x1fc>)
 80158ce:	7dfb      	ldrb	r3, [r7, #23]
 80158d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80158d2:	7dfb      	ldrb	r3, [r7, #23]
 80158d4:	461a      	mov	r2, r3
 80158d6:	68b9      	ldr	r1, [r7, #8]
 80158d8:	68f8      	ldr	r0, [r7, #12]
 80158da:	f7ff fe93 	bl	8015604 <etharp_output_to_arp_index>
 80158de:	4603      	mov	r3, r0
 80158e0:	e018      	b.n	8015914 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80158e2:	7dfb      	ldrb	r3, [r7, #23]
 80158e4:	3301      	adds	r3, #1
 80158e6:	75fb      	strb	r3, [r7, #23]
 80158e8:	7dfb      	ldrb	r3, [r7, #23]
 80158ea:	2b09      	cmp	r3, #9
 80158ec:	d9ca      	bls.n	8015884 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80158ee:	68ba      	ldr	r2, [r7, #8]
 80158f0:	69b9      	ldr	r1, [r7, #24]
 80158f2:	68f8      	ldr	r0, [r7, #12]
 80158f4:	f000 f822 	bl	801593c <etharp_query>
 80158f8:	4603      	mov	r3, r0
 80158fa:	e00b      	b.n	8015914 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015906:	9300      	str	r3, [sp, #0]
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	68b9      	ldr	r1, [r7, #8]
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f001 fd45 	bl	801739c <ethernet_output>
 8015912:	4603      	mov	r3, r0
}
 8015914:	4618      	mov	r0, r3
 8015916:	3720      	adds	r7, #32
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}
 801591c:	0801b51c 	.word	0x0801b51c
 8015920:	0801b66c 	.word	0x0801b66c
 8015924:	0801b594 	.word	0x0801b594
 8015928:	0801b6bc 	.word	0x0801b6bc
 801592c:	0801b65c 	.word	0x0801b65c
 8015930:	0801bd84 	.word	0x0801bd84
 8015934:	2000d6c0 	.word	0x2000d6c0
 8015938:	2000d5d0 	.word	0x2000d5d0

0801593c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b08c      	sub	sp, #48	@ 0x30
 8015940:	af02      	add	r7, sp, #8
 8015942:	60f8      	str	r0, [r7, #12]
 8015944:	60b9      	str	r1, [r7, #8]
 8015946:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	3326      	adds	r3, #38	@ 0x26
 801594c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801594e:	23ff      	movs	r3, #255	@ 0xff
 8015950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015954:	2300      	movs	r3, #0
 8015956:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	68f9      	ldr	r1, [r7, #12]
 801595e:	4618      	mov	r0, r3
 8015960:	f000 fe0e 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	d10c      	bne.n	8015984 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015972:	2be0      	cmp	r3, #224	@ 0xe0
 8015974:	d006      	beq.n	8015984 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d003      	beq.n	8015984 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d102      	bne.n	801598a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015984:	f06f 030f 	mvn.w	r3, #15
 8015988:	e101      	b.n	8015b8e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801598a:	68fa      	ldr	r2, [r7, #12]
 801598c:	2101      	movs	r1, #1
 801598e:	68b8      	ldr	r0, [r7, #8]
 8015990:	f7ff fb60 	bl	8015054 <etharp_find_entry>
 8015994:	4603      	mov	r3, r0
 8015996:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015998:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801599c:	2b00      	cmp	r3, #0
 801599e:	da02      	bge.n	80159a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80159a0:	8a7b      	ldrh	r3, [r7, #18]
 80159a2:	b25b      	sxtb	r3, r3
 80159a4:	e0f3      	b.n	8015b8e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80159a6:	8a7b      	ldrh	r3, [r7, #18]
 80159a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80159aa:	d906      	bls.n	80159ba <etharp_query+0x7e>
 80159ac:	4b7a      	ldr	r3, [pc, #488]	@ (8015b98 <etharp_query+0x25c>)
 80159ae:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80159b2:	497a      	ldr	r1, [pc, #488]	@ (8015b9c <etharp_query+0x260>)
 80159b4:	487a      	ldr	r0, [pc, #488]	@ (8015ba0 <etharp_query+0x264>)
 80159b6:	f002 fc1f 	bl	80181f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80159ba:	8a7b      	ldrh	r3, [r7, #18]
 80159bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80159be:	7c7a      	ldrb	r2, [r7, #17]
 80159c0:	4978      	ldr	r1, [pc, #480]	@ (8015ba4 <etharp_query+0x268>)
 80159c2:	4613      	mov	r3, r2
 80159c4:	005b      	lsls	r3, r3, #1
 80159c6:	4413      	add	r3, r2
 80159c8:	00db      	lsls	r3, r3, #3
 80159ca:	440b      	add	r3, r1
 80159cc:	3314      	adds	r3, #20
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d115      	bne.n	8015a00 <etharp_query+0xc4>
    is_new_entry = 1;
 80159d4:	2301      	movs	r3, #1
 80159d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80159d8:	7c7a      	ldrb	r2, [r7, #17]
 80159da:	4972      	ldr	r1, [pc, #456]	@ (8015ba4 <etharp_query+0x268>)
 80159dc:	4613      	mov	r3, r2
 80159de:	005b      	lsls	r3, r3, #1
 80159e0:	4413      	add	r3, r2
 80159e2:	00db      	lsls	r3, r3, #3
 80159e4:	440b      	add	r3, r1
 80159e6:	3314      	adds	r3, #20
 80159e8:	2201      	movs	r2, #1
 80159ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80159ec:	7c7a      	ldrb	r2, [r7, #17]
 80159ee:	496d      	ldr	r1, [pc, #436]	@ (8015ba4 <etharp_query+0x268>)
 80159f0:	4613      	mov	r3, r2
 80159f2:	005b      	lsls	r3, r3, #1
 80159f4:	4413      	add	r3, r2
 80159f6:	00db      	lsls	r3, r3, #3
 80159f8:	440b      	add	r3, r1
 80159fa:	3308      	adds	r3, #8
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015a00:	7c7a      	ldrb	r2, [r7, #17]
 8015a02:	4968      	ldr	r1, [pc, #416]	@ (8015ba4 <etharp_query+0x268>)
 8015a04:	4613      	mov	r3, r2
 8015a06:	005b      	lsls	r3, r3, #1
 8015a08:	4413      	add	r3, r2
 8015a0a:	00db      	lsls	r3, r3, #3
 8015a0c:	440b      	add	r3, r1
 8015a0e:	3314      	adds	r3, #20
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d011      	beq.n	8015a3a <etharp_query+0xfe>
 8015a16:	7c7a      	ldrb	r2, [r7, #17]
 8015a18:	4962      	ldr	r1, [pc, #392]	@ (8015ba4 <etharp_query+0x268>)
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	005b      	lsls	r3, r3, #1
 8015a1e:	4413      	add	r3, r2
 8015a20:	00db      	lsls	r3, r3, #3
 8015a22:	440b      	add	r3, r1
 8015a24:	3314      	adds	r3, #20
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	2b01      	cmp	r3, #1
 8015a2a:	d806      	bhi.n	8015a3a <etharp_query+0xfe>
 8015a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8015b98 <etharp_query+0x25c>)
 8015a2e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015a32:	495d      	ldr	r1, [pc, #372]	@ (8015ba8 <etharp_query+0x26c>)
 8015a34:	485a      	ldr	r0, [pc, #360]	@ (8015ba0 <etharp_query+0x264>)
 8015a36:	f002 fbdf 	bl	80181f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015a3a:	6a3b      	ldr	r3, [r7, #32]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d102      	bne.n	8015a46 <etharp_query+0x10a>
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d10c      	bne.n	8015a60 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015a46:	68b9      	ldr	r1, [r7, #8]
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	f000 f963 	bl	8015d14 <etharp_request>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d102      	bne.n	8015a60 <etharp_query+0x124>
      return result;
 8015a5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015a5e:	e096      	b.n	8015b8e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d106      	bne.n	8015a74 <etharp_query+0x138>
 8015a66:	4b4c      	ldr	r3, [pc, #304]	@ (8015b98 <etharp_query+0x25c>)
 8015a68:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015a6c:	494f      	ldr	r1, [pc, #316]	@ (8015bac <etharp_query+0x270>)
 8015a6e:	484c      	ldr	r0, [pc, #304]	@ (8015ba0 <etharp_query+0x264>)
 8015a70:	f002 fbc2 	bl	80181f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015a74:	7c7a      	ldrb	r2, [r7, #17]
 8015a76:	494b      	ldr	r1, [pc, #300]	@ (8015ba4 <etharp_query+0x268>)
 8015a78:	4613      	mov	r3, r2
 8015a7a:	005b      	lsls	r3, r3, #1
 8015a7c:	4413      	add	r3, r2
 8015a7e:	00db      	lsls	r3, r3, #3
 8015a80:	440b      	add	r3, r1
 8015a82:	3314      	adds	r3, #20
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	2b01      	cmp	r3, #1
 8015a88:	d917      	bls.n	8015aba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015a8a:	4a49      	ldr	r2, [pc, #292]	@ (8015bb0 <etharp_query+0x274>)
 8015a8c:	7c7b      	ldrb	r3, [r7, #17]
 8015a8e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015a90:	7c7a      	ldrb	r2, [r7, #17]
 8015a92:	4613      	mov	r3, r2
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	4413      	add	r3, r2
 8015a98:	00db      	lsls	r3, r3, #3
 8015a9a:	3308      	adds	r3, #8
 8015a9c:	4a41      	ldr	r2, [pc, #260]	@ (8015ba4 <etharp_query+0x268>)
 8015a9e:	4413      	add	r3, r2
 8015aa0:	3304      	adds	r3, #4
 8015aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015aa6:	9200      	str	r2, [sp, #0]
 8015aa8:	697a      	ldr	r2, [r7, #20]
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	68f8      	ldr	r0, [r7, #12]
 8015aae:	f001 fc75 	bl	801739c <ethernet_output>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015ab8:	e067      	b.n	8015b8a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015aba:	7c7a      	ldrb	r2, [r7, #17]
 8015abc:	4939      	ldr	r1, [pc, #228]	@ (8015ba4 <etharp_query+0x268>)
 8015abe:	4613      	mov	r3, r2
 8015ac0:	005b      	lsls	r3, r3, #1
 8015ac2:	4413      	add	r3, r2
 8015ac4:	00db      	lsls	r3, r3, #3
 8015ac6:	440b      	add	r3, r1
 8015ac8:	3314      	adds	r3, #20
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	2b01      	cmp	r3, #1
 8015ace:	d15c      	bne.n	8015b8a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ad8:	e01c      	b.n	8015b14 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	895a      	ldrh	r2, [r3, #10]
 8015ade:	69fb      	ldr	r3, [r7, #28]
 8015ae0:	891b      	ldrh	r3, [r3, #8]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d10a      	bne.n	8015afc <etharp_query+0x1c0>
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d006      	beq.n	8015afc <etharp_query+0x1c0>
 8015aee:	4b2a      	ldr	r3, [pc, #168]	@ (8015b98 <etharp_query+0x25c>)
 8015af0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015af4:	492f      	ldr	r1, [pc, #188]	@ (8015bb4 <etharp_query+0x278>)
 8015af6:	482a      	ldr	r0, [pc, #168]	@ (8015ba0 <etharp_query+0x264>)
 8015af8:	f002 fb7e 	bl	80181f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015afc:	69fb      	ldr	r3, [r7, #28]
 8015afe:	7b1b      	ldrb	r3, [r3, #12]
 8015b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d002      	beq.n	8015b0e <etharp_query+0x1d2>
        copy_needed = 1;
 8015b08:	2301      	movs	r3, #1
 8015b0a:	61bb      	str	r3, [r7, #24]
        break;
 8015b0c:	e005      	b.n	8015b1a <etharp_query+0x1de>
      }
      p = p->next;
 8015b0e:	69fb      	ldr	r3, [r7, #28]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015b14:	69fb      	ldr	r3, [r7, #28]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d1df      	bne.n	8015ada <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015b1a:	69bb      	ldr	r3, [r7, #24]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d007      	beq.n	8015b30 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015b20:	687a      	ldr	r2, [r7, #4]
 8015b22:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015b26:	200e      	movs	r0, #14
 8015b28:	f7f9 fcfc 	bl	800f524 <pbuf_clone>
 8015b2c:	61f8      	str	r0, [r7, #28]
 8015b2e:	e004      	b.n	8015b3a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015b34:	69f8      	ldr	r0, [r7, #28]
 8015b36:	f7f9 fb33 	bl	800f1a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015b3a:	69fb      	ldr	r3, [r7, #28]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d021      	beq.n	8015b84 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015b40:	7c7a      	ldrb	r2, [r7, #17]
 8015b42:	4918      	ldr	r1, [pc, #96]	@ (8015ba4 <etharp_query+0x268>)
 8015b44:	4613      	mov	r3, r2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	4413      	add	r3, r2
 8015b4a:	00db      	lsls	r3, r3, #3
 8015b4c:	440b      	add	r3, r1
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d00a      	beq.n	8015b6a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015b54:	7c7a      	ldrb	r2, [r7, #17]
 8015b56:	4913      	ldr	r1, [pc, #76]	@ (8015ba4 <etharp_query+0x268>)
 8015b58:	4613      	mov	r3, r2
 8015b5a:	005b      	lsls	r3, r3, #1
 8015b5c:	4413      	add	r3, r2
 8015b5e:	00db      	lsls	r3, r3, #3
 8015b60:	440b      	add	r3, r1
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7f9 fa75 	bl	800f054 <pbuf_free>
      }
      arp_table[i].q = p;
 8015b6a:	7c7a      	ldrb	r2, [r7, #17]
 8015b6c:	490d      	ldr	r1, [pc, #52]	@ (8015ba4 <etharp_query+0x268>)
 8015b6e:	4613      	mov	r3, r2
 8015b70:	005b      	lsls	r3, r3, #1
 8015b72:	4413      	add	r3, r2
 8015b74:	00db      	lsls	r3, r3, #3
 8015b76:	440b      	add	r3, r1
 8015b78:	69fa      	ldr	r2, [r7, #28]
 8015b7a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b82:	e002      	b.n	8015b8a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015b84:	23ff      	movs	r3, #255	@ 0xff
 8015b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015b8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3728      	adds	r7, #40	@ 0x28
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	0801b51c 	.word	0x0801b51c
 8015b9c:	0801b6c8 	.word	0x0801b6c8
 8015ba0:	0801b594 	.word	0x0801b594
 8015ba4:	2000d5d0 	.word	0x2000d5d0
 8015ba8:	0801b6d8 	.word	0x0801b6d8
 8015bac:	0801b6bc 	.word	0x0801b6bc
 8015bb0:	2000d6c0 	.word	0x2000d6c0
 8015bb4:	0801b700 	.word	0x0801b700

08015bb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b08a      	sub	sp, #40	@ 0x28
 8015bbc:	af02      	add	r7, sp, #8
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
 8015bc4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d106      	bne.n	8015bde <etharp_raw+0x26>
 8015bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8015cbc <etharp_raw+0x104>)
 8015bd2:	f240 4257 	movw	r2, #1111	@ 0x457
 8015bd6:	493a      	ldr	r1, [pc, #232]	@ (8015cc0 <etharp_raw+0x108>)
 8015bd8:	483a      	ldr	r0, [pc, #232]	@ (8015cc4 <etharp_raw+0x10c>)
 8015bda:	f002 fb0d 	bl	80181f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015bde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015be2:	211c      	movs	r1, #28
 8015be4:	200e      	movs	r0, #14
 8015be6:	f7f8 ff51 	bl	800ea8c <pbuf_alloc>
 8015bea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015bec:	69bb      	ldr	r3, [r7, #24]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d102      	bne.n	8015bf8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf6:	e05d      	b.n	8015cb4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	895b      	ldrh	r3, [r3, #10]
 8015bfc:	2b1b      	cmp	r3, #27
 8015bfe:	d806      	bhi.n	8015c0e <etharp_raw+0x56>
 8015c00:	4b2e      	ldr	r3, [pc, #184]	@ (8015cbc <etharp_raw+0x104>)
 8015c02:	f240 4262 	movw	r2, #1122	@ 0x462
 8015c06:	4930      	ldr	r1, [pc, #192]	@ (8015cc8 <etharp_raw+0x110>)
 8015c08:	482e      	ldr	r0, [pc, #184]	@ (8015cc4 <etharp_raw+0x10c>)
 8015c0a:	f002 faf5 	bl	80181f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015c14:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7f7 fe2a 	bl	800d870 <lwip_htons>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	461a      	mov	r2, r3
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015c2a:	2b06      	cmp	r3, #6
 8015c2c:	d006      	beq.n	8015c3c <etharp_raw+0x84>
 8015c2e:	4b23      	ldr	r3, [pc, #140]	@ (8015cbc <etharp_raw+0x104>)
 8015c30:	f240 4269 	movw	r2, #1129	@ 0x469
 8015c34:	4925      	ldr	r1, [pc, #148]	@ (8015ccc <etharp_raw+0x114>)
 8015c36:	4823      	ldr	r0, [pc, #140]	@ (8015cc4 <etharp_raw+0x10c>)
 8015c38:	f002 fade 	bl	80181f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	3308      	adds	r3, #8
 8015c40:	2206      	movs	r2, #6
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	4618      	mov	r0, r3
 8015c46:	f002 fc08 	bl	801845a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	3312      	adds	r3, #18
 8015c4e:	2206      	movs	r2, #6
 8015c50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015c52:	4618      	mov	r0, r3
 8015c54:	f002 fc01 	bl	801845a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	330e      	adds	r3, #14
 8015c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015c5e:	6812      	ldr	r2, [r2, #0]
 8015c60:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	3318      	adds	r3, #24
 8015c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c68:	6812      	ldr	r2, [r2, #0]
 8015c6a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	701a      	strb	r2, [r3, #0]
 8015c72:	2200      	movs	r2, #0
 8015c74:	f042 0201 	orr.w	r2, r2, #1
 8015c78:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	f042 0208 	orr.w	r2, r2, #8
 8015c82:	709a      	strb	r2, [r3, #2]
 8015c84:	2200      	movs	r2, #0
 8015c86:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	2206      	movs	r2, #6
 8015c8c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	2204      	movs	r2, #4
 8015c92:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015c94:	f640 0306 	movw	r3, #2054	@ 0x806
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	69b9      	ldr	r1, [r7, #24]
 8015ca0:	68f8      	ldr	r0, [r7, #12]
 8015ca2:	f001 fb7b 	bl	801739c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015ca6:	69b8      	ldr	r0, [r7, #24]
 8015ca8:	f7f9 f9d4 	bl	800f054 <pbuf_free>
  p = NULL;
 8015cac:	2300      	movs	r3, #0
 8015cae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015cb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3720      	adds	r7, #32
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	0801b51c 	.word	0x0801b51c
 8015cc0:	0801b66c 	.word	0x0801b66c
 8015cc4:	0801b594 	.word	0x0801b594
 8015cc8:	0801b71c 	.word	0x0801b71c
 8015ccc:	0801b750 	.word	0x0801b750

08015cd0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b088      	sub	sp, #32
 8015cd4:	af04      	add	r7, sp, #16
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015cec:	2201      	movs	r2, #1
 8015cee:	9203      	str	r2, [sp, #12]
 8015cf0:	68ba      	ldr	r2, [r7, #8]
 8015cf2:	9202      	str	r2, [sp, #8]
 8015cf4:	4a06      	ldr	r2, [pc, #24]	@ (8015d10 <etharp_request_dst+0x40>)
 8015cf6:	9201      	str	r2, [sp, #4]
 8015cf8:	9300      	str	r3, [sp, #0]
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f7ff ff5a 	bl	8015bb8 <etharp_raw>
 8015d04:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3710      	adds	r7, #16
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	0801bd8c 	.word	0x0801bd8c

08015d14 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015d1e:	4a05      	ldr	r2, [pc, #20]	@ (8015d34 <etharp_request+0x20>)
 8015d20:	6839      	ldr	r1, [r7, #0]
 8015d22:	6878      	ldr	r0, [r7, #4]
 8015d24:	f7ff ffd4 	bl	8015cd0 <etharp_request_dst>
 8015d28:	4603      	mov	r3, r0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	0801bd84 	.word	0x0801bd84

08015d38 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b08e      	sub	sp, #56	@ 0x38
 8015d3c:	af04      	add	r7, sp, #16
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015d42:	4b79      	ldr	r3, [pc, #484]	@ (8015f28 <icmp_input+0x1f0>)
 8015d44:	689b      	ldr	r3, [r3, #8]
 8015d46:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	f003 030f 	and.w	r3, r3, #15
 8015d50:	b2db      	uxtb	r3, r3
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015d58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015d5a:	2b13      	cmp	r3, #19
 8015d5c:	f240 80cd 	bls.w	8015efa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	895b      	ldrh	r3, [r3, #10]
 8015d64:	2b03      	cmp	r3, #3
 8015d66:	f240 80ca 	bls.w	8015efe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015d74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f000 80b7 	beq.w	8015eec <icmp_input+0x1b4>
 8015d7e:	2b08      	cmp	r3, #8
 8015d80:	f040 80b7 	bne.w	8015ef2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015d84:	4b69      	ldr	r3, [pc, #420]	@ (8015f2c <icmp_input+0x1f4>)
 8015d86:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d88:	4b67      	ldr	r3, [pc, #412]	@ (8015f28 <icmp_input+0x1f0>)
 8015d8a:	695b      	ldr	r3, [r3, #20]
 8015d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015d90:	2be0      	cmp	r3, #224	@ 0xe0
 8015d92:	f000 80bb 	beq.w	8015f0c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015d96:	4b64      	ldr	r3, [pc, #400]	@ (8015f28 <icmp_input+0x1f0>)
 8015d98:	695b      	ldr	r3, [r3, #20]
 8015d9a:	4a63      	ldr	r2, [pc, #396]	@ (8015f28 <icmp_input+0x1f0>)
 8015d9c:	6812      	ldr	r2, [r2, #0]
 8015d9e:	4611      	mov	r1, r2
 8015da0:	4618      	mov	r0, r3
 8015da2:	f000 fbed 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	f040 80b1 	bne.w	8015f10 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	891b      	ldrh	r3, [r3, #8]
 8015db2:	2b07      	cmp	r3, #7
 8015db4:	f240 80a5 	bls.w	8015f02 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015db8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015dba:	330e      	adds	r3, #14
 8015dbc:	4619      	mov	r1, r3
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f7f9 f8b2 	bl	800ef28 <pbuf_add_header>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d04b      	beq.n	8015e62 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	891a      	ldrh	r2, [r3, #8]
 8015dce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015dd0:	4413      	add	r3, r2
 8015dd2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	891b      	ldrh	r3, [r3, #8]
 8015dd8:	8b7a      	ldrh	r2, [r7, #26]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	f0c0 809a 	bcc.w	8015f14 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015de0:	8b7b      	ldrh	r3, [r7, #26]
 8015de2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015de6:	4619      	mov	r1, r3
 8015de8:	200e      	movs	r0, #14
 8015dea:	f7f8 fe4f 	bl	800ea8c <pbuf_alloc>
 8015dee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	f000 8090 	beq.w	8015f18 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	895b      	ldrh	r3, [r3, #10]
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015e00:	3308      	adds	r3, #8
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d203      	bcs.n	8015e0e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015e06:	6978      	ldr	r0, [r7, #20]
 8015e08:	f7f9 f924 	bl	800f054 <pbuf_free>
          goto icmperr;
 8015e0c:	e085      	b.n	8015f1a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015e14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015e16:	4618      	mov	r0, r3
 8015e18:	f002 fb1f 	bl	801845a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015e1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015e1e:	4619      	mov	r1, r3
 8015e20:	6978      	ldr	r0, [r7, #20]
 8015e22:	f7f9 f891 	bl	800ef48 <pbuf_remove_header>
 8015e26:	4603      	mov	r3, r0
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d009      	beq.n	8015e40 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015e2c:	4b40      	ldr	r3, [pc, #256]	@ (8015f30 <icmp_input+0x1f8>)
 8015e2e:	22b6      	movs	r2, #182	@ 0xb6
 8015e30:	4940      	ldr	r1, [pc, #256]	@ (8015f34 <icmp_input+0x1fc>)
 8015e32:	4841      	ldr	r0, [pc, #260]	@ (8015f38 <icmp_input+0x200>)
 8015e34:	f002 f9e0 	bl	80181f8 <iprintf>
          pbuf_free(r);
 8015e38:	6978      	ldr	r0, [r7, #20]
 8015e3a:	f7f9 f90b 	bl	800f054 <pbuf_free>
          goto icmperr;
 8015e3e:	e06c      	b.n	8015f1a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015e40:	6879      	ldr	r1, [r7, #4]
 8015e42:	6978      	ldr	r0, [r7, #20]
 8015e44:	f7f9 fa2a 	bl	800f29c <pbuf_copy>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d003      	beq.n	8015e56 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015e4e:	6978      	ldr	r0, [r7, #20]
 8015e50:	f7f9 f900 	bl	800f054 <pbuf_free>
          goto icmperr;
 8015e54:	e061      	b.n	8015f1a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f7f9 f8fc 	bl	800f054 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	607b      	str	r3, [r7, #4]
 8015e60:	e00f      	b.n	8015e82 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015e62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015e64:	330e      	adds	r3, #14
 8015e66:	4619      	mov	r1, r3
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7f9 f86d 	bl	800ef48 <pbuf_remove_header>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d006      	beq.n	8015e82 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015e74:	4b2e      	ldr	r3, [pc, #184]	@ (8015f30 <icmp_input+0x1f8>)
 8015e76:	22c7      	movs	r2, #199	@ 0xc7
 8015e78:	4930      	ldr	r1, [pc, #192]	@ (8015f3c <icmp_input+0x204>)
 8015e7a:	482f      	ldr	r0, [pc, #188]	@ (8015f38 <icmp_input+0x200>)
 8015e7c:	f002 f9bc 	bl	80181f8 <iprintf>
          goto icmperr;
 8015e80:	e04b      	b.n	8015f1a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015e88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f7f9 f84b 	bl	800ef28 <pbuf_add_header>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d12b      	bne.n	8015ef0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	681a      	ldr	r2, [r3, #0]
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015ea6:	4b20      	ldr	r3, [pc, #128]	@ (8015f28 <icmp_input+0x1f0>)
 8015ea8:	691a      	ldr	r2, [r3, #16]
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	709a      	strb	r2, [r3, #2]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	22ff      	movs	r2, #255	@ 0xff
 8015ec2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	729a      	strb	r2, [r3, #10]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	9302      	str	r3, [sp, #8]
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	9301      	str	r3, [sp, #4]
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	9300      	str	r3, [sp, #0]
 8015eda:	23ff      	movs	r3, #255	@ 0xff
 8015edc:	2200      	movs	r2, #0
 8015ede:	69f9      	ldr	r1, [r7, #28]
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f000 fa75 	bl	80163d0 <ip4_output_if>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015eea:	e001      	b.n	8015ef0 <icmp_input+0x1b8>
      break;
 8015eec:	bf00      	nop
 8015eee:	e000      	b.n	8015ef2 <icmp_input+0x1ba>
      break;
 8015ef0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7f9 f8ae 	bl	800f054 <pbuf_free>
  return;
 8015ef8:	e013      	b.n	8015f22 <icmp_input+0x1ea>
    goto lenerr;
 8015efa:	bf00      	nop
 8015efc:	e002      	b.n	8015f04 <icmp_input+0x1cc>
    goto lenerr;
 8015efe:	bf00      	nop
 8015f00:	e000      	b.n	8015f04 <icmp_input+0x1cc>
        goto lenerr;
 8015f02:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f7f9 f8a5 	bl	800f054 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f0a:	e00a      	b.n	8015f22 <icmp_input+0x1ea>
        goto icmperr;
 8015f0c:	bf00      	nop
 8015f0e:	e004      	b.n	8015f1a <icmp_input+0x1e2>
        goto icmperr;
 8015f10:	bf00      	nop
 8015f12:	e002      	b.n	8015f1a <icmp_input+0x1e2>
          goto icmperr;
 8015f14:	bf00      	nop
 8015f16:	e000      	b.n	8015f1a <icmp_input+0x1e2>
          goto icmperr;
 8015f18:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7f9 f89a 	bl	800f054 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f20:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015f22:	3728      	adds	r7, #40	@ 0x28
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	20009e1c 	.word	0x20009e1c
 8015f2c:	20009e30 	.word	0x20009e30
 8015f30:	0801b794 	.word	0x0801b794
 8015f34:	0801b7cc 	.word	0x0801b7cc
 8015f38:	0801b804 	.word	0x0801b804
 8015f3c:	0801b82c 	.word	0x0801b82c

08015f40 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	460b      	mov	r3, r1
 8015f4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015f4c:	78fb      	ldrb	r3, [r7, #3]
 8015f4e:	461a      	mov	r2, r3
 8015f50:	2103      	movs	r1, #3
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 f814 	bl	8015f80 <icmp_send_response>
}
 8015f58:	bf00      	nop
 8015f5a:	3708      	adds	r7, #8
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015f6c:	78fb      	ldrb	r3, [r7, #3]
 8015f6e:	461a      	mov	r2, r3
 8015f70:	210b      	movs	r1, #11
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f000 f804 	bl	8015f80 <icmp_send_response>
}
 8015f78:	bf00      	nop
 8015f7a:	3708      	adds	r7, #8
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b08c      	sub	sp, #48	@ 0x30
 8015f84:	af04      	add	r7, sp, #16
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	460b      	mov	r3, r1
 8015f8a:	70fb      	strb	r3, [r7, #3]
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015f90:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f94:	2124      	movs	r1, #36	@ 0x24
 8015f96:	2022      	movs	r0, #34	@ 0x22
 8015f98:	f7f8 fd78 	bl	800ea8c <pbuf_alloc>
 8015f9c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015f9e:	69fb      	ldr	r3, [r7, #28]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d04c      	beq.n	801603e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015fa4:	69fb      	ldr	r3, [r7, #28]
 8015fa6:	895b      	ldrh	r3, [r3, #10]
 8015fa8:	2b23      	cmp	r3, #35	@ 0x23
 8015faa:	d806      	bhi.n	8015fba <icmp_send_response+0x3a>
 8015fac:	4b26      	ldr	r3, [pc, #152]	@ (8016048 <icmp_send_response+0xc8>)
 8015fae:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015fb2:	4926      	ldr	r1, [pc, #152]	@ (801604c <icmp_send_response+0xcc>)
 8015fb4:	4826      	ldr	r0, [pc, #152]	@ (8016050 <icmp_send_response+0xd0>)
 8015fb6:	f002 f91f 	bl	80181f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	685b      	ldr	r3, [r3, #4]
 8015fbe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015fc0:	69fb      	ldr	r3, [r7, #28]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	78fa      	ldrb	r2, [r7, #3]
 8015fca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	78ba      	ldrb	r2, [r7, #2]
 8015fd0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	711a      	strb	r2, [r3, #4]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	719a      	strb	r2, [r3, #6]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015fe6:	69fb      	ldr	r3, [r7, #28]
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	f103 0008 	add.w	r0, r3, #8
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	221c      	movs	r2, #28
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	f002 fa30 	bl	801845a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016000:	f107 030c 	add.w	r3, r7, #12
 8016004:	4618      	mov	r0, r3
 8016006:	f000 f825 	bl	8016054 <ip4_route>
 801600a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d011      	beq.n	8016036 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016012:	697b      	ldr	r3, [r7, #20]
 8016014:	2200      	movs	r2, #0
 8016016:	709a      	strb	r2, [r3, #2]
 8016018:	2200      	movs	r2, #0
 801601a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801601c:	f107 020c 	add.w	r2, r7, #12
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	9302      	str	r3, [sp, #8]
 8016024:	2301      	movs	r3, #1
 8016026:	9301      	str	r3, [sp, #4]
 8016028:	2300      	movs	r3, #0
 801602a:	9300      	str	r3, [sp, #0]
 801602c:	23ff      	movs	r3, #255	@ 0xff
 801602e:	2100      	movs	r1, #0
 8016030:	69f8      	ldr	r0, [r7, #28]
 8016032:	f000 f9cd 	bl	80163d0 <ip4_output_if>
  }
  pbuf_free(q);
 8016036:	69f8      	ldr	r0, [r7, #28]
 8016038:	f7f9 f80c 	bl	800f054 <pbuf_free>
 801603c:	e000      	b.n	8016040 <icmp_send_response+0xc0>
    return;
 801603e:	bf00      	nop
}
 8016040:	3720      	adds	r7, #32
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	0801b794 	.word	0x0801b794
 801604c:	0801b860 	.word	0x0801b860
 8016050:	0801b804 	.word	0x0801b804

08016054 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016054:	b480      	push	{r7}
 8016056:	b085      	sub	sp, #20
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801605c:	4b33      	ldr	r3, [pc, #204]	@ (801612c <ip4_route+0xd8>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	60fb      	str	r3, [r7, #12]
 8016062:	e036      	b.n	80160d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801606a:	f003 0301 	and.w	r3, r3, #1
 801606e:	b2db      	uxtb	r3, r3
 8016070:	2b00      	cmp	r3, #0
 8016072:	d02b      	beq.n	80160cc <ip4_route+0x78>
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801607a:	089b      	lsrs	r3, r3, #2
 801607c:	f003 0301 	and.w	r3, r3, #1
 8016080:	b2db      	uxtb	r3, r3
 8016082:	2b00      	cmp	r3, #0
 8016084:	d022      	beq.n	80160cc <ip4_route+0x78>
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	3304      	adds	r3, #4
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d01d      	beq.n	80160cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681a      	ldr	r2, [r3, #0]
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	3304      	adds	r3, #4
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	405a      	eors	r2, r3
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	3308      	adds	r3, #8
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	4013      	ands	r3, r2
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d101      	bne.n	80160ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	e038      	b.n	801611e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80160b2:	f003 0302 	and.w	r3, r3, #2
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d108      	bne.n	80160cc <ip4_route+0x78>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	681a      	ldr	r2, [r3, #0]
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	330c      	adds	r3, #12
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d101      	bne.n	80160cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	e028      	b.n	801611e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	60fb      	str	r3, [r7, #12]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d1c5      	bne.n	8016064 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80160d8:	4b15      	ldr	r3, [pc, #84]	@ (8016130 <ip4_route+0xdc>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d01a      	beq.n	8016116 <ip4_route+0xc2>
 80160e0:	4b13      	ldr	r3, [pc, #76]	@ (8016130 <ip4_route+0xdc>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80160e8:	f003 0301 	and.w	r3, r3, #1
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d012      	beq.n	8016116 <ip4_route+0xc2>
 80160f0:	4b0f      	ldr	r3, [pc, #60]	@ (8016130 <ip4_route+0xdc>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80160f8:	f003 0304 	and.w	r3, r3, #4
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d00a      	beq.n	8016116 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016100:	4b0b      	ldr	r3, [pc, #44]	@ (8016130 <ip4_route+0xdc>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	3304      	adds	r3, #4
 8016106:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016108:	2b00      	cmp	r3, #0
 801610a:	d004      	beq.n	8016116 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	b2db      	uxtb	r3, r3
 8016112:	2b7f      	cmp	r3, #127	@ 0x7f
 8016114:	d101      	bne.n	801611a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016116:	2300      	movs	r3, #0
 8016118:	e001      	b.n	801611e <ip4_route+0xca>
  }

  return netif_default;
 801611a:	4b05      	ldr	r3, [pc, #20]	@ (8016130 <ip4_route+0xdc>)
 801611c:	681b      	ldr	r3, [r3, #0]
}
 801611e:	4618      	mov	r0, r3
 8016120:	3714      	adds	r7, #20
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	2000d564 	.word	0x2000d564
 8016130:	2000d568 	.word	0x2000d568

08016134 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b082      	sub	sp, #8
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016142:	f003 0301 	and.w	r3, r3, #1
 8016146:	b2db      	uxtb	r3, r3
 8016148:	2b00      	cmp	r3, #0
 801614a:	d016      	beq.n	801617a <ip4_input_accept+0x46>
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	3304      	adds	r3, #4
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d011      	beq.n	801617a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016156:	4b0b      	ldr	r3, [pc, #44]	@ (8016184 <ip4_input_accept+0x50>)
 8016158:	695a      	ldr	r2, [r3, #20]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	3304      	adds	r3, #4
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	429a      	cmp	r2, r3
 8016162:	d008      	beq.n	8016176 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016164:	4b07      	ldr	r3, [pc, #28]	@ (8016184 <ip4_input_accept+0x50>)
 8016166:	695b      	ldr	r3, [r3, #20]
 8016168:	6879      	ldr	r1, [r7, #4]
 801616a:	4618      	mov	r0, r3
 801616c:	f000 fa08 	bl	8016580 <ip4_addr_isbroadcast_u32>
 8016170:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016172:	2b00      	cmp	r3, #0
 8016174:	d001      	beq.n	801617a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016176:	2301      	movs	r3, #1
 8016178:	e000      	b.n	801617c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801617a:	2300      	movs	r3, #0
}
 801617c:	4618      	mov	r0, r3
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	20009e1c 	.word	0x20009e1c

08016188 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b086      	sub	sp, #24
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	091b      	lsrs	r3, r3, #4
 801619e:	b2db      	uxtb	r3, r3
 80161a0:	2b04      	cmp	r3, #4
 80161a2:	d004      	beq.n	80161ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f7f8 ff55 	bl	800f054 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80161aa:	2300      	movs	r3, #0
 80161ac:	e107      	b.n	80163be <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	f003 030f 	and.w	r3, r3, #15
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	885b      	ldrh	r3, [r3, #2]
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7f7 fb53 	bl	800d870 <lwip_htons>
 80161ca:	4603      	mov	r3, r0
 80161cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	891b      	ldrh	r3, [r3, #8]
 80161d2:	89ba      	ldrh	r2, [r7, #12]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d204      	bcs.n	80161e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80161d8:	89bb      	ldrh	r3, [r7, #12]
 80161da:	4619      	mov	r1, r3
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7f8 fdb3 	bl	800ed48 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	895b      	ldrh	r3, [r3, #10]
 80161e6:	89fa      	ldrh	r2, [r7, #14]
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d807      	bhi.n	80161fc <ip4_input+0x74>
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	891b      	ldrh	r3, [r3, #8]
 80161f0:	89ba      	ldrh	r2, [r7, #12]
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d802      	bhi.n	80161fc <ip4_input+0x74>
 80161f6:	89fb      	ldrh	r3, [r7, #14]
 80161f8:	2b13      	cmp	r3, #19
 80161fa:	d804      	bhi.n	8016206 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7f8 ff29 	bl	800f054 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016202:	2300      	movs	r3, #0
 8016204:	e0db      	b.n	80163be <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	691b      	ldr	r3, [r3, #16]
 801620a:	4a6f      	ldr	r2, [pc, #444]	@ (80163c8 <ip4_input+0x240>)
 801620c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	4a6d      	ldr	r2, [pc, #436]	@ (80163c8 <ip4_input+0x240>)
 8016214:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016216:	4b6c      	ldr	r3, [pc, #432]	@ (80163c8 <ip4_input+0x240>)
 8016218:	695b      	ldr	r3, [r3, #20]
 801621a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801621e:	2be0      	cmp	r3, #224	@ 0xe0
 8016220:	d112      	bne.n	8016248 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016228:	f003 0301 	and.w	r3, r3, #1
 801622c:	b2db      	uxtb	r3, r3
 801622e:	2b00      	cmp	r3, #0
 8016230:	d007      	beq.n	8016242 <ip4_input+0xba>
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	3304      	adds	r3, #4
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d002      	beq.n	8016242 <ip4_input+0xba>
      netif = inp;
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	613b      	str	r3, [r7, #16]
 8016240:	e02a      	b.n	8016298 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016242:	2300      	movs	r3, #0
 8016244:	613b      	str	r3, [r7, #16]
 8016246:	e027      	b.n	8016298 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016248:	6838      	ldr	r0, [r7, #0]
 801624a:	f7ff ff73 	bl	8016134 <ip4_input_accept>
 801624e:	4603      	mov	r3, r0
 8016250:	2b00      	cmp	r3, #0
 8016252:	d002      	beq.n	801625a <ip4_input+0xd2>
      netif = inp;
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	613b      	str	r3, [r7, #16]
 8016258:	e01e      	b.n	8016298 <ip4_input+0x110>
    } else {
      netif = NULL;
 801625a:	2300      	movs	r3, #0
 801625c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801625e:	4b5a      	ldr	r3, [pc, #360]	@ (80163c8 <ip4_input+0x240>)
 8016260:	695b      	ldr	r3, [r3, #20]
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b7f      	cmp	r3, #127	@ 0x7f
 8016266:	d017      	beq.n	8016298 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016268:	4b58      	ldr	r3, [pc, #352]	@ (80163cc <ip4_input+0x244>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	613b      	str	r3, [r7, #16]
 801626e:	e00e      	b.n	801628e <ip4_input+0x106>
          if (netif == inp) {
 8016270:	693a      	ldr	r2, [r7, #16]
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	429a      	cmp	r2, r3
 8016276:	d006      	beq.n	8016286 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016278:	6938      	ldr	r0, [r7, #16]
 801627a:	f7ff ff5b 	bl	8016134 <ip4_input_accept>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d108      	bne.n	8016296 <ip4_input+0x10e>
 8016284:	e000      	b.n	8016288 <ip4_input+0x100>
            continue;
 8016286:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	613b      	str	r3, [r7, #16]
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d1ed      	bne.n	8016270 <ip4_input+0xe8>
 8016294:	e000      	b.n	8016298 <ip4_input+0x110>
            break;
 8016296:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016298:	4b4b      	ldr	r3, [pc, #300]	@ (80163c8 <ip4_input+0x240>)
 801629a:	691b      	ldr	r3, [r3, #16]
 801629c:	6839      	ldr	r1, [r7, #0]
 801629e:	4618      	mov	r0, r3
 80162a0:	f000 f96e 	bl	8016580 <ip4_addr_isbroadcast_u32>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d105      	bne.n	80162b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80162aa:	4b47      	ldr	r3, [pc, #284]	@ (80163c8 <ip4_input+0x240>)
 80162ac:	691b      	ldr	r3, [r3, #16]
 80162ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80162b2:	2be0      	cmp	r3, #224	@ 0xe0
 80162b4:	d104      	bne.n	80162c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7f8 fecc 	bl	800f054 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80162bc:	2300      	movs	r3, #0
 80162be:	e07e      	b.n	80163be <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d104      	bne.n	80162d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f7f8 fec4 	bl	800f054 <pbuf_free>
    return ERR_OK;
 80162cc:	2300      	movs	r3, #0
 80162ce:	e076      	b.n	80163be <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	88db      	ldrh	r3, [r3, #6]
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	461a      	mov	r2, r3
 80162d8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80162dc:	4013      	ands	r3, r2
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00b      	beq.n	80162fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f000 fc92 	bl	8016c0c <ip4_reass>
 80162e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d101      	bne.n	80162f4 <ip4_input+0x16c>
      return ERR_OK;
 80162f0:	2300      	movs	r3, #0
 80162f2:	e064      	b.n	80163be <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80162fa:	4a33      	ldr	r2, [pc, #204]	@ (80163c8 <ip4_input+0x240>)
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016300:	4a31      	ldr	r2, [pc, #196]	@ (80163c8 <ip4_input+0x240>)
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016306:	4a30      	ldr	r2, [pc, #192]	@ (80163c8 <ip4_input+0x240>)
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	f003 030f 	and.w	r3, r3, #15
 8016314:	b2db      	uxtb	r3, r3
 8016316:	009b      	lsls	r3, r3, #2
 8016318:	b2db      	uxtb	r3, r3
 801631a:	461a      	mov	r2, r3
 801631c:	4b2a      	ldr	r3, [pc, #168]	@ (80163c8 <ip4_input+0x240>)
 801631e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016320:	89fb      	ldrh	r3, [r7, #14]
 8016322:	4619      	mov	r1, r3
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	f7f8 fe0f 	bl	800ef48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	7a5b      	ldrb	r3, [r3, #9]
 801632e:	2b11      	cmp	r3, #17
 8016330:	d006      	beq.n	8016340 <ip4_input+0x1b8>
 8016332:	2b11      	cmp	r3, #17
 8016334:	dc13      	bgt.n	801635e <ip4_input+0x1d6>
 8016336:	2b01      	cmp	r3, #1
 8016338:	d00c      	beq.n	8016354 <ip4_input+0x1cc>
 801633a:	2b06      	cmp	r3, #6
 801633c:	d005      	beq.n	801634a <ip4_input+0x1c2>
 801633e:	e00e      	b.n	801635e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016340:	6839      	ldr	r1, [r7, #0]
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f7fe fc68 	bl	8014c18 <udp_input>
        break;
 8016348:	e026      	b.n	8016398 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801634a:	6839      	ldr	r1, [r7, #0]
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7fa fcb7 	bl	8010cc0 <tcp_input>
        break;
 8016352:	e021      	b.n	8016398 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016354:	6839      	ldr	r1, [r7, #0]
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f7ff fcee 	bl	8015d38 <icmp_input>
        break;
 801635c:	e01c      	b.n	8016398 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801635e:	4b1a      	ldr	r3, [pc, #104]	@ (80163c8 <ip4_input+0x240>)
 8016360:	695b      	ldr	r3, [r3, #20]
 8016362:	6939      	ldr	r1, [r7, #16]
 8016364:	4618      	mov	r0, r3
 8016366:	f000 f90b 	bl	8016580 <ip4_addr_isbroadcast_u32>
 801636a:	4603      	mov	r3, r0
 801636c:	2b00      	cmp	r3, #0
 801636e:	d10f      	bne.n	8016390 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016370:	4b15      	ldr	r3, [pc, #84]	@ (80163c8 <ip4_input+0x240>)
 8016372:	695b      	ldr	r3, [r3, #20]
 8016374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016378:	2be0      	cmp	r3, #224	@ 0xe0
 801637a:	d009      	beq.n	8016390 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801637c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016380:	4619      	mov	r1, r3
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f7f8 fe53 	bl	800f02e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016388:	2102      	movs	r1, #2
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff fdd8 	bl	8015f40 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f7f8 fe5f 	bl	800f054 <pbuf_free>
        break;
 8016396:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016398:	4b0b      	ldr	r3, [pc, #44]	@ (80163c8 <ip4_input+0x240>)
 801639a:	2200      	movs	r2, #0
 801639c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801639e:	4b0a      	ldr	r3, [pc, #40]	@ (80163c8 <ip4_input+0x240>)
 80163a0:	2200      	movs	r2, #0
 80163a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80163a4:	4b08      	ldr	r3, [pc, #32]	@ (80163c8 <ip4_input+0x240>)
 80163a6:	2200      	movs	r2, #0
 80163a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80163aa:	4b07      	ldr	r3, [pc, #28]	@ (80163c8 <ip4_input+0x240>)
 80163ac:	2200      	movs	r2, #0
 80163ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80163b0:	4b05      	ldr	r3, [pc, #20]	@ (80163c8 <ip4_input+0x240>)
 80163b2:	2200      	movs	r2, #0
 80163b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80163b6:	4b04      	ldr	r3, [pc, #16]	@ (80163c8 <ip4_input+0x240>)
 80163b8:	2200      	movs	r2, #0
 80163ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80163bc:	2300      	movs	r3, #0
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3718      	adds	r7, #24
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	20009e1c 	.word	0x20009e1c
 80163cc:	2000d564 	.word	0x2000d564

080163d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b08a      	sub	sp, #40	@ 0x28
 80163d4:	af04      	add	r7, sp, #16
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	60b9      	str	r1, [r7, #8]
 80163da:	607a      	str	r2, [r7, #4]
 80163dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d009      	beq.n	80163fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d003      	beq.n	80163f6 <ip4_output_if+0x26>
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d102      	bne.n	80163fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80163f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f8:	3304      	adds	r3, #4
 80163fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80163fc:	78fa      	ldrb	r2, [r7, #3]
 80163fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016400:	9302      	str	r3, [sp, #8]
 8016402:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016406:	9301      	str	r3, [sp, #4]
 8016408:	f897 3020 	ldrb.w	r3, [r7, #32]
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	4613      	mov	r3, r2
 8016410:	687a      	ldr	r2, [r7, #4]
 8016412:	6979      	ldr	r1, [r7, #20]
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	f000 f805 	bl	8016424 <ip4_output_if_src>
 801641a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801641c:	4618      	mov	r0, r3
 801641e:	3718      	adds	r7, #24
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b088      	sub	sp, #32
 8016428:	af00      	add	r7, sp, #0
 801642a:	60f8      	str	r0, [r7, #12]
 801642c:	60b9      	str	r1, [r7, #8]
 801642e:	607a      	str	r2, [r7, #4]
 8016430:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	7b9b      	ldrb	r3, [r3, #14]
 8016436:	2b01      	cmp	r3, #1
 8016438:	d006      	beq.n	8016448 <ip4_output_if_src+0x24>
 801643a:	4b4b      	ldr	r3, [pc, #300]	@ (8016568 <ip4_output_if_src+0x144>)
 801643c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016440:	494a      	ldr	r1, [pc, #296]	@ (801656c <ip4_output_if_src+0x148>)
 8016442:	484b      	ldr	r0, [pc, #300]	@ (8016570 <ip4_output_if_src+0x14c>)
 8016444:	f001 fed8 	bl	80181f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d060      	beq.n	8016510 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801644e:	2314      	movs	r3, #20
 8016450:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016452:	2114      	movs	r1, #20
 8016454:	68f8      	ldr	r0, [r7, #12]
 8016456:	f7f8 fd67 	bl	800ef28 <pbuf_add_header>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d002      	beq.n	8016466 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016460:	f06f 0301 	mvn.w	r3, #1
 8016464:	e07c      	b.n	8016560 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	895b      	ldrh	r3, [r3, #10]
 8016470:	2b13      	cmp	r3, #19
 8016472:	d806      	bhi.n	8016482 <ip4_output_if_src+0x5e>
 8016474:	4b3c      	ldr	r3, [pc, #240]	@ (8016568 <ip4_output_if_src+0x144>)
 8016476:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801647a:	493e      	ldr	r1, [pc, #248]	@ (8016574 <ip4_output_if_src+0x150>)
 801647c:	483c      	ldr	r0, [pc, #240]	@ (8016570 <ip4_output_if_src+0x14c>)
 801647e:	f001 febb 	bl	80181f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016482:	69fb      	ldr	r3, [r7, #28]
 8016484:	78fa      	ldrb	r2, [r7, #3]
 8016486:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016488:	69fb      	ldr	r3, [r7, #28]
 801648a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801648e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681a      	ldr	r2, [r3, #0]
 8016494:	69fb      	ldr	r3, [r7, #28]
 8016496:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016498:	8b7b      	ldrh	r3, [r7, #26]
 801649a:	089b      	lsrs	r3, r3, #2
 801649c:	b29b      	uxth	r3, r3
 801649e:	b2db      	uxtb	r3, r3
 80164a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164a4:	b2da      	uxtb	r2, r3
 80164a6:	69fb      	ldr	r3, [r7, #28]
 80164a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80164aa:	69fb      	ldr	r3, [r7, #28]
 80164ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80164b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	891b      	ldrh	r3, [r3, #8]
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7f7 f9da 	bl	800d870 <lwip_htons>
 80164bc:	4603      	mov	r3, r0
 80164be:	461a      	mov	r2, r3
 80164c0:	69fb      	ldr	r3, [r7, #28]
 80164c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	2200      	movs	r2, #0
 80164c8:	719a      	strb	r2, [r3, #6]
 80164ca:	2200      	movs	r2, #0
 80164cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80164ce:	4b2a      	ldr	r3, [pc, #168]	@ (8016578 <ip4_output_if_src+0x154>)
 80164d0:	881b      	ldrh	r3, [r3, #0]
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7f7 f9cc 	bl	800d870 <lwip_htons>
 80164d8:	4603      	mov	r3, r0
 80164da:	461a      	mov	r2, r3
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80164e0:	4b25      	ldr	r3, [pc, #148]	@ (8016578 <ip4_output_if_src+0x154>)
 80164e2:	881b      	ldrh	r3, [r3, #0]
 80164e4:	3301      	adds	r3, #1
 80164e6:	b29a      	uxth	r2, r3
 80164e8:	4b23      	ldr	r3, [pc, #140]	@ (8016578 <ip4_output_if_src+0x154>)
 80164ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d104      	bne.n	80164fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80164f2:	4b22      	ldr	r3, [pc, #136]	@ (801657c <ip4_output_if_src+0x158>)
 80164f4:	681a      	ldr	r2, [r3, #0]
 80164f6:	69fb      	ldr	r3, [r7, #28]
 80164f8:	60da      	str	r2, [r3, #12]
 80164fa:	e003      	b.n	8016504 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80164fc:	68bb      	ldr	r3, [r7, #8]
 80164fe:	681a      	ldr	r2, [r3, #0]
 8016500:	69fb      	ldr	r3, [r7, #28]
 8016502:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016504:	69fb      	ldr	r3, [r7, #28]
 8016506:	2200      	movs	r2, #0
 8016508:	729a      	strb	r2, [r3, #10]
 801650a:	2200      	movs	r2, #0
 801650c:	72da      	strb	r2, [r3, #11]
 801650e:	e00f      	b.n	8016530 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	895b      	ldrh	r3, [r3, #10]
 8016514:	2b13      	cmp	r3, #19
 8016516:	d802      	bhi.n	801651e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016518:	f06f 0301 	mvn.w	r3, #1
 801651c:	e020      	b.n	8016560 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	685b      	ldr	r3, [r3, #4]
 8016522:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	691b      	ldr	r3, [r3, #16]
 8016528:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801652a:	f107 0314 	add.w	r3, r7, #20
 801652e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016532:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016534:	2b00      	cmp	r3, #0
 8016536:	d00c      	beq.n	8016552 <ip4_output_if_src+0x12e>
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	891a      	ldrh	r2, [r3, #8]
 801653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801653e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016540:	429a      	cmp	r2, r3
 8016542:	d906      	bls.n	8016552 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f000 fd53 	bl	8016ff4 <ip4_frag>
 801654e:	4603      	mov	r3, r0
 8016550:	e006      	b.n	8016560 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016554:	695b      	ldr	r3, [r3, #20]
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	68f9      	ldr	r1, [r7, #12]
 801655a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801655c:	4798      	blx	r3
 801655e:	4603      	mov	r3, r0
}
 8016560:	4618      	mov	r0, r3
 8016562:	3720      	adds	r7, #32
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}
 8016568:	0801b88c 	.word	0x0801b88c
 801656c:	0801b8c0 	.word	0x0801b8c0
 8016570:	0801b8cc 	.word	0x0801b8cc
 8016574:	0801b8f4 	.word	0x0801b8f4
 8016578:	2000d6c2 	.word	0x2000d6c2
 801657c:	0801bd80 	.word	0x0801bd80

08016580 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016580:	b480      	push	{r7}
 8016582:	b085      	sub	sp, #20
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016594:	d002      	beq.n	801659c <ip4_addr_isbroadcast_u32+0x1c>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d101      	bne.n	80165a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801659c:	2301      	movs	r3, #1
 801659e:	e02a      	b.n	80165f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165a6:	f003 0302 	and.w	r3, r3, #2
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d101      	bne.n	80165b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	e021      	b.n	80165f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	3304      	adds	r3, #4
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d101      	bne.n	80165c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80165be:	2300      	movs	r3, #0
 80165c0:	e019      	b.n	80165f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80165c2:	68fa      	ldr	r2, [r7, #12]
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	3304      	adds	r3, #4
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	405a      	eors	r2, r3
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	3308      	adds	r3, #8
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	4013      	ands	r3, r2
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d10d      	bne.n	80165f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	3308      	adds	r3, #8
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	43da      	mvns	r2, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	3308      	adds	r3, #8
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d101      	bne.n	80165f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80165f0:	2301      	movs	r3, #1
 80165f2:	e000      	b.n	80165f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80165f4:	2300      	movs	r3, #0
  }
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3714      	adds	r7, #20
 80165fa:	46bd      	mov	sp, r7
 80165fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016600:	4770      	bx	lr
	...

08016604 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801660a:	2300      	movs	r3, #0
 801660c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801660e:	4b12      	ldr	r3, [pc, #72]	@ (8016658 <ip_reass_tmr+0x54>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016614:	e018      	b.n	8016648 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	7fdb      	ldrb	r3, [r3, #31]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d00b      	beq.n	8016636 <ip_reass_tmr+0x32>
      r->timer--;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	7fdb      	ldrb	r3, [r3, #31]
 8016622:	3b01      	subs	r3, #1
 8016624:	b2da      	uxtb	r2, r3
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	60fb      	str	r3, [r7, #12]
 8016634:	e008      	b.n	8016648 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016640:	68b9      	ldr	r1, [r7, #8]
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	f000 f80a 	bl	801665c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d1e3      	bne.n	8016616 <ip_reass_tmr+0x12>
    }
  }
}
 801664e:	bf00      	nop
 8016650:	bf00      	nop
 8016652:	3710      	adds	r7, #16
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}
 8016658:	2000d6c4 	.word	0x2000d6c4

0801665c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b088      	sub	sp, #32
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016666:	2300      	movs	r3, #0
 8016668:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801666a:	683a      	ldr	r2, [r7, #0]
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	429a      	cmp	r2, r3
 8016670:	d105      	bne.n	801667e <ip_reass_free_complete_datagram+0x22>
 8016672:	4b45      	ldr	r3, [pc, #276]	@ (8016788 <ip_reass_free_complete_datagram+0x12c>)
 8016674:	22ab      	movs	r2, #171	@ 0xab
 8016676:	4945      	ldr	r1, [pc, #276]	@ (801678c <ip_reass_free_complete_datagram+0x130>)
 8016678:	4845      	ldr	r0, [pc, #276]	@ (8016790 <ip_reass_free_complete_datagram+0x134>)
 801667a:	f001 fdbd 	bl	80181f8 <iprintf>
  if (prev != NULL) {
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00a      	beq.n	801669a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	429a      	cmp	r2, r3
 801668c:	d005      	beq.n	801669a <ip_reass_free_complete_datagram+0x3e>
 801668e:	4b3e      	ldr	r3, [pc, #248]	@ (8016788 <ip_reass_free_complete_datagram+0x12c>)
 8016690:	22ad      	movs	r2, #173	@ 0xad
 8016692:	4940      	ldr	r1, [pc, #256]	@ (8016794 <ip_reass_free_complete_datagram+0x138>)
 8016694:	483e      	ldr	r0, [pc, #248]	@ (8016790 <ip_reass_free_complete_datagram+0x134>)
 8016696:	f001 fdaf 	bl	80181f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	685b      	ldr	r3, [r3, #4]
 80166a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	889b      	ldrh	r3, [r3, #4]
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d12a      	bne.n	8016702 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80166ba:	69bb      	ldr	r3, [r7, #24]
 80166bc:	6858      	ldr	r0, [r3, #4]
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	3308      	adds	r3, #8
 80166c2:	2214      	movs	r2, #20
 80166c4:	4619      	mov	r1, r3
 80166c6:	f001 fec8 	bl	801845a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80166ca:	2101      	movs	r1, #1
 80166cc:	69b8      	ldr	r0, [r7, #24]
 80166ce:	f7ff fc47 	bl	8015f60 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80166d2:	69b8      	ldr	r0, [r7, #24]
 80166d4:	f7f8 fd4c 	bl	800f170 <pbuf_clen>
 80166d8:	4603      	mov	r3, r0
 80166da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80166dc:	8bfa      	ldrh	r2, [r7, #30]
 80166de:	8a7b      	ldrh	r3, [r7, #18]
 80166e0:	4413      	add	r3, r2
 80166e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80166e6:	db05      	blt.n	80166f4 <ip_reass_free_complete_datagram+0x98>
 80166e8:	4b27      	ldr	r3, [pc, #156]	@ (8016788 <ip_reass_free_complete_datagram+0x12c>)
 80166ea:	22bc      	movs	r2, #188	@ 0xbc
 80166ec:	492a      	ldr	r1, [pc, #168]	@ (8016798 <ip_reass_free_complete_datagram+0x13c>)
 80166ee:	4828      	ldr	r0, [pc, #160]	@ (8016790 <ip_reass_free_complete_datagram+0x134>)
 80166f0:	f001 fd82 	bl	80181f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80166f4:	8bfa      	ldrh	r2, [r7, #30]
 80166f6:	8a7b      	ldrh	r3, [r7, #18]
 80166f8:	4413      	add	r3, r2
 80166fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80166fc:	69b8      	ldr	r0, [r7, #24]
 80166fe:	f7f8 fca9 	bl	800f054 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016708:	e01f      	b.n	801674a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016714:	697b      	ldr	r3, [r7, #20]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f7f8 fd28 	bl	800f170 <pbuf_clen>
 8016720:	4603      	mov	r3, r0
 8016722:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016724:	8bfa      	ldrh	r2, [r7, #30]
 8016726:	8a7b      	ldrh	r3, [r7, #18]
 8016728:	4413      	add	r3, r2
 801672a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801672e:	db05      	blt.n	801673c <ip_reass_free_complete_datagram+0xe0>
 8016730:	4b15      	ldr	r3, [pc, #84]	@ (8016788 <ip_reass_free_complete_datagram+0x12c>)
 8016732:	22cc      	movs	r2, #204	@ 0xcc
 8016734:	4918      	ldr	r1, [pc, #96]	@ (8016798 <ip_reass_free_complete_datagram+0x13c>)
 8016736:	4816      	ldr	r0, [pc, #88]	@ (8016790 <ip_reass_free_complete_datagram+0x134>)
 8016738:	f001 fd5e 	bl	80181f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801673c:	8bfa      	ldrh	r2, [r7, #30]
 801673e:	8a7b      	ldrh	r3, [r7, #18]
 8016740:	4413      	add	r3, r2
 8016742:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016744:	68f8      	ldr	r0, [r7, #12]
 8016746:	f7f8 fc85 	bl	800f054 <pbuf_free>
  while (p != NULL) {
 801674a:	69bb      	ldr	r3, [r7, #24]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d1dc      	bne.n	801670a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016750:	6839      	ldr	r1, [r7, #0]
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 f8c2 	bl	80168dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016758:	4b10      	ldr	r3, [pc, #64]	@ (801679c <ip_reass_free_complete_datagram+0x140>)
 801675a:	881b      	ldrh	r3, [r3, #0]
 801675c:	8bfa      	ldrh	r2, [r7, #30]
 801675e:	429a      	cmp	r2, r3
 8016760:	d905      	bls.n	801676e <ip_reass_free_complete_datagram+0x112>
 8016762:	4b09      	ldr	r3, [pc, #36]	@ (8016788 <ip_reass_free_complete_datagram+0x12c>)
 8016764:	22d2      	movs	r2, #210	@ 0xd2
 8016766:	490e      	ldr	r1, [pc, #56]	@ (80167a0 <ip_reass_free_complete_datagram+0x144>)
 8016768:	4809      	ldr	r0, [pc, #36]	@ (8016790 <ip_reass_free_complete_datagram+0x134>)
 801676a:	f001 fd45 	bl	80181f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801676e:	4b0b      	ldr	r3, [pc, #44]	@ (801679c <ip_reass_free_complete_datagram+0x140>)
 8016770:	881a      	ldrh	r2, [r3, #0]
 8016772:	8bfb      	ldrh	r3, [r7, #30]
 8016774:	1ad3      	subs	r3, r2, r3
 8016776:	b29a      	uxth	r2, r3
 8016778:	4b08      	ldr	r3, [pc, #32]	@ (801679c <ip_reass_free_complete_datagram+0x140>)
 801677a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801677c:	8bfb      	ldrh	r3, [r7, #30]
}
 801677e:	4618      	mov	r0, r3
 8016780:	3720      	adds	r7, #32
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	0801b924 	.word	0x0801b924
 801678c:	0801b960 	.word	0x0801b960
 8016790:	0801b96c 	.word	0x0801b96c
 8016794:	0801b994 	.word	0x0801b994
 8016798:	0801b9a8 	.word	0x0801b9a8
 801679c:	2000d6c8 	.word	0x2000d6c8
 80167a0:	0801b9c8 	.word	0x0801b9c8

080167a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b08a      	sub	sp, #40	@ 0x28
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80167ae:	2300      	movs	r3, #0
 80167b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80167b2:	2300      	movs	r3, #0
 80167b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80167b6:	2300      	movs	r3, #0
 80167b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80167ba:	2300      	movs	r3, #0
 80167bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80167be:	2300      	movs	r3, #0
 80167c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80167c2:	4b28      	ldr	r3, [pc, #160]	@ (8016864 <ip_reass_remove_oldest_datagram+0xc0>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80167c8:	e030      	b.n	801682c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80167ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167cc:	695a      	ldr	r2, [r3, #20]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d10c      	bne.n	80167f0 <ip_reass_remove_oldest_datagram+0x4c>
 80167d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167d8:	699a      	ldr	r2, [r3, #24]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	691b      	ldr	r3, [r3, #16]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d106      	bne.n	80167f0 <ip_reass_remove_oldest_datagram+0x4c>
 80167e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167e4:	899a      	ldrh	r2, [r3, #12]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	889b      	ldrh	r3, [r3, #4]
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d014      	beq.n	801681a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80167f0:	693b      	ldr	r3, [r7, #16]
 80167f2:	3301      	adds	r3, #1
 80167f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80167f6:	6a3b      	ldr	r3, [r7, #32]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d104      	bne.n	8016806 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80167fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	61bb      	str	r3, [r7, #24]
 8016804:	e009      	b.n	801681a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016808:	7fda      	ldrb	r2, [r3, #31]
 801680a:	6a3b      	ldr	r3, [r7, #32]
 801680c:	7fdb      	ldrb	r3, [r3, #31]
 801680e:	429a      	cmp	r2, r3
 8016810:	d803      	bhi.n	801681a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016814:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016816:	69fb      	ldr	r3, [r7, #28]
 8016818:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d001      	beq.n	8016826 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016824:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801682e:	2b00      	cmp	r3, #0
 8016830:	d1cb      	bne.n	80167ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016832:	6a3b      	ldr	r3, [r7, #32]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d008      	beq.n	801684a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016838:	69b9      	ldr	r1, [r7, #24]
 801683a:	6a38      	ldr	r0, [r7, #32]
 801683c:	f7ff ff0e 	bl	801665c <ip_reass_free_complete_datagram>
 8016840:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016842:	697a      	ldr	r2, [r7, #20]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	4413      	add	r3, r2
 8016848:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801684a:	697a      	ldr	r2, [r7, #20]
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	429a      	cmp	r2, r3
 8016850:	da02      	bge.n	8016858 <ip_reass_remove_oldest_datagram+0xb4>
 8016852:	693b      	ldr	r3, [r7, #16]
 8016854:	2b01      	cmp	r3, #1
 8016856:	dcac      	bgt.n	80167b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016858:	697b      	ldr	r3, [r7, #20]
}
 801685a:	4618      	mov	r0, r3
 801685c:	3728      	adds	r7, #40	@ 0x28
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	2000d6c4 	.word	0x2000d6c4

08016868 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b084      	sub	sp, #16
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016872:	2004      	movs	r0, #4
 8016874:	f7f7 fcd4 	bl	800e220 <memp_malloc>
 8016878:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d110      	bne.n	80168a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016880:	6839      	ldr	r1, [r7, #0]
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	f7ff ff8e 	bl	80167a4 <ip_reass_remove_oldest_datagram>
 8016888:	4602      	mov	r2, r0
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	4293      	cmp	r3, r2
 801688e:	dc03      	bgt.n	8016898 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016890:	2004      	movs	r0, #4
 8016892:	f7f7 fcc5 	bl	800e220 <memp_malloc>
 8016896:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d101      	bne.n	80168a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801689e:	2300      	movs	r3, #0
 80168a0:	e016      	b.n	80168d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80168a2:	2220      	movs	r2, #32
 80168a4:	2100      	movs	r1, #0
 80168a6:	68f8      	ldr	r0, [r7, #12]
 80168a8:	f001 fd0b 	bl	80182c2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	220f      	movs	r2, #15
 80168b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80168b2:	4b09      	ldr	r3, [pc, #36]	@ (80168d8 <ip_reass_enqueue_new_datagram+0x70>)
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80168ba:	4a07      	ldr	r2, [pc, #28]	@ (80168d8 <ip_reass_enqueue_new_datagram+0x70>)
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	3308      	adds	r3, #8
 80168c4:	2214      	movs	r2, #20
 80168c6:	6879      	ldr	r1, [r7, #4]
 80168c8:	4618      	mov	r0, r3
 80168ca:	f001 fdc6 	bl	801845a <memcpy>
  return ipr;
 80168ce:	68fb      	ldr	r3, [r7, #12]
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	3710      	adds	r7, #16
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	2000d6c4 	.word	0x2000d6c4

080168dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80168e6:	4b10      	ldr	r3, [pc, #64]	@ (8016928 <ip_reass_dequeue_datagram+0x4c>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	687a      	ldr	r2, [r7, #4]
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d104      	bne.n	80168fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	4a0c      	ldr	r2, [pc, #48]	@ (8016928 <ip_reass_dequeue_datagram+0x4c>)
 80168f6:	6013      	str	r3, [r2, #0]
 80168f8:	e00d      	b.n	8016916 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d106      	bne.n	801690e <ip_reass_dequeue_datagram+0x32>
 8016900:	4b0a      	ldr	r3, [pc, #40]	@ (801692c <ip_reass_dequeue_datagram+0x50>)
 8016902:	f240 1245 	movw	r2, #325	@ 0x145
 8016906:	490a      	ldr	r1, [pc, #40]	@ (8016930 <ip_reass_dequeue_datagram+0x54>)
 8016908:	480a      	ldr	r0, [pc, #40]	@ (8016934 <ip_reass_dequeue_datagram+0x58>)
 801690a:	f001 fc75 	bl	80181f8 <iprintf>
    prev->next = ipr->next;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681a      	ldr	r2, [r3, #0]
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016916:	6879      	ldr	r1, [r7, #4]
 8016918:	2004      	movs	r0, #4
 801691a:	f7f7 fcf7 	bl	800e30c <memp_free>
}
 801691e:	bf00      	nop
 8016920:	3708      	adds	r7, #8
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	2000d6c4 	.word	0x2000d6c4
 801692c:	0801b924 	.word	0x0801b924
 8016930:	0801b9ec 	.word	0x0801b9ec
 8016934:	0801b96c 	.word	0x0801b96c

08016938 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b08c      	sub	sp, #48	@ 0x30
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016944:	2300      	movs	r3, #0
 8016946:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016948:	2301      	movs	r3, #1
 801694a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	685b      	ldr	r3, [r3, #4]
 8016950:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	885b      	ldrh	r3, [r3, #2]
 8016956:	b29b      	uxth	r3, r3
 8016958:	4618      	mov	r0, r3
 801695a:	f7f6 ff89 	bl	800d870 <lwip_htons>
 801695e:	4603      	mov	r3, r0
 8016960:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	781b      	ldrb	r3, [r3, #0]
 8016966:	f003 030f 	and.w	r3, r3, #15
 801696a:	b2db      	uxtb	r3, r3
 801696c:	009b      	lsls	r3, r3, #2
 801696e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016970:	7e7b      	ldrb	r3, [r7, #25]
 8016972:	b29b      	uxth	r3, r3
 8016974:	8b7a      	ldrh	r2, [r7, #26]
 8016976:	429a      	cmp	r2, r3
 8016978:	d202      	bcs.n	8016980 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801697a:	f04f 33ff 	mov.w	r3, #4294967295
 801697e:	e135      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016980:	7e7b      	ldrb	r3, [r7, #25]
 8016982:	b29b      	uxth	r3, r3
 8016984:	8b7a      	ldrh	r2, [r7, #26]
 8016986:	1ad3      	subs	r3, r2, r3
 8016988:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801698a:	69fb      	ldr	r3, [r7, #28]
 801698c:	88db      	ldrh	r3, [r3, #6]
 801698e:	b29b      	uxth	r3, r3
 8016990:	4618      	mov	r0, r3
 8016992:	f7f6 ff6d 	bl	800d870 <lwip_htons>
 8016996:	4603      	mov	r3, r0
 8016998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801699c:	b29b      	uxth	r3, r3
 801699e:	00db      	lsls	r3, r3, #3
 80169a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80169a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169aa:	2200      	movs	r2, #0
 80169ac:	701a      	strb	r2, [r3, #0]
 80169ae:	2200      	movs	r2, #0
 80169b0:	705a      	strb	r2, [r3, #1]
 80169b2:	2200      	movs	r2, #0
 80169b4:	709a      	strb	r2, [r3, #2]
 80169b6:	2200      	movs	r2, #0
 80169b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80169ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169bc:	8afa      	ldrh	r2, [r7, #22]
 80169be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80169c0:	8afa      	ldrh	r2, [r7, #22]
 80169c2:	8b7b      	ldrh	r3, [r7, #26]
 80169c4:	4413      	add	r3, r2
 80169c6:	b29a      	uxth	r2, r3
 80169c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80169cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169ce:	88db      	ldrh	r3, [r3, #6]
 80169d0:	b29b      	uxth	r3, r3
 80169d2:	8afa      	ldrh	r2, [r7, #22]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d902      	bls.n	80169de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169d8:	f04f 33ff 	mov.w	r3, #4294967295
 80169dc:	e106      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80169e4:	e068      	b.n	8016ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80169e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80169ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169ee:	889b      	ldrh	r3, [r3, #4]
 80169f0:	b29a      	uxth	r2, r3
 80169f2:	693b      	ldr	r3, [r7, #16]
 80169f4:	889b      	ldrh	r3, [r3, #4]
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d235      	bcs.n	8016a68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80169fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d020      	beq.n	8016a4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a0a:	889b      	ldrh	r3, [r3, #4]
 8016a0c:	b29a      	uxth	r2, r3
 8016a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a10:	88db      	ldrh	r3, [r3, #6]
 8016a12:	b29b      	uxth	r3, r3
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d307      	bcc.n	8016a28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a1a:	88db      	ldrh	r3, [r3, #6]
 8016a1c:	b29a      	uxth	r2, r3
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	889b      	ldrh	r3, [r3, #4]
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d902      	bls.n	8016a2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a28:	f04f 33ff 	mov.w	r3, #4294967295
 8016a2c:	e0de      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a30:	68ba      	ldr	r2, [r7, #8]
 8016a32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a36:	88db      	ldrh	r3, [r3, #6]
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a3c:	889b      	ldrh	r3, [r3, #4]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d03d      	beq.n	8016ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a44:	2300      	movs	r3, #0
 8016a46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016a48:	e03a      	b.n	8016ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a4c:	88db      	ldrh	r3, [r3, #6]
 8016a4e:	b29a      	uxth	r2, r3
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	889b      	ldrh	r3, [r3, #4]
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d902      	bls.n	8016a60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a5e:	e0c5      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	605a      	str	r2, [r3, #4]
      break;
 8016a66:	e02b      	b.n	8016ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a6a:	889b      	ldrh	r3, [r3, #4]
 8016a6c:	b29a      	uxth	r2, r3
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	889b      	ldrh	r3, [r3, #4]
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	429a      	cmp	r2, r3
 8016a76:	d102      	bne.n	8016a7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a78:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7c:	e0b6      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a80:	889b      	ldrh	r3, [r3, #4]
 8016a82:	b29a      	uxth	r2, r3
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	88db      	ldrh	r3, [r3, #6]
 8016a88:	b29b      	uxth	r3, r3
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d202      	bcs.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8016a92:	e0ab      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d009      	beq.n	8016aae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a9c:	88db      	ldrh	r3, [r3, #6]
 8016a9e:	b29a      	uxth	r2, r3
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	889b      	ldrh	r3, [r3, #4]
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d001      	beq.n	8016aae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d193      	bne.n	80169e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016abe:	e000      	b.n	8016ac2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016ac0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d12d      	bne.n	8016b24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d01c      	beq.n	8016b08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ad0:	88db      	ldrh	r3, [r3, #6]
 8016ad2:	b29a      	uxth	r2, r3
 8016ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ad6:	889b      	ldrh	r3, [r3, #4]
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d906      	bls.n	8016aec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016ade:	4b45      	ldr	r3, [pc, #276]	@ (8016bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ae0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016ae4:	4944      	ldr	r1, [pc, #272]	@ (8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016ae6:	4845      	ldr	r0, [pc, #276]	@ (8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ae8:	f001 fb86 	bl	80181f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016aee:	68ba      	ldr	r2, [r7, #8]
 8016af0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016af4:	88db      	ldrh	r3, [r3, #6]
 8016af6:	b29a      	uxth	r2, r3
 8016af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016afa:	889b      	ldrh	r3, [r3, #4]
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d010      	beq.n	8016b24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016b02:	2300      	movs	r3, #0
 8016b04:	623b      	str	r3, [r7, #32]
 8016b06:	e00d      	b.n	8016b24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d006      	beq.n	8016b1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016b10:	4b38      	ldr	r3, [pc, #224]	@ (8016bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b12:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016b16:	493a      	ldr	r1, [pc, #232]	@ (8016c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b18:	4838      	ldr	r0, [pc, #224]	@ (8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b1a:	f001 fb6d 	bl	80181f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	68ba      	ldr	r2, [r7, #8]
 8016b22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d105      	bne.n	8016b36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	7f9b      	ldrb	r3, [r3, #30]
 8016b2e:	f003 0301 	and.w	r3, r3, #1
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d059      	beq.n	8016bea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016b36:	6a3b      	ldr	r3, [r7, #32]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d04f      	beq.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d006      	beq.n	8016b52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	685b      	ldr	r3, [r3, #4]
 8016b48:	685b      	ldr	r3, [r3, #4]
 8016b4a:	889b      	ldrh	r3, [r3, #4]
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d002      	beq.n	8016b58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016b52:	2300      	movs	r3, #0
 8016b54:	623b      	str	r3, [r7, #32]
 8016b56:	e041      	b.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016b62:	e012      	b.n	8016b8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b66:	685b      	ldr	r3, [r3, #4]
 8016b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b6c:	88db      	ldrh	r3, [r3, #6]
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b72:	889b      	ldrh	r3, [r3, #4]
 8016b74:	b29b      	uxth	r3, r3
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d002      	beq.n	8016b80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	623b      	str	r3, [r7, #32]
            break;
 8016b7e:	e007      	b.n	8016b90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b82:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1e9      	bne.n	8016b64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016b90:	6a3b      	ldr	r3, [r7, #32]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d022      	beq.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d106      	bne.n	8016bac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016b9e:	4b15      	ldr	r3, [pc, #84]	@ (8016bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ba0:	f240 12df 	movw	r2, #479	@ 0x1df
 8016ba4:	4917      	ldr	r1, [pc, #92]	@ (8016c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016ba6:	4815      	ldr	r0, [pc, #84]	@ (8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ba8:	f001 fb26 	bl	80181f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	685b      	ldr	r3, [r3, #4]
 8016bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d106      	bne.n	8016bc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8016bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016bbe:	4911      	ldr	r1, [pc, #68]	@ (8016c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016bc0:	480e      	ldr	r0, [pc, #56]	@ (8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bc2:	f001 fb19 	bl	80181f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d006      	beq.n	8016bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016bce:	4b09      	ldr	r3, [pc, #36]	@ (8016bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bd0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016bd4:	490c      	ldr	r1, [pc, #48]	@ (8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016bd6:	4809      	ldr	r0, [pc, #36]	@ (8016bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bd8:	f001 fb0e 	bl	80181f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016bdc:	6a3b      	ldr	r3, [r7, #32]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	bf14      	ite	ne
 8016be2:	2301      	movne	r3, #1
 8016be4:	2300      	moveq	r3, #0
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	e000      	b.n	8016bec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016bea:	2300      	movs	r3, #0
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	3730      	adds	r7, #48	@ 0x30
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	0801b924 	.word	0x0801b924
 8016bf8:	0801ba08 	.word	0x0801ba08
 8016bfc:	0801b96c 	.word	0x0801b96c
 8016c00:	0801ba28 	.word	0x0801ba28
 8016c04:	0801ba60 	.word	0x0801ba60
 8016c08:	0801ba70 	.word	0x0801ba70

08016c0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b08e      	sub	sp, #56	@ 0x38
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	f003 030f 	and.w	r3, r3, #15
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	2b14      	cmp	r3, #20
 8016c2a:	f040 8171 	bne.w	8016f10 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c30:	88db      	ldrh	r3, [r3, #6]
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7f6 fe1b 	bl	800d870 <lwip_htons>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	00db      	lsls	r3, r3, #3
 8016c44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c48:	885b      	ldrh	r3, [r3, #2]
 8016c4a:	b29b      	uxth	r3, r3
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7f6 fe0f 	bl	800d870 <lwip_htons>
 8016c52:	4603      	mov	r3, r0
 8016c54:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	f003 030f 	and.w	r3, r3, #15
 8016c5e:	b2db      	uxtb	r3, r3
 8016c60:	009b      	lsls	r3, r3, #2
 8016c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016c66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	f0c0 8150 	bcc.w	8016f14 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016c74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016c7c:	1ad3      	subs	r3, r2, r3
 8016c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7f8 fa75 	bl	800f170 <pbuf_clen>
 8016c86:	4603      	mov	r3, r0
 8016c88:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8016ebc <ip4_reass+0x2b0>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	8c3b      	ldrh	r3, [r7, #32]
 8016c92:	4413      	add	r3, r2
 8016c94:	2b0a      	cmp	r3, #10
 8016c96:	dd10      	ble.n	8016cba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016c98:	8c3b      	ldrh	r3, [r7, #32]
 8016c9a:	4619      	mov	r1, r3
 8016c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c9e:	f7ff fd81 	bl	80167a4 <ip_reass_remove_oldest_datagram>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	f000 8137 	beq.w	8016f18 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016caa:	4b84      	ldr	r3, [pc, #528]	@ (8016ebc <ip4_reass+0x2b0>)
 8016cac:	881b      	ldrh	r3, [r3, #0]
 8016cae:	461a      	mov	r2, r3
 8016cb0:	8c3b      	ldrh	r3, [r7, #32]
 8016cb2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016cb4:	2b0a      	cmp	r3, #10
 8016cb6:	f300 812f 	bgt.w	8016f18 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016cba:	4b81      	ldr	r3, [pc, #516]	@ (8016ec0 <ip4_reass+0x2b4>)
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8016cc0:	e015      	b.n	8016cee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cc4:	695a      	ldr	r2, [r3, #20]
 8016cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cc8:	68db      	ldr	r3, [r3, #12]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d10c      	bne.n	8016ce8 <ip4_reass+0xdc>
 8016cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cd0:	699a      	ldr	r2, [r3, #24]
 8016cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cd4:	691b      	ldr	r3, [r3, #16]
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	d106      	bne.n	8016ce8 <ip4_reass+0xdc>
 8016cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cdc:	899a      	ldrh	r2, [r3, #12]
 8016cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ce0:	889b      	ldrh	r3, [r3, #4]
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d006      	beq.n	8016cf6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8016cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d1e6      	bne.n	8016cc2 <ip4_reass+0xb6>
 8016cf4:	e000      	b.n	8016cf8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016cf6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d109      	bne.n	8016d12 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016cfe:	8c3b      	ldrh	r3, [r7, #32]
 8016d00:	4619      	mov	r1, r3
 8016d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016d04:	f7ff fdb0 	bl	8016868 <ip_reass_enqueue_new_datagram>
 8016d08:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d11c      	bne.n	8016d4a <ip4_reass+0x13e>
      goto nullreturn;
 8016d10:	e105      	b.n	8016f1e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d14:	88db      	ldrh	r3, [r3, #6]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7f6 fda9 	bl	800d870 <lwip_htons>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d110      	bne.n	8016d4a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d2a:	89db      	ldrh	r3, [r3, #14]
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f6 fd9f 	bl	800d870 <lwip_htons>
 8016d32:	4603      	mov	r3, r0
 8016d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d006      	beq.n	8016d4a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d3e:	3308      	adds	r3, #8
 8016d40:	2214      	movs	r2, #20
 8016d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016d44:	4618      	mov	r0, r3
 8016d46:	f001 fb88 	bl	801845a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d4c:	88db      	ldrh	r3, [r3, #6]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	f003 0320 	and.w	r3, r3, #32
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	bf0c      	ite	eq
 8016d58:	2301      	moveq	r3, #1
 8016d5a:	2300      	movne	r3, #0
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016d60:	69fb      	ldr	r3, [r7, #28]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00e      	beq.n	8016d84 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016d68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016d6a:	4413      	add	r3, r2
 8016d6c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016d6e:	8b7a      	ldrh	r2, [r7, #26]
 8016d70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016d72:	429a      	cmp	r2, r3
 8016d74:	f0c0 80a0 	bcc.w	8016eb8 <ip4_reass+0x2ac>
 8016d78:	8b7b      	ldrh	r3, [r7, #26]
 8016d7a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016d7e:	4293      	cmp	r3, r2
 8016d80:	f200 809a 	bhi.w	8016eb8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016d84:	69fa      	ldr	r2, [r7, #28]
 8016d86:	6879      	ldr	r1, [r7, #4]
 8016d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d8a:	f7ff fdd5 	bl	8016938 <ip_reass_chain_frag_into_datagram_and_validate>
 8016d8e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d96:	f000 809b 	beq.w	8016ed0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016d9a:	4b48      	ldr	r3, [pc, #288]	@ (8016ebc <ip4_reass+0x2b0>)
 8016d9c:	881a      	ldrh	r2, [r3, #0]
 8016d9e:	8c3b      	ldrh	r3, [r7, #32]
 8016da0:	4413      	add	r3, r2
 8016da2:	b29a      	uxth	r2, r3
 8016da4:	4b45      	ldr	r3, [pc, #276]	@ (8016ebc <ip4_reass+0x2b0>)
 8016da6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d00d      	beq.n	8016dca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016dae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016db2:	4413      	add	r3, r2
 8016db4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016db8:	8a7a      	ldrh	r2, [r7, #18]
 8016dba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dbe:	7f9b      	ldrb	r3, [r3, #30]
 8016dc0:	f043 0301 	orr.w	r3, r3, #1
 8016dc4:	b2da      	uxtb	r2, r3
 8016dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dc8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016dca:	697b      	ldr	r3, [r7, #20]
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	d171      	bne.n	8016eb4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dd2:	8b9b      	ldrh	r3, [r3, #28]
 8016dd4:	3314      	adds	r3, #20
 8016dd6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dec:	3308      	adds	r3, #8
 8016dee:	2214      	movs	r2, #20
 8016df0:	4619      	mov	r1, r3
 8016df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016df4:	f001 fb31 	bl	801845a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016df8:	8a3b      	ldrh	r3, [r7, #16]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f7f6 fd38 	bl	800d870 <lwip_htons>
 8016e00:	4603      	mov	r3, r0
 8016e02:	461a      	mov	r2, r3
 8016e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e06:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	719a      	strb	r2, [r3, #6]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e14:	2200      	movs	r2, #0
 8016e16:	729a      	strb	r2, [r3, #10]
 8016e18:	2200      	movs	r2, #0
 8016e1a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016e22:	e00d      	b.n	8016e40 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016e2a:	2114      	movs	r1, #20
 8016e2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016e2e:	f7f8 f88b 	bl	800ef48 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016e32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f7f8 f9db 	bl	800f1f0 <pbuf_cat>
      r = iprh->next_pbuf;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d1ee      	bne.n	8016e24 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016e46:	4b1e      	ldr	r3, [pc, #120]	@ (8016ec0 <ip4_reass+0x2b4>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	d102      	bne.n	8016e56 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016e50:	2300      	movs	r3, #0
 8016e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016e54:	e010      	b.n	8016e78 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e56:	4b1a      	ldr	r3, [pc, #104]	@ (8016ec0 <ip4_reass+0x2b4>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016e5c:	e007      	b.n	8016e6e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016e64:	429a      	cmp	r2, r3
 8016e66:	d006      	beq.n	8016e76 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d1f4      	bne.n	8016e5e <ip4_reass+0x252>
 8016e74:	e000      	b.n	8016e78 <ip4_reass+0x26c>
          break;
 8016e76:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016e7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016e7c:	f7ff fd2e 	bl	80168dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f7f8 f975 	bl	800f170 <pbuf_clen>
 8016e86:	4603      	mov	r3, r0
 8016e88:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8016ebc <ip4_reass+0x2b0>)
 8016e8c:	881b      	ldrh	r3, [r3, #0]
 8016e8e:	8c3a      	ldrh	r2, [r7, #32]
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d906      	bls.n	8016ea2 <ip4_reass+0x296>
 8016e94:	4b0b      	ldr	r3, [pc, #44]	@ (8016ec4 <ip4_reass+0x2b8>)
 8016e96:	f240 229b 	movw	r2, #667	@ 0x29b
 8016e9a:	490b      	ldr	r1, [pc, #44]	@ (8016ec8 <ip4_reass+0x2bc>)
 8016e9c:	480b      	ldr	r0, [pc, #44]	@ (8016ecc <ip4_reass+0x2c0>)
 8016e9e:	f001 f9ab 	bl	80181f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016ea2:	4b06      	ldr	r3, [pc, #24]	@ (8016ebc <ip4_reass+0x2b0>)
 8016ea4:	881a      	ldrh	r2, [r3, #0]
 8016ea6:	8c3b      	ldrh	r3, [r7, #32]
 8016ea8:	1ad3      	subs	r3, r2, r3
 8016eaa:	b29a      	uxth	r2, r3
 8016eac:	4b03      	ldr	r3, [pc, #12]	@ (8016ebc <ip4_reass+0x2b0>)
 8016eae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	e038      	b.n	8016f26 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	e036      	b.n	8016f26 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016eb8:	bf00      	nop
 8016eba:	e00a      	b.n	8016ed2 <ip4_reass+0x2c6>
 8016ebc:	2000d6c8 	.word	0x2000d6c8
 8016ec0:	2000d6c4 	.word	0x2000d6c4
 8016ec4:	0801b924 	.word	0x0801b924
 8016ec8:	0801ba94 	.word	0x0801ba94
 8016ecc:	0801b96c 	.word	0x0801b96c
    goto nullreturn_ipr;
 8016ed0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d106      	bne.n	8016ee6 <ip4_reass+0x2da>
 8016ed8:	4b15      	ldr	r3, [pc, #84]	@ (8016f30 <ip4_reass+0x324>)
 8016eda:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016ede:	4915      	ldr	r1, [pc, #84]	@ (8016f34 <ip4_reass+0x328>)
 8016ee0:	4815      	ldr	r0, [pc, #84]	@ (8016f38 <ip4_reass+0x32c>)
 8016ee2:	f001 f989 	bl	80181f8 <iprintf>
  if (ipr->p == NULL) {
 8016ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d116      	bne.n	8016f1c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016eee:	4b13      	ldr	r3, [pc, #76]	@ (8016f3c <ip4_reass+0x330>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d006      	beq.n	8016f06 <ip4_reass+0x2fa>
 8016ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8016f30 <ip4_reass+0x324>)
 8016efa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016efe:	4910      	ldr	r1, [pc, #64]	@ (8016f40 <ip4_reass+0x334>)
 8016f00:	480d      	ldr	r0, [pc, #52]	@ (8016f38 <ip4_reass+0x32c>)
 8016f02:	f001 f979 	bl	80181f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016f06:	2100      	movs	r1, #0
 8016f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016f0a:	f7ff fce7 	bl	80168dc <ip_reass_dequeue_datagram>
 8016f0e:	e006      	b.n	8016f1e <ip4_reass+0x312>
    goto nullreturn;
 8016f10:	bf00      	nop
 8016f12:	e004      	b.n	8016f1e <ip4_reass+0x312>
    goto nullreturn;
 8016f14:	bf00      	nop
 8016f16:	e002      	b.n	8016f1e <ip4_reass+0x312>
      goto nullreturn;
 8016f18:	bf00      	nop
 8016f1a:	e000      	b.n	8016f1e <ip4_reass+0x312>
  }

nullreturn:
 8016f1c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f7f8 f898 	bl	800f054 <pbuf_free>
  return NULL;
 8016f24:	2300      	movs	r3, #0
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3738      	adds	r7, #56	@ 0x38
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	0801b924 	.word	0x0801b924
 8016f34:	0801bab0 	.word	0x0801bab0
 8016f38:	0801b96c 	.word	0x0801b96c
 8016f3c:	2000d6c4 	.word	0x2000d6c4
 8016f40:	0801babc 	.word	0x0801babc

08016f44 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016f48:	2005      	movs	r0, #5
 8016f4a:	f7f7 f969 	bl	800e220 <memp_malloc>
 8016f4e:	4603      	mov	r3, r0
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	bd80      	pop	{r7, pc}

08016f54 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d106      	bne.n	8016f70 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016f62:	4b07      	ldr	r3, [pc, #28]	@ (8016f80 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016f64:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016f68:	4906      	ldr	r1, [pc, #24]	@ (8016f84 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016f6a:	4807      	ldr	r0, [pc, #28]	@ (8016f88 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016f6c:	f001 f944 	bl	80181f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016f70:	6879      	ldr	r1, [r7, #4]
 8016f72:	2005      	movs	r0, #5
 8016f74:	f7f7 f9ca 	bl	800e30c <memp_free>
}
 8016f78:	bf00      	nop
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	0801b924 	.word	0x0801b924
 8016f84:	0801badc 	.word	0x0801badc
 8016f88:	0801b96c 	.word	0x0801b96c

08016f8c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b084      	sub	sp, #16
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d106      	bne.n	8016fac <ipfrag_free_pbuf_custom+0x20>
 8016f9e:	4b11      	ldr	r3, [pc, #68]	@ (8016fe4 <ipfrag_free_pbuf_custom+0x58>)
 8016fa0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016fa4:	4910      	ldr	r1, [pc, #64]	@ (8016fe8 <ipfrag_free_pbuf_custom+0x5c>)
 8016fa6:	4811      	ldr	r0, [pc, #68]	@ (8016fec <ipfrag_free_pbuf_custom+0x60>)
 8016fa8:	f001 f926 	bl	80181f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016fac:	68fa      	ldr	r2, [r7, #12]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	d006      	beq.n	8016fc2 <ipfrag_free_pbuf_custom+0x36>
 8016fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8016fe4 <ipfrag_free_pbuf_custom+0x58>)
 8016fb6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016fba:	490d      	ldr	r1, [pc, #52]	@ (8016ff0 <ipfrag_free_pbuf_custom+0x64>)
 8016fbc:	480b      	ldr	r0, [pc, #44]	@ (8016fec <ipfrag_free_pbuf_custom+0x60>)
 8016fbe:	f001 f91b 	bl	80181f8 <iprintf>
  if (pcr->original != NULL) {
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	695b      	ldr	r3, [r3, #20]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d004      	beq.n	8016fd4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	695b      	ldr	r3, [r3, #20]
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f7f8 f840 	bl	800f054 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016fd4:	68f8      	ldr	r0, [r7, #12]
 8016fd6:	f7ff ffbd 	bl	8016f54 <ip_frag_free_pbuf_custom_ref>
}
 8016fda:	bf00      	nop
 8016fdc:	3710      	adds	r7, #16
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	0801b924 	.word	0x0801b924
 8016fe8:	0801bae8 	.word	0x0801bae8
 8016fec:	0801b96c 	.word	0x0801b96c
 8016ff0:	0801baf4 	.word	0x0801baf4

08016ff4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b094      	sub	sp, #80	@ 0x50
 8016ff8:	af02      	add	r7, sp, #8
 8016ffa:	60f8      	str	r0, [r7, #12]
 8016ffc:	60b9      	str	r1, [r7, #8]
 8016ffe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017000:	2300      	movs	r3, #0
 8017002:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801700a:	3b14      	subs	r3, #20
 801700c:	2b00      	cmp	r3, #0
 801700e:	da00      	bge.n	8017012 <ip4_frag+0x1e>
 8017010:	3307      	adds	r3, #7
 8017012:	10db      	asrs	r3, r3, #3
 8017014:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017016:	2314      	movs	r3, #20
 8017018:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017022:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	f003 030f 	and.w	r3, r3, #15
 801702c:	b2db      	uxtb	r3, r3
 801702e:	009b      	lsls	r3, r3, #2
 8017030:	b2db      	uxtb	r3, r3
 8017032:	2b14      	cmp	r3, #20
 8017034:	d002      	beq.n	801703c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017036:	f06f 0305 	mvn.w	r3, #5
 801703a:	e110      	b.n	801725e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	895b      	ldrh	r3, [r3, #10]
 8017040:	2b13      	cmp	r3, #19
 8017042:	d809      	bhi.n	8017058 <ip4_frag+0x64>
 8017044:	4b88      	ldr	r3, [pc, #544]	@ (8017268 <ip4_frag+0x274>)
 8017046:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801704a:	4988      	ldr	r1, [pc, #544]	@ (801726c <ip4_frag+0x278>)
 801704c:	4888      	ldr	r0, [pc, #544]	@ (8017270 <ip4_frag+0x27c>)
 801704e:	f001 f8d3 	bl	80181f8 <iprintf>
 8017052:	f06f 0305 	mvn.w	r3, #5
 8017056:	e102      	b.n	801725e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705a:	88db      	ldrh	r3, [r3, #6]
 801705c:	b29b      	uxth	r3, r3
 801705e:	4618      	mov	r0, r3
 8017060:	f7f6 fc06 	bl	800d870 <lwip_htons>
 8017064:	4603      	mov	r3, r0
 8017066:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017068:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801706a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801706e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017072:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017078:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	891b      	ldrh	r3, [r3, #8]
 801707e:	3b14      	subs	r3, #20
 8017080:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017084:	e0e1      	b.n	801724a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017086:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017088:	00db      	lsls	r3, r3, #3
 801708a:	b29b      	uxth	r3, r3
 801708c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017090:	4293      	cmp	r3, r2
 8017092:	bf28      	it	cs
 8017094:	4613      	movcs	r3, r2
 8017096:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017098:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801709c:	2114      	movs	r1, #20
 801709e:	200e      	movs	r0, #14
 80170a0:	f7f7 fcf4 	bl	800ea8c <pbuf_alloc>
 80170a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80170a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	f000 80d5 	beq.w	8017258 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80170ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b0:	895b      	ldrh	r3, [r3, #10]
 80170b2:	2b13      	cmp	r3, #19
 80170b4:	d806      	bhi.n	80170c4 <ip4_frag+0xd0>
 80170b6:	4b6c      	ldr	r3, [pc, #432]	@ (8017268 <ip4_frag+0x274>)
 80170b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80170bc:	496d      	ldr	r1, [pc, #436]	@ (8017274 <ip4_frag+0x280>)
 80170be:	486c      	ldr	r0, [pc, #432]	@ (8017270 <ip4_frag+0x27c>)
 80170c0:	f001 f89a 	bl	80181f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80170c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	2214      	movs	r2, #20
 80170ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80170cc:	4618      	mov	r0, r3
 80170ce:	f001 f9c4 	bl	801845a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80170d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80170d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80170da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80170de:	e064      	b.n	80171aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	895a      	ldrh	r2, [r3, #10]
 80170e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80170e6:	1ad3      	subs	r3, r2, r3
 80170e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	895b      	ldrh	r3, [r3, #10]
 80170ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d906      	bls.n	8017102 <ip4_frag+0x10e>
 80170f4:	4b5c      	ldr	r3, [pc, #368]	@ (8017268 <ip4_frag+0x274>)
 80170f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80170fa:	495f      	ldr	r1, [pc, #380]	@ (8017278 <ip4_frag+0x284>)
 80170fc:	485c      	ldr	r0, [pc, #368]	@ (8017270 <ip4_frag+0x27c>)
 80170fe:	f001 f87b 	bl	80181f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017102:	8bfa      	ldrh	r2, [r7, #30]
 8017104:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017108:	4293      	cmp	r3, r2
 801710a:	bf28      	it	cs
 801710c:	4613      	movcs	r3, r2
 801710e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017116:	2b00      	cmp	r3, #0
 8017118:	d105      	bne.n	8017126 <ip4_frag+0x132>
        poff = 0;
 801711a:	2300      	movs	r3, #0
 801711c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	60fb      	str	r3, [r7, #12]
        continue;
 8017124:	e041      	b.n	80171aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017126:	f7ff ff0d 	bl	8016f44 <ip_frag_alloc_pbuf_custom_ref>
 801712a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801712c:	69bb      	ldr	r3, [r7, #24]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d103      	bne.n	801713a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017134:	f7f7 ff8e 	bl	800f054 <pbuf_free>
        goto memerr;
 8017138:	e08f      	b.n	801725a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801713a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017140:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017142:	4413      	add	r3, r2
 8017144:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017148:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801714c:	9201      	str	r2, [sp, #4]
 801714e:	9300      	str	r3, [sp, #0]
 8017150:	4603      	mov	r3, r0
 8017152:	2241      	movs	r2, #65	@ 0x41
 8017154:	2000      	movs	r0, #0
 8017156:	f7f7 fdc3 	bl	800ece0 <pbuf_alloced_custom>
 801715a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d106      	bne.n	8017170 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017162:	69b8      	ldr	r0, [r7, #24]
 8017164:	f7ff fef6 	bl	8016f54 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017168:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801716a:	f7f7 ff73 	bl	800f054 <pbuf_free>
        goto memerr;
 801716e:	e074      	b.n	801725a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f7f8 f815 	bl	800f1a0 <pbuf_ref>
      pcr->original = p;
 8017176:	69bb      	ldr	r3, [r7, #24]
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	4a3f      	ldr	r2, [pc, #252]	@ (801727c <ip4_frag+0x288>)
 8017180:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017182:	6979      	ldr	r1, [r7, #20]
 8017184:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017186:	f7f8 f833 	bl	800f1f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801718a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801718e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017192:	1ad3      	subs	r3, r2, r3
 8017194:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017198:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801719c:	2b00      	cmp	r3, #0
 801719e:	d004      	beq.n	80171aa <ip4_frag+0x1b6>
        poff = 0;
 80171a0:	2300      	movs	r3, #0
 80171a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80171aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d196      	bne.n	80170e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80171b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80171b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80171b8:	4413      	add	r3, r2
 80171ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80171c0:	f1a3 0213 	sub.w	r2, r3, #19
 80171c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80171c8:	429a      	cmp	r2, r3
 80171ca:	bfcc      	ite	gt
 80171cc:	2301      	movgt	r3, #1
 80171ce:	2300      	movle	r3, #0
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80171d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80171d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80171de:	6a3b      	ldr	r3, [r7, #32]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d002      	beq.n	80171ea <ip4_frag+0x1f6>
 80171e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d003      	beq.n	80171f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80171ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80171ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80171f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80171f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7f6 fb3b 	bl	800d870 <lwip_htons>
 80171fa:	4603      	mov	r3, r0
 80171fc:	461a      	mov	r2, r3
 80171fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017200:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017202:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017204:	3314      	adds	r3, #20
 8017206:	b29b      	uxth	r3, r3
 8017208:	4618      	mov	r0, r3
 801720a:	f7f6 fb31 	bl	800d870 <lwip_htons>
 801720e:	4603      	mov	r3, r0
 8017210:	461a      	mov	r2, r3
 8017212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017214:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017218:	2200      	movs	r2, #0
 801721a:	729a      	strb	r2, [r3, #10]
 801721c:	2200      	movs	r2, #0
 801721e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	695b      	ldr	r3, [r3, #20]
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017228:	68b8      	ldr	r0, [r7, #8]
 801722a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801722c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801722e:	f7f7 ff11 	bl	800f054 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017232:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017236:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801723e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017242:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017244:	4413      	add	r3, r2
 8017246:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801724a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801724e:	2b00      	cmp	r3, #0
 8017250:	f47f af19 	bne.w	8017086 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017254:	2300      	movs	r3, #0
 8017256:	e002      	b.n	801725e <ip4_frag+0x26a>
      goto memerr;
 8017258:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801725a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801725e:	4618      	mov	r0, r3
 8017260:	3748      	adds	r7, #72	@ 0x48
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	0801b924 	.word	0x0801b924
 801726c:	0801bb00 	.word	0x0801bb00
 8017270:	0801b96c 	.word	0x0801b96c
 8017274:	0801bb1c 	.word	0x0801bb1c
 8017278:	0801bb3c 	.word	0x0801bb3c
 801727c:	08016f8d 	.word	0x08016f8d

08017280 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b086      	sub	sp, #24
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801728a:	230e      	movs	r3, #14
 801728c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	895b      	ldrh	r3, [r3, #10]
 8017292:	2b0e      	cmp	r3, #14
 8017294:	d96e      	bls.n	8017374 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	7bdb      	ldrb	r3, [r3, #15]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d106      	bne.n	80172ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801729e:	683b      	ldr	r3, [r7, #0]
 80172a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80172a4:	3301      	adds	r3, #1
 80172a6:	b2da      	uxtb	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80172b2:	693b      	ldr	r3, [r7, #16]
 80172b4:	7b1a      	ldrb	r2, [r3, #12]
 80172b6:	7b5b      	ldrb	r3, [r3, #13]
 80172b8:	021b      	lsls	r3, r3, #8
 80172ba:	4313      	orrs	r3, r2
 80172bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	f003 0301 	and.w	r3, r3, #1
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d023      	beq.n	8017312 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	2b01      	cmp	r3, #1
 80172d0:	d10f      	bne.n	80172f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	785b      	ldrb	r3, [r3, #1]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d11b      	bne.n	8017312 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80172da:	693b      	ldr	r3, [r7, #16]
 80172dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172de:	2b5e      	cmp	r3, #94	@ 0x5e
 80172e0:	d117      	bne.n	8017312 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	7b5b      	ldrb	r3, [r3, #13]
 80172e6:	f043 0310 	orr.w	r3, r3, #16
 80172ea:	b2da      	uxtb	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	735a      	strb	r2, [r3, #13]
 80172f0:	e00f      	b.n	8017312 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	2206      	movs	r2, #6
 80172f6:	4928      	ldr	r1, [pc, #160]	@ (8017398 <ethernet_input+0x118>)
 80172f8:	4618      	mov	r0, r3
 80172fa:	f000 ffd2 	bl	80182a2 <memcmp>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d106      	bne.n	8017312 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	7b5b      	ldrb	r3, [r3, #13]
 8017308:	f043 0308 	orr.w	r3, r3, #8
 801730c:	b2da      	uxtb	r2, r3
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017312:	89fb      	ldrh	r3, [r7, #14]
 8017314:	2b08      	cmp	r3, #8
 8017316:	d003      	beq.n	8017320 <ethernet_input+0xa0>
 8017318:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801731c:	d014      	beq.n	8017348 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801731e:	e032      	b.n	8017386 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017326:	f003 0308 	and.w	r3, r3, #8
 801732a:	2b00      	cmp	r3, #0
 801732c:	d024      	beq.n	8017378 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801732e:	8afb      	ldrh	r3, [r7, #22]
 8017330:	4619      	mov	r1, r3
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f7f7 fe08 	bl	800ef48 <pbuf_remove_header>
 8017338:	4603      	mov	r3, r0
 801733a:	2b00      	cmp	r3, #0
 801733c:	d11e      	bne.n	801737c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801733e:	6839      	ldr	r1, [r7, #0]
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f7fe ff21 	bl	8016188 <ip4_input>
      break;
 8017346:	e013      	b.n	8017370 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801734e:	f003 0308 	and.w	r3, r3, #8
 8017352:	2b00      	cmp	r3, #0
 8017354:	d014      	beq.n	8017380 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017356:	8afb      	ldrh	r3, [r7, #22]
 8017358:	4619      	mov	r1, r3
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7f7 fdf4 	bl	800ef48 <pbuf_remove_header>
 8017360:	4603      	mov	r3, r0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d10e      	bne.n	8017384 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017366:	6839      	ldr	r1, [r7, #0]
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7fe f8c1 	bl	80154f0 <etharp_input>
      break;
 801736e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017370:	2300      	movs	r3, #0
 8017372:	e00c      	b.n	801738e <ethernet_input+0x10e>
    goto free_and_return;
 8017374:	bf00      	nop
 8017376:	e006      	b.n	8017386 <ethernet_input+0x106>
        goto free_and_return;
 8017378:	bf00      	nop
 801737a:	e004      	b.n	8017386 <ethernet_input+0x106>
        goto free_and_return;
 801737c:	bf00      	nop
 801737e:	e002      	b.n	8017386 <ethernet_input+0x106>
        goto free_and_return;
 8017380:	bf00      	nop
 8017382:	e000      	b.n	8017386 <ethernet_input+0x106>
        goto free_and_return;
 8017384:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	f7f7 fe64 	bl	800f054 <pbuf_free>
  return ERR_OK;
 801738c:	2300      	movs	r3, #0
}
 801738e:	4618      	mov	r0, r3
 8017390:	3718      	adds	r7, #24
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
 8017396:	bf00      	nop
 8017398:	0801bd84 	.word	0x0801bd84

0801739c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801739c:	b580      	push	{r7, lr}
 801739e:	b086      	sub	sp, #24
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	607a      	str	r2, [r7, #4]
 80173a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80173aa:	8c3b      	ldrh	r3, [r7, #32]
 80173ac:	4618      	mov	r0, r3
 80173ae:	f7f6 fa5f 	bl	800d870 <lwip_htons>
 80173b2:	4603      	mov	r3, r0
 80173b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80173b6:	210e      	movs	r1, #14
 80173b8:	68b8      	ldr	r0, [r7, #8]
 80173ba:	f7f7 fdb5 	bl	800ef28 <pbuf_add_header>
 80173be:	4603      	mov	r3, r0
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d125      	bne.n	8017410 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80173ca:	693b      	ldr	r3, [r7, #16]
 80173cc:	8afa      	ldrh	r2, [r7, #22]
 80173ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80173d0:	693b      	ldr	r3, [r7, #16]
 80173d2:	2206      	movs	r2, #6
 80173d4:	6839      	ldr	r1, [r7, #0]
 80173d6:	4618      	mov	r0, r3
 80173d8:	f001 f83f 	bl	801845a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	3306      	adds	r3, #6
 80173e0:	2206      	movs	r2, #6
 80173e2:	6879      	ldr	r1, [r7, #4]
 80173e4:	4618      	mov	r0, r3
 80173e6:	f001 f838 	bl	801845a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80173f0:	2b06      	cmp	r3, #6
 80173f2:	d006      	beq.n	8017402 <ethernet_output+0x66>
 80173f4:	4b0a      	ldr	r3, [pc, #40]	@ (8017420 <ethernet_output+0x84>)
 80173f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80173fa:	490a      	ldr	r1, [pc, #40]	@ (8017424 <ethernet_output+0x88>)
 80173fc:	480a      	ldr	r0, [pc, #40]	@ (8017428 <ethernet_output+0x8c>)
 80173fe:	f000 fefb 	bl	80181f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	699b      	ldr	r3, [r3, #24]
 8017406:	68b9      	ldr	r1, [r7, #8]
 8017408:	68f8      	ldr	r0, [r7, #12]
 801740a:	4798      	blx	r3
 801740c:	4603      	mov	r3, r0
 801740e:	e002      	b.n	8017416 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017410:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017412:	f06f 0301 	mvn.w	r3, #1
}
 8017416:	4618      	mov	r0, r3
 8017418:	3718      	adds	r7, #24
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	0801bb4c 	.word	0x0801bb4c
 8017424:	0801bb84 	.word	0x0801bb84
 8017428:	0801bbb8 	.word	0x0801bbb8

0801742c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b082      	sub	sp, #8
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	2200      	movs	r2, #0
 801743a:	2104      	movs	r1, #4
 801743c:	4618      	mov	r0, r3
 801743e:	f7f2 fd3f 	bl	8009ec0 <osMessageQueueNew>
 8017442:	4602      	mov	r2, r0
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d102      	bne.n	8017456 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017450:	f04f 33ff 	mov.w	r3, #4294967295
 8017454:	e000      	b.n	8017458 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017456:	2300      	movs	r3, #0
}
 8017458:	4618      	mov	r0, r3
 801745a:	3708      	adds	r7, #8
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}

08017460 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b084      	sub	sp, #16
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6818      	ldr	r0, [r3, #0]
 801746e:	4639      	mov	r1, r7
 8017470:	2300      	movs	r3, #0
 8017472:	2200      	movs	r2, #0
 8017474:	f7f2 fd98 	bl	8009fa8 <osMessageQueuePut>
 8017478:	4603      	mov	r3, r0
 801747a:	2b00      	cmp	r3, #0
 801747c:	d102      	bne.n	8017484 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801747e:	2300      	movs	r3, #0
 8017480:	73fb      	strb	r3, [r7, #15]
 8017482:	e001      	b.n	8017488 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017484:	23ff      	movs	r3, #255	@ 0xff
 8017486:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801748c:	4618      	mov	r0, r3
 801748e:	3710      	adds	r7, #16
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b086      	sub	sp, #24
 8017498:	af00      	add	r7, sp, #0
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80174a0:	f7f2 fa1e 	bl	80098e0 <osKernelGetTickCount>
 80174a4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d013      	beq.n	80174d4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	6818      	ldr	r0, [r3, #0]
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2200      	movs	r2, #0
 80174b4:	68b9      	ldr	r1, [r7, #8]
 80174b6:	f7f2 fdd7 	bl	800a068 <osMessageQueueGet>
 80174ba:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d105      	bne.n	80174ce <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80174c2:	f7f2 fa0d 	bl	80098e0 <osKernelGetTickCount>
 80174c6:	4602      	mov	r2, r0
 80174c8:	697b      	ldr	r3, [r7, #20]
 80174ca:	1ad3      	subs	r3, r2, r3
 80174cc:	e00f      	b.n	80174ee <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174ce:	f04f 33ff 	mov.w	r3, #4294967295
 80174d2:	e00c      	b.n	80174ee <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	6818      	ldr	r0, [r3, #0]
 80174d8:	f04f 33ff 	mov.w	r3, #4294967295
 80174dc:	2200      	movs	r2, #0
 80174de:	68b9      	ldr	r1, [r7, #8]
 80174e0:	f7f2 fdc2 	bl	800a068 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80174e4:	f7f2 f9fc 	bl	80098e0 <osKernelGetTickCount>
 80174e8:	4602      	mov	r2, r0
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3718      	adds	r7, #24
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}

080174f6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80174f6:	b480      	push	{r7}
 80174f8:	b083      	sub	sp, #12
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d101      	bne.n	801750a <sys_mbox_valid+0x14>
    return 0;
 8017506:	2300      	movs	r3, #0
 8017508:	e000      	b.n	801750c <sys_mbox_valid+0x16>
  else
    return 1;
 801750a:	2301      	movs	r3, #1
}
 801750c:	4618      	mov	r0, r3
 801750e:	370c      	adds	r7, #12
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr

08017518 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801751c:	2000      	movs	r0, #0
 801751e:	f7f2 faa1 	bl	8009a64 <osMutexNew>
 8017522:	4603      	mov	r3, r0
 8017524:	4a01      	ldr	r2, [pc, #4]	@ (801752c <sys_init+0x14>)
 8017526:	6013      	str	r3, [r2, #0]
#endif
}
 8017528:	bf00      	nop
 801752a:	bd80      	pop	{r7, pc}
 801752c:	2000d6cc 	.word	0x2000d6cc

08017530 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017538:	2000      	movs	r0, #0
 801753a:	f7f2 fa93 	bl	8009a64 <osMutexNew>
 801753e:	4602      	mov	r2, r0
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d102      	bne.n	8017552 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801754c:	f04f 33ff 	mov.w	r3, #4294967295
 8017550:	e000      	b.n	8017554 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017552:	2300      	movs	r3, #0
}
 8017554:	4618      	mov	r0, r3
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	f04f 31ff 	mov.w	r1, #4294967295
 801756c:	4618      	mov	r0, r3
 801756e:	f7f2 faff 	bl	8009b70 <osMutexAcquire>
#endif
}
 8017572:	bf00      	nop
 8017574:	3708      	adds	r7, #8
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}

0801757a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801757a:	b580      	push	{r7, lr}
 801757c:	b082      	sub	sp, #8
 801757e:	af00      	add	r7, sp, #0
 8017580:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	4618      	mov	r0, r3
 8017588:	f7f2 fb3d 	bl	8009c06 <osMutexRelease>
}
 801758c:	bf00      	nop
 801758e:	3708      	adds	r7, #8
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b08e      	sub	sp, #56	@ 0x38
 8017598:	af00      	add	r7, sp, #0
 801759a:	60f8      	str	r0, [r7, #12]
 801759c:	60b9      	str	r1, [r7, #8]
 801759e:	607a      	str	r2, [r7, #4]
 80175a0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80175a2:	f107 0314 	add.w	r3, r7, #20
 80175a6:	2224      	movs	r2, #36	@ 0x24
 80175a8:	2100      	movs	r1, #0
 80175aa:	4618      	mov	r0, r3
 80175ac:	f000 fe89 	bl	80182c2 <memset>
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	617b      	str	r3, [r7, #20]
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80175b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80175bc:	f107 0314 	add.w	r3, r7, #20
 80175c0:	461a      	mov	r2, r3
 80175c2:	6879      	ldr	r1, [r7, #4]
 80175c4:	68b8      	ldr	r0, [r7, #8]
 80175c6:	f7f2 f9a0 	bl	800990a <osThreadNew>
 80175ca:	4603      	mov	r3, r0
#endif
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3738      	adds	r7, #56	@ 0x38
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80175d8:	4b04      	ldr	r3, [pc, #16]	@ (80175ec <sys_arch_protect+0x18>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	f04f 31ff 	mov.w	r1, #4294967295
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7f2 fac5 	bl	8009b70 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80175e6:	2301      	movs	r3, #1
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	2000d6cc 	.word	0x2000d6cc

080175f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80175f8:	4b04      	ldr	r3, [pc, #16]	@ (801760c <sys_arch_unprotect+0x1c>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7f2 fb02 	bl	8009c06 <osMutexRelease>
}
 8017602:	bf00      	nop
 8017604:	3708      	adds	r7, #8
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	2000d6cc 	.word	0x2000d6cc

08017610 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017614:	2200      	movs	r2, #0
 8017616:	4912      	ldr	r1, [pc, #72]	@ (8017660 <MX_USB_DEVICE_Init+0x50>)
 8017618:	4812      	ldr	r0, [pc, #72]	@ (8017664 <MX_USB_DEVICE_Init+0x54>)
 801761a:	f7f0 fde1 	bl	80081e0 <USBD_Init>
 801761e:	4603      	mov	r3, r0
 8017620:	2b00      	cmp	r3, #0
 8017622:	d001      	beq.n	8017628 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017624:	f7e9 f988 	bl	8000938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017628:	490f      	ldr	r1, [pc, #60]	@ (8017668 <MX_USB_DEVICE_Init+0x58>)
 801762a:	480e      	ldr	r0, [pc, #56]	@ (8017664 <MX_USB_DEVICE_Init+0x54>)
 801762c:	f7f0 fe08 	bl	8008240 <USBD_RegisterClass>
 8017630:	4603      	mov	r3, r0
 8017632:	2b00      	cmp	r3, #0
 8017634:	d001      	beq.n	801763a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017636:	f7e9 f97f 	bl	8000938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801763a:	490c      	ldr	r1, [pc, #48]	@ (801766c <MX_USB_DEVICE_Init+0x5c>)
 801763c:	4809      	ldr	r0, [pc, #36]	@ (8017664 <MX_USB_DEVICE_Init+0x54>)
 801763e:	f7f0 fd3f 	bl	80080c0 <USBD_CDC_RegisterInterface>
 8017642:	4603      	mov	r3, r0
 8017644:	2b00      	cmp	r3, #0
 8017646:	d001      	beq.n	801764c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017648:	f7e9 f976 	bl	8000938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801764c:	4805      	ldr	r0, [pc, #20]	@ (8017664 <MX_USB_DEVICE_Init+0x54>)
 801764e:	f7f0 fe2d 	bl	80082ac <USBD_Start>
 8017652:	4603      	mov	r3, r0
 8017654:	2b00      	cmp	r3, #0
 8017656:	d001      	beq.n	801765c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017658:	f7e9 f96e 	bl	8000938 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801765c:	bf00      	nop
 801765e:	bd80      	pop	{r7, pc}
 8017660:	200000e0 	.word	0x200000e0
 8017664:	2000d6d0 	.word	0x2000d6d0
 8017668:	2000002c 	.word	0x2000002c
 801766c:	200000cc 	.word	0x200000cc

08017670 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017674:	2200      	movs	r2, #0
 8017676:	4905      	ldr	r1, [pc, #20]	@ (801768c <CDC_Init_FS+0x1c>)
 8017678:	4805      	ldr	r0, [pc, #20]	@ (8017690 <CDC_Init_FS+0x20>)
 801767a:	f7f0 fd3b 	bl	80080f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801767e:	4905      	ldr	r1, [pc, #20]	@ (8017694 <CDC_Init_FS+0x24>)
 8017680:	4803      	ldr	r0, [pc, #12]	@ (8017690 <CDC_Init_FS+0x20>)
 8017682:	f7f0 fd59 	bl	8008138 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017686:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017688:	4618      	mov	r0, r3
 801768a:	bd80      	pop	{r7, pc}
 801768c:	2000e1ac 	.word	0x2000e1ac
 8017690:	2000d6d0 	.word	0x2000d6d0
 8017694:	2000d9ac 	.word	0x2000d9ac

08017698 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017698:	b480      	push	{r7}
 801769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801769c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801769e:	4618      	mov	r0, r3
 80176a0:	46bd      	mov	sp, r7
 80176a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a6:	4770      	bx	lr

080176a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b083      	sub	sp, #12
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	4603      	mov	r3, r0
 80176b0:	6039      	str	r1, [r7, #0]
 80176b2:	71fb      	strb	r3, [r7, #7]
 80176b4:	4613      	mov	r3, r2
 80176b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80176b8:	79fb      	ldrb	r3, [r7, #7]
 80176ba:	2b23      	cmp	r3, #35	@ 0x23
 80176bc:	d84a      	bhi.n	8017754 <CDC_Control_FS+0xac>
 80176be:	a201      	add	r2, pc, #4	@ (adr r2, 80176c4 <CDC_Control_FS+0x1c>)
 80176c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176c4:	08017755 	.word	0x08017755
 80176c8:	08017755 	.word	0x08017755
 80176cc:	08017755 	.word	0x08017755
 80176d0:	08017755 	.word	0x08017755
 80176d4:	08017755 	.word	0x08017755
 80176d8:	08017755 	.word	0x08017755
 80176dc:	08017755 	.word	0x08017755
 80176e0:	08017755 	.word	0x08017755
 80176e4:	08017755 	.word	0x08017755
 80176e8:	08017755 	.word	0x08017755
 80176ec:	08017755 	.word	0x08017755
 80176f0:	08017755 	.word	0x08017755
 80176f4:	08017755 	.word	0x08017755
 80176f8:	08017755 	.word	0x08017755
 80176fc:	08017755 	.word	0x08017755
 8017700:	08017755 	.word	0x08017755
 8017704:	08017755 	.word	0x08017755
 8017708:	08017755 	.word	0x08017755
 801770c:	08017755 	.word	0x08017755
 8017710:	08017755 	.word	0x08017755
 8017714:	08017755 	.word	0x08017755
 8017718:	08017755 	.word	0x08017755
 801771c:	08017755 	.word	0x08017755
 8017720:	08017755 	.word	0x08017755
 8017724:	08017755 	.word	0x08017755
 8017728:	08017755 	.word	0x08017755
 801772c:	08017755 	.word	0x08017755
 8017730:	08017755 	.word	0x08017755
 8017734:	08017755 	.word	0x08017755
 8017738:	08017755 	.word	0x08017755
 801773c:	08017755 	.word	0x08017755
 8017740:	08017755 	.word	0x08017755
 8017744:	08017755 	.word	0x08017755
 8017748:	08017755 	.word	0x08017755
 801774c:	08017755 	.word	0x08017755
 8017750:	08017755 	.word	0x08017755
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017754:	bf00      	nop
  }

  return (USBD_OK);
 8017756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017758:	4618      	mov	r0, r3
 801775a:	370c      	adds	r7, #12
 801775c:	46bd      	mov	sp, r7
 801775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017762:	4770      	bx	lr

08017764 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801776e:	6879      	ldr	r1, [r7, #4]
 8017770:	4805      	ldr	r0, [pc, #20]	@ (8017788 <CDC_Receive_FS+0x24>)
 8017772:	f7f0 fce1 	bl	8008138 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017776:	4804      	ldr	r0, [pc, #16]	@ (8017788 <CDC_Receive_FS+0x24>)
 8017778:	f7f0 fcfc 	bl	8008174 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801777c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801777e:	4618      	mov	r0, r3
 8017780:	3708      	adds	r7, #8
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	2000d6d0 	.word	0x2000d6d0

0801778c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801778c:	b480      	push	{r7}
 801778e:	b087      	sub	sp, #28
 8017790:	af00      	add	r7, sp, #0
 8017792:	60f8      	str	r0, [r7, #12]
 8017794:	60b9      	str	r1, [r7, #8]
 8017796:	4613      	mov	r3, r2
 8017798:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801779a:	2300      	movs	r3, #0
 801779c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801779e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	371c      	adds	r7, #28
 80177a6:	46bd      	mov	sp, r7
 80177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ac:	4770      	bx	lr
	...

080177b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177b0:	b480      	push	{r7}
 80177b2:	b083      	sub	sp, #12
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	4603      	mov	r3, r0
 80177b8:	6039      	str	r1, [r7, #0]
 80177ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	2212      	movs	r2, #18
 80177c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80177c2:	4b03      	ldr	r3, [pc, #12]	@ (80177d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr
 80177d0:	200000fc 	.word	0x200000fc

080177d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177d4:	b480      	push	{r7}
 80177d6:	b083      	sub	sp, #12
 80177d8:	af00      	add	r7, sp, #0
 80177da:	4603      	mov	r3, r0
 80177dc:	6039      	str	r1, [r7, #0]
 80177de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	2204      	movs	r2, #4
 80177e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80177e6:	4b03      	ldr	r3, [pc, #12]	@ (80177f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80177e8:	4618      	mov	r0, r3
 80177ea:	370c      	adds	r7, #12
 80177ec:	46bd      	mov	sp, r7
 80177ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f2:	4770      	bx	lr
 80177f4:	20000110 	.word	0x20000110

080177f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	4603      	mov	r3, r0
 8017800:	6039      	str	r1, [r7, #0]
 8017802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017804:	79fb      	ldrb	r3, [r7, #7]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d105      	bne.n	8017816 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801780a:	683a      	ldr	r2, [r7, #0]
 801780c:	4907      	ldr	r1, [pc, #28]	@ (801782c <USBD_FS_ProductStrDescriptor+0x34>)
 801780e:	4808      	ldr	r0, [pc, #32]	@ (8017830 <USBD_FS_ProductStrDescriptor+0x38>)
 8017810:	f7f1 fef6 	bl	8009600 <USBD_GetString>
 8017814:	e004      	b.n	8017820 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017816:	683a      	ldr	r2, [r7, #0]
 8017818:	4904      	ldr	r1, [pc, #16]	@ (801782c <USBD_FS_ProductStrDescriptor+0x34>)
 801781a:	4805      	ldr	r0, [pc, #20]	@ (8017830 <USBD_FS_ProductStrDescriptor+0x38>)
 801781c:	f7f1 fef0 	bl	8009600 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017820:	4b02      	ldr	r3, [pc, #8]	@ (801782c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017822:	4618      	mov	r0, r3
 8017824:	3708      	adds	r7, #8
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	2000e9ac 	.word	0x2000e9ac
 8017830:	0801bbe0 	.word	0x0801bbe0

08017834 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	4603      	mov	r3, r0
 801783c:	6039      	str	r1, [r7, #0]
 801783e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017840:	683a      	ldr	r2, [r7, #0]
 8017842:	4904      	ldr	r1, [pc, #16]	@ (8017854 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017844:	4804      	ldr	r0, [pc, #16]	@ (8017858 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017846:	f7f1 fedb 	bl	8009600 <USBD_GetString>
  return USBD_StrDesc;
 801784a:	4b02      	ldr	r3, [pc, #8]	@ (8017854 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801784c:	4618      	mov	r0, r3
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	2000e9ac 	.word	0x2000e9ac
 8017858:	0801bbf8 	.word	0x0801bbf8

0801785c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	4603      	mov	r3, r0
 8017864:	6039      	str	r1, [r7, #0]
 8017866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017868:	683b      	ldr	r3, [r7, #0]
 801786a:	221a      	movs	r2, #26
 801786c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801786e:	f000 f843 	bl	80178f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017872:	4b02      	ldr	r3, [pc, #8]	@ (801787c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017874:	4618      	mov	r0, r3
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}
 801787c:	20000114 	.word	0x20000114

08017880 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	4603      	mov	r3, r0
 8017888:	6039      	str	r1, [r7, #0]
 801788a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801788c:	79fb      	ldrb	r3, [r7, #7]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d105      	bne.n	801789e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017892:	683a      	ldr	r2, [r7, #0]
 8017894:	4907      	ldr	r1, [pc, #28]	@ (80178b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017896:	4808      	ldr	r0, [pc, #32]	@ (80178b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017898:	f7f1 feb2 	bl	8009600 <USBD_GetString>
 801789c:	e004      	b.n	80178a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801789e:	683a      	ldr	r2, [r7, #0]
 80178a0:	4904      	ldr	r1, [pc, #16]	@ (80178b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80178a2:	4805      	ldr	r0, [pc, #20]	@ (80178b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80178a4:	f7f1 feac 	bl	8009600 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178a8:	4b02      	ldr	r3, [pc, #8]	@ (80178b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	2000e9ac 	.word	0x2000e9ac
 80178b8:	0801bc0c 	.word	0x0801bc0c

080178bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	4603      	mov	r3, r0
 80178c4:	6039      	str	r1, [r7, #0]
 80178c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80178c8:	79fb      	ldrb	r3, [r7, #7]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d105      	bne.n	80178da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80178ce:	683a      	ldr	r2, [r7, #0]
 80178d0:	4907      	ldr	r1, [pc, #28]	@ (80178f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80178d2:	4808      	ldr	r0, [pc, #32]	@ (80178f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80178d4:	f7f1 fe94 	bl	8009600 <USBD_GetString>
 80178d8:	e004      	b.n	80178e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	4904      	ldr	r1, [pc, #16]	@ (80178f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80178de:	4805      	ldr	r0, [pc, #20]	@ (80178f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80178e0:	f7f1 fe8e 	bl	8009600 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178e4:	4b02      	ldr	r3, [pc, #8]	@ (80178f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	3708      	adds	r7, #8
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
 80178ee:	bf00      	nop
 80178f0:	2000e9ac 	.word	0x2000e9ac
 80178f4:	0801bc18 	.word	0x0801bc18

080178f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80178fe:	4b0f      	ldr	r3, [pc, #60]	@ (801793c <Get_SerialNum+0x44>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017904:	4b0e      	ldr	r3, [pc, #56]	@ (8017940 <Get_SerialNum+0x48>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801790a:	4b0e      	ldr	r3, [pc, #56]	@ (8017944 <Get_SerialNum+0x4c>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017910:	68fa      	ldr	r2, [r7, #12]
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	4413      	add	r3, r2
 8017916:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d009      	beq.n	8017932 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801791e:	2208      	movs	r2, #8
 8017920:	4909      	ldr	r1, [pc, #36]	@ (8017948 <Get_SerialNum+0x50>)
 8017922:	68f8      	ldr	r0, [r7, #12]
 8017924:	f000 f814 	bl	8017950 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017928:	2204      	movs	r2, #4
 801792a:	4908      	ldr	r1, [pc, #32]	@ (801794c <Get_SerialNum+0x54>)
 801792c:	68b8      	ldr	r0, [r7, #8]
 801792e:	f000 f80f 	bl	8017950 <IntToUnicode>
  }
}
 8017932:	bf00      	nop
 8017934:	3710      	adds	r7, #16
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
 801793a:	bf00      	nop
 801793c:	1fff7a10 	.word	0x1fff7a10
 8017940:	1fff7a14 	.word	0x1fff7a14
 8017944:	1fff7a18 	.word	0x1fff7a18
 8017948:	20000116 	.word	0x20000116
 801794c:	20000126 	.word	0x20000126

08017950 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017950:	b480      	push	{r7}
 8017952:	b087      	sub	sp, #28
 8017954:	af00      	add	r7, sp, #0
 8017956:	60f8      	str	r0, [r7, #12]
 8017958:	60b9      	str	r1, [r7, #8]
 801795a:	4613      	mov	r3, r2
 801795c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801795e:	2300      	movs	r3, #0
 8017960:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017962:	2300      	movs	r3, #0
 8017964:	75fb      	strb	r3, [r7, #23]
 8017966:	e027      	b.n	80179b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	0f1b      	lsrs	r3, r3, #28
 801796c:	2b09      	cmp	r3, #9
 801796e:	d80b      	bhi.n	8017988 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	0f1b      	lsrs	r3, r3, #28
 8017974:	b2da      	uxtb	r2, r3
 8017976:	7dfb      	ldrb	r3, [r7, #23]
 8017978:	005b      	lsls	r3, r3, #1
 801797a:	4619      	mov	r1, r3
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	440b      	add	r3, r1
 8017980:	3230      	adds	r2, #48	@ 0x30
 8017982:	b2d2      	uxtb	r2, r2
 8017984:	701a      	strb	r2, [r3, #0]
 8017986:	e00a      	b.n	801799e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	0f1b      	lsrs	r3, r3, #28
 801798c:	b2da      	uxtb	r2, r3
 801798e:	7dfb      	ldrb	r3, [r7, #23]
 8017990:	005b      	lsls	r3, r3, #1
 8017992:	4619      	mov	r1, r3
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	440b      	add	r3, r1
 8017998:	3237      	adds	r2, #55	@ 0x37
 801799a:	b2d2      	uxtb	r2, r2
 801799c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	011b      	lsls	r3, r3, #4
 80179a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80179a4:	7dfb      	ldrb	r3, [r7, #23]
 80179a6:	005b      	lsls	r3, r3, #1
 80179a8:	3301      	adds	r3, #1
 80179aa:	68ba      	ldr	r2, [r7, #8]
 80179ac:	4413      	add	r3, r2
 80179ae:	2200      	movs	r2, #0
 80179b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80179b2:	7dfb      	ldrb	r3, [r7, #23]
 80179b4:	3301      	adds	r3, #1
 80179b6:	75fb      	strb	r3, [r7, #23]
 80179b8:	7dfa      	ldrb	r2, [r7, #23]
 80179ba:	79fb      	ldrb	r3, [r7, #7]
 80179bc:	429a      	cmp	r2, r3
 80179be:	d3d3      	bcc.n	8017968 <IntToUnicode+0x18>
  }
}
 80179c0:	bf00      	nop
 80179c2:	bf00      	nop
 80179c4:	371c      	adds	r7, #28
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr
	...

080179d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b08a      	sub	sp, #40	@ 0x28
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80179d8:	f107 0314 	add.w	r3, r7, #20
 80179dc:	2200      	movs	r2, #0
 80179de:	601a      	str	r2, [r3, #0]
 80179e0:	605a      	str	r2, [r3, #4]
 80179e2:	609a      	str	r2, [r3, #8]
 80179e4:	60da      	str	r2, [r3, #12]
 80179e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80179f0:	d13a      	bne.n	8017a68 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80179f2:	2300      	movs	r3, #0
 80179f4:	613b      	str	r3, [r7, #16]
 80179f6:	4b1e      	ldr	r3, [pc, #120]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 80179f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80179fa:	4a1d      	ldr	r2, [pc, #116]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 80179fc:	f043 0301 	orr.w	r3, r3, #1
 8017a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8017a02:	4b1b      	ldr	r3, [pc, #108]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 8017a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a06:	f003 0301 	and.w	r3, r3, #1
 8017a0a:	613b      	str	r3, [r7, #16]
 8017a0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017a0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a14:	2302      	movs	r3, #2
 8017a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a1c:	2303      	movs	r3, #3
 8017a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017a20:	230a      	movs	r3, #10
 8017a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a24:	f107 0314 	add.w	r3, r7, #20
 8017a28:	4619      	mov	r1, r3
 8017a2a:	4812      	ldr	r0, [pc, #72]	@ (8017a74 <HAL_PCD_MspInit+0xa4>)
 8017a2c:	f7ea ff2e 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017a30:	4b0f      	ldr	r3, [pc, #60]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 8017a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a34:	4a0e      	ldr	r2, [pc, #56]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 8017a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	60fb      	str	r3, [r7, #12]
 8017a40:	4b0b      	ldr	r3, [pc, #44]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 8017a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a44:	4a0a      	ldr	r2, [pc, #40]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 8017a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017a4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8017a4c:	4b08      	ldr	r3, [pc, #32]	@ (8017a70 <HAL_PCD_MspInit+0xa0>)
 8017a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017a54:	60fb      	str	r3, [r7, #12]
 8017a56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017a58:	2200      	movs	r2, #0
 8017a5a:	2105      	movs	r1, #5
 8017a5c:	2043      	movs	r0, #67	@ 0x43
 8017a5e:	f7e9 fc9b 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017a62:	2043      	movs	r0, #67	@ 0x43
 8017a64:	f7e9 fcb4 	bl	80013d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017a68:	bf00      	nop
 8017a6a:	3728      	adds	r7, #40	@ 0x28
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	40023800 	.word	0x40023800
 8017a74:	40020000 	.word	0x40020000

08017a78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8017a8c:	4619      	mov	r1, r3
 8017a8e:	4610      	mov	r0, r2
 8017a90:	f7f0 fc59 	bl	8008346 <USBD_LL_SetupStage>
}
 8017a94:	bf00      	nop
 8017a96:	3708      	adds	r7, #8
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b082      	sub	sp, #8
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8017aae:	78fa      	ldrb	r2, [r7, #3]
 8017ab0:	6879      	ldr	r1, [r7, #4]
 8017ab2:	4613      	mov	r3, r2
 8017ab4:	00db      	lsls	r3, r3, #3
 8017ab6:	4413      	add	r3, r2
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	440b      	add	r3, r1
 8017abc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8017ac0:	681a      	ldr	r2, [r3, #0]
 8017ac2:	78fb      	ldrb	r3, [r7, #3]
 8017ac4:	4619      	mov	r1, r3
 8017ac6:	f7f0 fc93 	bl	80083f0 <USBD_LL_DataOutStage>
}
 8017aca:	bf00      	nop
 8017acc:	3708      	adds	r7, #8
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}

08017ad2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ad2:	b580      	push	{r7, lr}
 8017ad4:	b082      	sub	sp, #8
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	6078      	str	r0, [r7, #4]
 8017ada:	460b      	mov	r3, r1
 8017adc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8017ae4:	78fa      	ldrb	r2, [r7, #3]
 8017ae6:	6879      	ldr	r1, [r7, #4]
 8017ae8:	4613      	mov	r3, r2
 8017aea:	00db      	lsls	r3, r3, #3
 8017aec:	4413      	add	r3, r2
 8017aee:	009b      	lsls	r3, r3, #2
 8017af0:	440b      	add	r3, r1
 8017af2:	334c      	adds	r3, #76	@ 0x4c
 8017af4:	681a      	ldr	r2, [r3, #0]
 8017af6:	78fb      	ldrb	r3, [r7, #3]
 8017af8:	4619      	mov	r1, r3
 8017afa:	f7f0 fd2c 	bl	8008556 <USBD_LL_DataInStage>
}
 8017afe:	bf00      	nop
 8017b00:	3708      	adds	r7, #8
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}

08017b06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b06:	b580      	push	{r7, lr}
 8017b08:	b082      	sub	sp, #8
 8017b0a:	af00      	add	r7, sp, #0
 8017b0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7f0 fe60 	bl	80087da <USBD_LL_SOF>
}
 8017b1a:	bf00      	nop
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}

08017b22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b22:	b580      	push	{r7, lr}
 8017b24:	b084      	sub	sp, #16
 8017b26:	af00      	add	r7, sp, #0
 8017b28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	68db      	ldr	r3, [r3, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d102      	bne.n	8017b3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017b36:	2300      	movs	r3, #0
 8017b38:	73fb      	strb	r3, [r7, #15]
 8017b3a:	e008      	b.n	8017b4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	68db      	ldr	r3, [r3, #12]
 8017b40:	2b02      	cmp	r3, #2
 8017b42:	d102      	bne.n	8017b4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017b44:	2301      	movs	r3, #1
 8017b46:	73fb      	strb	r3, [r7, #15]
 8017b48:	e001      	b.n	8017b4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017b4a:	f7e8 fef5 	bl	8000938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017b54:	7bfa      	ldrb	r2, [r7, #15]
 8017b56:	4611      	mov	r1, r2
 8017b58:	4618      	mov	r0, r3
 8017b5a:	f7f0 fe00 	bl	800875e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7f0 fda8 	bl	80086ba <USBD_LL_Reset>
}
 8017b6a:	bf00      	nop
 8017b6c:	3710      	adds	r7, #16
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
	...

08017b74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017b82:	4618      	mov	r0, r3
 8017b84:	f7f0 fdfb 	bl	800877e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	687a      	ldr	r2, [r7, #4]
 8017b94:	6812      	ldr	r2, [r2, #0]
 8017b96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017b9a:	f043 0301 	orr.w	r3, r3, #1
 8017b9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	6a1b      	ldr	r3, [r3, #32]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d005      	beq.n	8017bb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ba8:	4b04      	ldr	r3, [pc, #16]	@ (8017bbc <HAL_PCD_SuspendCallback+0x48>)
 8017baa:	691b      	ldr	r3, [r3, #16]
 8017bac:	4a03      	ldr	r2, [pc, #12]	@ (8017bbc <HAL_PCD_SuspendCallback+0x48>)
 8017bae:	f043 0306 	orr.w	r3, r3, #6
 8017bb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017bb4:	bf00      	nop
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	e000ed00 	.word	0xe000ed00

08017bc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b082      	sub	sp, #8
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7f0 fdeb 	bl	80087aa <USBD_LL_Resume>
}
 8017bd4:	bf00      	nop
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}

08017bdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b082      	sub	sp, #8
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	460b      	mov	r3, r1
 8017be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017bee:	78fa      	ldrb	r2, [r7, #3]
 8017bf0:	4611      	mov	r1, r2
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7f0 fe43 	bl	800887e <USBD_LL_IsoOUTIncomplete>
}
 8017bf8:	bf00      	nop
 8017bfa:	3708      	adds	r7, #8
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
 8017c08:	460b      	mov	r3, r1
 8017c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017c12:	78fa      	ldrb	r2, [r7, #3]
 8017c14:	4611      	mov	r1, r2
 8017c16:	4618      	mov	r0, r3
 8017c18:	f7f0 fdff 	bl	800881a <USBD_LL_IsoINIncomplete>
}
 8017c1c:	bf00      	nop
 8017c1e:	3708      	adds	r7, #8
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}

08017c24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017c32:	4618      	mov	r0, r3
 8017c34:	f7f0 fe55 	bl	80088e2 <USBD_LL_DevConnected>
}
 8017c38:	bf00      	nop
 8017c3a:	3708      	adds	r7, #8
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b082      	sub	sp, #8
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7f0 fe52 	bl	80088f8 <USBD_LL_DevDisconnected>
}
 8017c54:	bf00      	nop
 8017c56:	3708      	adds	r7, #8
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd80      	pop	{r7, pc}

08017c5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	781b      	ldrb	r3, [r3, #0]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d13c      	bne.n	8017ce6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017c6c:	4a20      	ldr	r2, [pc, #128]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	4a1e      	ldr	r2, [pc, #120]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c78:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8017c82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017c84:	4b1a      	ldr	r3, [pc, #104]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c86:	2204      	movs	r2, #4
 8017c88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017c8a:	4b19      	ldr	r3, [pc, #100]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c8c:	2202      	movs	r2, #2
 8017c8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017c90:	4b17      	ldr	r3, [pc, #92]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c92:	2200      	movs	r2, #0
 8017c94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017c96:	4b16      	ldr	r3, [pc, #88]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c98:	2202      	movs	r2, #2
 8017c9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017c9c:	4b14      	ldr	r3, [pc, #80]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017ca2:	4b13      	ldr	r3, [pc, #76]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017ca8:	4b11      	ldr	r3, [pc, #68]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017caa:	2200      	movs	r2, #0
 8017cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017cae:	4b10      	ldr	r3, [pc, #64]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017cba:	480d      	ldr	r0, [pc, #52]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017cbc:	f7eb f96b 	bl	8002f96 <HAL_PCD_Init>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d001      	beq.n	8017cca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017cc6:	f7e8 fe37 	bl	8000938 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017cca:	2180      	movs	r1, #128	@ 0x80
 8017ccc:	4808      	ldr	r0, [pc, #32]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017cce:	f7ec fbc2 	bl	8004456 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017cd2:	2240      	movs	r2, #64	@ 0x40
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	4806      	ldr	r0, [pc, #24]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017cd8:	f7ec fb76 	bl	80043c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017cdc:	2280      	movs	r2, #128	@ 0x80
 8017cde:	2101      	movs	r1, #1
 8017ce0:	4803      	ldr	r0, [pc, #12]	@ (8017cf0 <USBD_LL_Init+0x94>)
 8017ce2:	f7ec fb71 	bl	80043c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017ce6:	2300      	movs	r3, #0
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3708      	adds	r7, #8
 8017cec:	46bd      	mov	sp, r7
 8017cee:	bd80      	pop	{r7, pc}
 8017cf0:	2000ebac 	.word	0x2000ebac

08017cf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d00:	2300      	movs	r3, #0
 8017d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f7eb fa60 	bl	80031d0 <HAL_PCD_Start>
 8017d10:	4603      	mov	r3, r0
 8017d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d14:	7bfb      	ldrb	r3, [r7, #15]
 8017d16:	4618      	mov	r0, r3
 8017d18:	f000 f942 	bl	8017fa0 <USBD_Get_USB_Status>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3710      	adds	r7, #16
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}

08017d2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017d2a:	b580      	push	{r7, lr}
 8017d2c:	b084      	sub	sp, #16
 8017d2e:	af00      	add	r7, sp, #0
 8017d30:	6078      	str	r0, [r7, #4]
 8017d32:	4608      	mov	r0, r1
 8017d34:	4611      	mov	r1, r2
 8017d36:	461a      	mov	r2, r3
 8017d38:	4603      	mov	r3, r0
 8017d3a:	70fb      	strb	r3, [r7, #3]
 8017d3c:	460b      	mov	r3, r1
 8017d3e:	70bb      	strb	r3, [r7, #2]
 8017d40:	4613      	mov	r3, r2
 8017d42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d44:	2300      	movs	r3, #0
 8017d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d48:	2300      	movs	r3, #0
 8017d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017d52:	78bb      	ldrb	r3, [r7, #2]
 8017d54:	883a      	ldrh	r2, [r7, #0]
 8017d56:	78f9      	ldrb	r1, [r7, #3]
 8017d58:	f7eb ff31 	bl	8003bbe <HAL_PCD_EP_Open>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d60:	7bfb      	ldrb	r3, [r7, #15]
 8017d62:	4618      	mov	r0, r3
 8017d64:	f000 f91c 	bl	8017fa0 <USBD_Get_USB_Status>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	3710      	adds	r7, #16
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}

08017d76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d76:	b580      	push	{r7, lr}
 8017d78:	b084      	sub	sp, #16
 8017d7a:	af00      	add	r7, sp, #0
 8017d7c:	6078      	str	r0, [r7, #4]
 8017d7e:	460b      	mov	r3, r1
 8017d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d82:	2300      	movs	r3, #0
 8017d84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d86:	2300      	movs	r3, #0
 8017d88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d90:	78fa      	ldrb	r2, [r7, #3]
 8017d92:	4611      	mov	r1, r2
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7eb ff7a 	bl	8003c8e <HAL_PCD_EP_Close>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d9e:	7bfb      	ldrb	r3, [r7, #15]
 8017da0:	4618      	mov	r0, r3
 8017da2:	f000 f8fd 	bl	8017fa0 <USBD_Get_USB_Status>
 8017da6:	4603      	mov	r3, r0
 8017da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dac:	4618      	mov	r0, r3
 8017dae:	3710      	adds	r7, #16
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}

08017db4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b084      	sub	sp, #16
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	460b      	mov	r3, r1
 8017dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017dce:	78fa      	ldrb	r2, [r7, #3]
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f7ec f852 	bl	8003e7c <HAL_PCD_EP_SetStall>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ddc:	7bfb      	ldrb	r3, [r7, #15]
 8017dde:	4618      	mov	r0, r3
 8017de0:	f000 f8de 	bl	8017fa0 <USBD_Get_USB_Status>
 8017de4:	4603      	mov	r3, r0
 8017de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3710      	adds	r7, #16
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}

08017df2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017df2:	b580      	push	{r7, lr}
 8017df4:	b084      	sub	sp, #16
 8017df6:	af00      	add	r7, sp, #0
 8017df8:	6078      	str	r0, [r7, #4]
 8017dfa:	460b      	mov	r3, r1
 8017dfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e02:	2300      	movs	r3, #0
 8017e04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e0c:	78fa      	ldrb	r2, [r7, #3]
 8017e0e:	4611      	mov	r1, r2
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7ec f897 	bl	8003f44 <HAL_PCD_EP_ClrStall>
 8017e16:	4603      	mov	r3, r0
 8017e18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e1a:	7bfb      	ldrb	r3, [r7, #15]
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f000 f8bf 	bl	8017fa0 <USBD_Get_USB_Status>
 8017e22:	4603      	mov	r3, r0
 8017e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3710      	adds	r7, #16
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b085      	sub	sp, #20
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
 8017e38:	460b      	mov	r3, r1
 8017e3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	da0b      	bge.n	8017e64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017e4c:	78fb      	ldrb	r3, [r7, #3]
 8017e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e52:	68f9      	ldr	r1, [r7, #12]
 8017e54:	4613      	mov	r3, r2
 8017e56:	00db      	lsls	r3, r3, #3
 8017e58:	4413      	add	r3, r2
 8017e5a:	009b      	lsls	r3, r3, #2
 8017e5c:	440b      	add	r3, r1
 8017e5e:	333e      	adds	r3, #62	@ 0x3e
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	e00b      	b.n	8017e7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017e64:	78fb      	ldrb	r3, [r7, #3]
 8017e66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e6a:	68f9      	ldr	r1, [r7, #12]
 8017e6c:	4613      	mov	r3, r2
 8017e6e:	00db      	lsls	r3, r3, #3
 8017e70:	4413      	add	r3, r2
 8017e72:	009b      	lsls	r3, r3, #2
 8017e74:	440b      	add	r3, r1
 8017e76:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8017e7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3714      	adds	r7, #20
 8017e80:	46bd      	mov	sp, r7
 8017e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e86:	4770      	bx	lr

08017e88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b084      	sub	sp, #16
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	460b      	mov	r3, r1
 8017e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e94:	2300      	movs	r3, #0
 8017e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e98:	2300      	movs	r3, #0
 8017e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ea2:	78fa      	ldrb	r2, [r7, #3]
 8017ea4:	4611      	mov	r1, r2
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7eb fe64 	bl	8003b74 <HAL_PCD_SetAddress>
 8017eac:	4603      	mov	r3, r0
 8017eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eb0:	7bfb      	ldrb	r3, [r7, #15]
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f000 f874 	bl	8017fa0 <USBD_Get_USB_Status>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	3710      	adds	r7, #16
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bd80      	pop	{r7, pc}

08017ec6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017ec6:	b580      	push	{r7, lr}
 8017ec8:	b086      	sub	sp, #24
 8017eca:	af00      	add	r7, sp, #0
 8017ecc:	60f8      	str	r0, [r7, #12]
 8017ece:	607a      	str	r2, [r7, #4]
 8017ed0:	603b      	str	r3, [r7, #0]
 8017ed2:	460b      	mov	r3, r1
 8017ed4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017eda:	2300      	movs	r3, #0
 8017edc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017ee4:	7af9      	ldrb	r1, [r7, #11]
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	687a      	ldr	r2, [r7, #4]
 8017eea:	f7eb ff7d 	bl	8003de8 <HAL_PCD_EP_Transmit>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ef2:	7dfb      	ldrb	r3, [r7, #23]
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f000 f853 	bl	8017fa0 <USBD_Get_USB_Status>
 8017efa:	4603      	mov	r3, r0
 8017efc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017efe:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	3718      	adds	r7, #24
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b086      	sub	sp, #24
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	607a      	str	r2, [r7, #4]
 8017f12:	603b      	str	r3, [r7, #0]
 8017f14:	460b      	mov	r3, r1
 8017f16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f26:	7af9      	ldrb	r1, [r7, #11]
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	687a      	ldr	r2, [r7, #4]
 8017f2c:	f7eb fef9 	bl	8003d22 <HAL_PCD_EP_Receive>
 8017f30:	4603      	mov	r3, r0
 8017f32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f34:	7dfb      	ldrb	r3, [r7, #23]
 8017f36:	4618      	mov	r0, r3
 8017f38:	f000 f832 	bl	8017fa0 <USBD_Get_USB_Status>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f40:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f42:	4618      	mov	r0, r3
 8017f44:	3718      	adds	r7, #24
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd80      	pop	{r7, pc}

08017f4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f4a:	b580      	push	{r7, lr}
 8017f4c:	b082      	sub	sp, #8
 8017f4e:	af00      	add	r7, sp, #0
 8017f50:	6078      	str	r0, [r7, #4]
 8017f52:	460b      	mov	r3, r1
 8017f54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f5c:	78fa      	ldrb	r2, [r7, #3]
 8017f5e:	4611      	mov	r1, r2
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7eb ff29 	bl	8003db8 <HAL_PCD_EP_GetRxCount>
 8017f66:	4603      	mov	r3, r0
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	3708      	adds	r7, #8
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017f78:	4b03      	ldr	r3, [pc, #12]	@ (8017f88 <USBD_static_malloc+0x18>)
}
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	370c      	adds	r7, #12
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f84:	4770      	bx	lr
 8017f86:	bf00      	nop
 8017f88:	2000f0b8 	.word	0x2000f0b8

08017f8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b083      	sub	sp, #12
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]

}
 8017f94:	bf00      	nop
 8017f96:	370c      	adds	r7, #12
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr

08017fa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	b085      	sub	sp, #20
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017faa:	2300      	movs	r3, #0
 8017fac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017fae:	79fb      	ldrb	r3, [r7, #7]
 8017fb0:	2b03      	cmp	r3, #3
 8017fb2:	d817      	bhi.n	8017fe4 <USBD_Get_USB_Status+0x44>
 8017fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8017fbc <USBD_Get_USB_Status+0x1c>)
 8017fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fba:	bf00      	nop
 8017fbc:	08017fcd 	.word	0x08017fcd
 8017fc0:	08017fd3 	.word	0x08017fd3
 8017fc4:	08017fd9 	.word	0x08017fd9
 8017fc8:	08017fdf 	.word	0x08017fdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	73fb      	strb	r3, [r7, #15]
    break;
 8017fd0:	e00b      	b.n	8017fea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017fd2:	2303      	movs	r3, #3
 8017fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8017fd6:	e008      	b.n	8017fea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	73fb      	strb	r3, [r7, #15]
    break;
 8017fdc:	e005      	b.n	8017fea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017fde:	2303      	movs	r3, #3
 8017fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8017fe2:	e002      	b.n	8017fea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017fe4:	2303      	movs	r3, #3
 8017fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8017fe8:	bf00      	nop
  }
  return usb_status;
 8017fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fec:	4618      	mov	r0, r3
 8017fee:	3714      	adds	r7, #20
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff6:	4770      	bx	lr

08017ff8 <rand>:
 8017ff8:	4b16      	ldr	r3, [pc, #88]	@ (8018054 <rand+0x5c>)
 8017ffa:	b510      	push	{r4, lr}
 8017ffc:	681c      	ldr	r4, [r3, #0]
 8017ffe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018000:	b9b3      	cbnz	r3, 8018030 <rand+0x38>
 8018002:	2018      	movs	r0, #24
 8018004:	f000 faa0 	bl	8018548 <malloc>
 8018008:	4602      	mov	r2, r0
 801800a:	6320      	str	r0, [r4, #48]	@ 0x30
 801800c:	b920      	cbnz	r0, 8018018 <rand+0x20>
 801800e:	4b12      	ldr	r3, [pc, #72]	@ (8018058 <rand+0x60>)
 8018010:	4812      	ldr	r0, [pc, #72]	@ (801805c <rand+0x64>)
 8018012:	2152      	movs	r1, #82	@ 0x52
 8018014:	f000 fa30 	bl	8018478 <__assert_func>
 8018018:	4911      	ldr	r1, [pc, #68]	@ (8018060 <rand+0x68>)
 801801a:	4b12      	ldr	r3, [pc, #72]	@ (8018064 <rand+0x6c>)
 801801c:	e9c0 1300 	strd	r1, r3, [r0]
 8018020:	4b11      	ldr	r3, [pc, #68]	@ (8018068 <rand+0x70>)
 8018022:	6083      	str	r3, [r0, #8]
 8018024:	230b      	movs	r3, #11
 8018026:	8183      	strh	r3, [r0, #12]
 8018028:	2100      	movs	r1, #0
 801802a:	2001      	movs	r0, #1
 801802c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018030:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018032:	480e      	ldr	r0, [pc, #56]	@ (801806c <rand+0x74>)
 8018034:	690b      	ldr	r3, [r1, #16]
 8018036:	694c      	ldr	r4, [r1, #20]
 8018038:	4a0d      	ldr	r2, [pc, #52]	@ (8018070 <rand+0x78>)
 801803a:	4358      	muls	r0, r3
 801803c:	fb02 0004 	mla	r0, r2, r4, r0
 8018040:	fba3 3202 	umull	r3, r2, r3, r2
 8018044:	3301      	adds	r3, #1
 8018046:	eb40 0002 	adc.w	r0, r0, r2
 801804a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801804e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018052:	bd10      	pop	{r4, pc}
 8018054:	2000013c 	.word	0x2000013c
 8018058:	0801bd92 	.word	0x0801bd92
 801805c:	0801bda9 	.word	0x0801bda9
 8018060:	abcd330e 	.word	0xabcd330e
 8018064:	e66d1234 	.word	0xe66d1234
 8018068:	0005deec 	.word	0x0005deec
 801806c:	5851f42d 	.word	0x5851f42d
 8018070:	4c957f2d 	.word	0x4c957f2d

08018074 <std>:
 8018074:	2300      	movs	r3, #0
 8018076:	b510      	push	{r4, lr}
 8018078:	4604      	mov	r4, r0
 801807a:	e9c0 3300 	strd	r3, r3, [r0]
 801807e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018082:	6083      	str	r3, [r0, #8]
 8018084:	8181      	strh	r1, [r0, #12]
 8018086:	6643      	str	r3, [r0, #100]	@ 0x64
 8018088:	81c2      	strh	r2, [r0, #14]
 801808a:	6183      	str	r3, [r0, #24]
 801808c:	4619      	mov	r1, r3
 801808e:	2208      	movs	r2, #8
 8018090:	305c      	adds	r0, #92	@ 0x5c
 8018092:	f000 f916 	bl	80182c2 <memset>
 8018096:	4b0d      	ldr	r3, [pc, #52]	@ (80180cc <std+0x58>)
 8018098:	6263      	str	r3, [r4, #36]	@ 0x24
 801809a:	4b0d      	ldr	r3, [pc, #52]	@ (80180d0 <std+0x5c>)
 801809c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801809e:	4b0d      	ldr	r3, [pc, #52]	@ (80180d4 <std+0x60>)
 80180a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80180a2:	4b0d      	ldr	r3, [pc, #52]	@ (80180d8 <std+0x64>)
 80180a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80180a6:	4b0d      	ldr	r3, [pc, #52]	@ (80180dc <std+0x68>)
 80180a8:	6224      	str	r4, [r4, #32]
 80180aa:	429c      	cmp	r4, r3
 80180ac:	d006      	beq.n	80180bc <std+0x48>
 80180ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80180b2:	4294      	cmp	r4, r2
 80180b4:	d002      	beq.n	80180bc <std+0x48>
 80180b6:	33d0      	adds	r3, #208	@ 0xd0
 80180b8:	429c      	cmp	r4, r3
 80180ba:	d105      	bne.n	80180c8 <std+0x54>
 80180bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80180c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180c4:	f000 b9c6 	b.w	8018454 <__retarget_lock_init_recursive>
 80180c8:	bd10      	pop	{r4, pc}
 80180ca:	bf00      	nop
 80180cc:	0801821d 	.word	0x0801821d
 80180d0:	0801823f 	.word	0x0801823f
 80180d4:	08018277 	.word	0x08018277
 80180d8:	0801829b 	.word	0x0801829b
 80180dc:	2000f2d8 	.word	0x2000f2d8

080180e0 <stdio_exit_handler>:
 80180e0:	4a02      	ldr	r2, [pc, #8]	@ (80180ec <stdio_exit_handler+0xc>)
 80180e2:	4903      	ldr	r1, [pc, #12]	@ (80180f0 <stdio_exit_handler+0x10>)
 80180e4:	4803      	ldr	r0, [pc, #12]	@ (80180f4 <stdio_exit_handler+0x14>)
 80180e6:	f000 b869 	b.w	80181bc <_fwalk_sglue>
 80180ea:	bf00      	nop
 80180ec:	20000130 	.word	0x20000130
 80180f0:	08018d5d 	.word	0x08018d5d
 80180f4:	20000140 	.word	0x20000140

080180f8 <cleanup_stdio>:
 80180f8:	6841      	ldr	r1, [r0, #4]
 80180fa:	4b0c      	ldr	r3, [pc, #48]	@ (801812c <cleanup_stdio+0x34>)
 80180fc:	4299      	cmp	r1, r3
 80180fe:	b510      	push	{r4, lr}
 8018100:	4604      	mov	r4, r0
 8018102:	d001      	beq.n	8018108 <cleanup_stdio+0x10>
 8018104:	f000 fe2a 	bl	8018d5c <_fflush_r>
 8018108:	68a1      	ldr	r1, [r4, #8]
 801810a:	4b09      	ldr	r3, [pc, #36]	@ (8018130 <cleanup_stdio+0x38>)
 801810c:	4299      	cmp	r1, r3
 801810e:	d002      	beq.n	8018116 <cleanup_stdio+0x1e>
 8018110:	4620      	mov	r0, r4
 8018112:	f000 fe23 	bl	8018d5c <_fflush_r>
 8018116:	68e1      	ldr	r1, [r4, #12]
 8018118:	4b06      	ldr	r3, [pc, #24]	@ (8018134 <cleanup_stdio+0x3c>)
 801811a:	4299      	cmp	r1, r3
 801811c:	d004      	beq.n	8018128 <cleanup_stdio+0x30>
 801811e:	4620      	mov	r0, r4
 8018120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018124:	f000 be1a 	b.w	8018d5c <_fflush_r>
 8018128:	bd10      	pop	{r4, pc}
 801812a:	bf00      	nop
 801812c:	2000f2d8 	.word	0x2000f2d8
 8018130:	2000f340 	.word	0x2000f340
 8018134:	2000f3a8 	.word	0x2000f3a8

08018138 <global_stdio_init.part.0>:
 8018138:	b510      	push	{r4, lr}
 801813a:	4b0b      	ldr	r3, [pc, #44]	@ (8018168 <global_stdio_init.part.0+0x30>)
 801813c:	4c0b      	ldr	r4, [pc, #44]	@ (801816c <global_stdio_init.part.0+0x34>)
 801813e:	4a0c      	ldr	r2, [pc, #48]	@ (8018170 <global_stdio_init.part.0+0x38>)
 8018140:	601a      	str	r2, [r3, #0]
 8018142:	4620      	mov	r0, r4
 8018144:	2200      	movs	r2, #0
 8018146:	2104      	movs	r1, #4
 8018148:	f7ff ff94 	bl	8018074 <std>
 801814c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018150:	2201      	movs	r2, #1
 8018152:	2109      	movs	r1, #9
 8018154:	f7ff ff8e 	bl	8018074 <std>
 8018158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801815c:	2202      	movs	r2, #2
 801815e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018162:	2112      	movs	r1, #18
 8018164:	f7ff bf86 	b.w	8018074 <std>
 8018168:	2000f410 	.word	0x2000f410
 801816c:	2000f2d8 	.word	0x2000f2d8
 8018170:	080180e1 	.word	0x080180e1

08018174 <__sfp_lock_acquire>:
 8018174:	4801      	ldr	r0, [pc, #4]	@ (801817c <__sfp_lock_acquire+0x8>)
 8018176:	f000 b96e 	b.w	8018456 <__retarget_lock_acquire_recursive>
 801817a:	bf00      	nop
 801817c:	2000f419 	.word	0x2000f419

08018180 <__sfp_lock_release>:
 8018180:	4801      	ldr	r0, [pc, #4]	@ (8018188 <__sfp_lock_release+0x8>)
 8018182:	f000 b969 	b.w	8018458 <__retarget_lock_release_recursive>
 8018186:	bf00      	nop
 8018188:	2000f419 	.word	0x2000f419

0801818c <__sinit>:
 801818c:	b510      	push	{r4, lr}
 801818e:	4604      	mov	r4, r0
 8018190:	f7ff fff0 	bl	8018174 <__sfp_lock_acquire>
 8018194:	6a23      	ldr	r3, [r4, #32]
 8018196:	b11b      	cbz	r3, 80181a0 <__sinit+0x14>
 8018198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801819c:	f7ff bff0 	b.w	8018180 <__sfp_lock_release>
 80181a0:	4b04      	ldr	r3, [pc, #16]	@ (80181b4 <__sinit+0x28>)
 80181a2:	6223      	str	r3, [r4, #32]
 80181a4:	4b04      	ldr	r3, [pc, #16]	@ (80181b8 <__sinit+0x2c>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d1f5      	bne.n	8018198 <__sinit+0xc>
 80181ac:	f7ff ffc4 	bl	8018138 <global_stdio_init.part.0>
 80181b0:	e7f2      	b.n	8018198 <__sinit+0xc>
 80181b2:	bf00      	nop
 80181b4:	080180f9 	.word	0x080180f9
 80181b8:	2000f410 	.word	0x2000f410

080181bc <_fwalk_sglue>:
 80181bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181c0:	4607      	mov	r7, r0
 80181c2:	4688      	mov	r8, r1
 80181c4:	4614      	mov	r4, r2
 80181c6:	2600      	movs	r6, #0
 80181c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181cc:	f1b9 0901 	subs.w	r9, r9, #1
 80181d0:	d505      	bpl.n	80181de <_fwalk_sglue+0x22>
 80181d2:	6824      	ldr	r4, [r4, #0]
 80181d4:	2c00      	cmp	r4, #0
 80181d6:	d1f7      	bne.n	80181c8 <_fwalk_sglue+0xc>
 80181d8:	4630      	mov	r0, r6
 80181da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181de:	89ab      	ldrh	r3, [r5, #12]
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d907      	bls.n	80181f4 <_fwalk_sglue+0x38>
 80181e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181e8:	3301      	adds	r3, #1
 80181ea:	d003      	beq.n	80181f4 <_fwalk_sglue+0x38>
 80181ec:	4629      	mov	r1, r5
 80181ee:	4638      	mov	r0, r7
 80181f0:	47c0      	blx	r8
 80181f2:	4306      	orrs	r6, r0
 80181f4:	3568      	adds	r5, #104	@ 0x68
 80181f6:	e7e9      	b.n	80181cc <_fwalk_sglue+0x10>

080181f8 <iprintf>:
 80181f8:	b40f      	push	{r0, r1, r2, r3}
 80181fa:	b507      	push	{r0, r1, r2, lr}
 80181fc:	4906      	ldr	r1, [pc, #24]	@ (8018218 <iprintf+0x20>)
 80181fe:	ab04      	add	r3, sp, #16
 8018200:	6808      	ldr	r0, [r1, #0]
 8018202:	f853 2b04 	ldr.w	r2, [r3], #4
 8018206:	6881      	ldr	r1, [r0, #8]
 8018208:	9301      	str	r3, [sp, #4]
 801820a:	f000 fa7d 	bl	8018708 <_vfiprintf_r>
 801820e:	b003      	add	sp, #12
 8018210:	f85d eb04 	ldr.w	lr, [sp], #4
 8018214:	b004      	add	sp, #16
 8018216:	4770      	bx	lr
 8018218:	2000013c 	.word	0x2000013c

0801821c <__sread>:
 801821c:	b510      	push	{r4, lr}
 801821e:	460c      	mov	r4, r1
 8018220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018224:	f000 f8ce 	bl	80183c4 <_read_r>
 8018228:	2800      	cmp	r0, #0
 801822a:	bfab      	itete	ge
 801822c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801822e:	89a3      	ldrhlt	r3, [r4, #12]
 8018230:	181b      	addge	r3, r3, r0
 8018232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018236:	bfac      	ite	ge
 8018238:	6563      	strge	r3, [r4, #84]	@ 0x54
 801823a:	81a3      	strhlt	r3, [r4, #12]
 801823c:	bd10      	pop	{r4, pc}

0801823e <__swrite>:
 801823e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018242:	461f      	mov	r7, r3
 8018244:	898b      	ldrh	r3, [r1, #12]
 8018246:	05db      	lsls	r3, r3, #23
 8018248:	4605      	mov	r5, r0
 801824a:	460c      	mov	r4, r1
 801824c:	4616      	mov	r6, r2
 801824e:	d505      	bpl.n	801825c <__swrite+0x1e>
 8018250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018254:	2302      	movs	r3, #2
 8018256:	2200      	movs	r2, #0
 8018258:	f000 f8a2 	bl	80183a0 <_lseek_r>
 801825c:	89a3      	ldrh	r3, [r4, #12]
 801825e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018266:	81a3      	strh	r3, [r4, #12]
 8018268:	4632      	mov	r2, r6
 801826a:	463b      	mov	r3, r7
 801826c:	4628      	mov	r0, r5
 801826e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018272:	f000 b8b9 	b.w	80183e8 <_write_r>

08018276 <__sseek>:
 8018276:	b510      	push	{r4, lr}
 8018278:	460c      	mov	r4, r1
 801827a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801827e:	f000 f88f 	bl	80183a0 <_lseek_r>
 8018282:	1c43      	adds	r3, r0, #1
 8018284:	89a3      	ldrh	r3, [r4, #12]
 8018286:	bf15      	itete	ne
 8018288:	6560      	strne	r0, [r4, #84]	@ 0x54
 801828a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801828e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018292:	81a3      	strheq	r3, [r4, #12]
 8018294:	bf18      	it	ne
 8018296:	81a3      	strhne	r3, [r4, #12]
 8018298:	bd10      	pop	{r4, pc}

0801829a <__sclose>:
 801829a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801829e:	f000 b819 	b.w	80182d4 <_close_r>

080182a2 <memcmp>:
 80182a2:	b510      	push	{r4, lr}
 80182a4:	3901      	subs	r1, #1
 80182a6:	4402      	add	r2, r0
 80182a8:	4290      	cmp	r0, r2
 80182aa:	d101      	bne.n	80182b0 <memcmp+0xe>
 80182ac:	2000      	movs	r0, #0
 80182ae:	e005      	b.n	80182bc <memcmp+0x1a>
 80182b0:	7803      	ldrb	r3, [r0, #0]
 80182b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80182b6:	42a3      	cmp	r3, r4
 80182b8:	d001      	beq.n	80182be <memcmp+0x1c>
 80182ba:	1b18      	subs	r0, r3, r4
 80182bc:	bd10      	pop	{r4, pc}
 80182be:	3001      	adds	r0, #1
 80182c0:	e7f2      	b.n	80182a8 <memcmp+0x6>

080182c2 <memset>:
 80182c2:	4402      	add	r2, r0
 80182c4:	4603      	mov	r3, r0
 80182c6:	4293      	cmp	r3, r2
 80182c8:	d100      	bne.n	80182cc <memset+0xa>
 80182ca:	4770      	bx	lr
 80182cc:	f803 1b01 	strb.w	r1, [r3], #1
 80182d0:	e7f9      	b.n	80182c6 <memset+0x4>
	...

080182d4 <_close_r>:
 80182d4:	b538      	push	{r3, r4, r5, lr}
 80182d6:	4d06      	ldr	r5, [pc, #24]	@ (80182f0 <_close_r+0x1c>)
 80182d8:	2300      	movs	r3, #0
 80182da:	4604      	mov	r4, r0
 80182dc:	4608      	mov	r0, r1
 80182de:	602b      	str	r3, [r5, #0]
 80182e0:	f7e8 fd34 	bl	8000d4c <_close>
 80182e4:	1c43      	adds	r3, r0, #1
 80182e6:	d102      	bne.n	80182ee <_close_r+0x1a>
 80182e8:	682b      	ldr	r3, [r5, #0]
 80182ea:	b103      	cbz	r3, 80182ee <_close_r+0x1a>
 80182ec:	6023      	str	r3, [r4, #0]
 80182ee:	bd38      	pop	{r3, r4, r5, pc}
 80182f0:	2000f414 	.word	0x2000f414

080182f4 <_reclaim_reent>:
 80182f4:	4b29      	ldr	r3, [pc, #164]	@ (801839c <_reclaim_reent+0xa8>)
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	4283      	cmp	r3, r0
 80182fa:	b570      	push	{r4, r5, r6, lr}
 80182fc:	4604      	mov	r4, r0
 80182fe:	d04b      	beq.n	8018398 <_reclaim_reent+0xa4>
 8018300:	69c3      	ldr	r3, [r0, #28]
 8018302:	b1ab      	cbz	r3, 8018330 <_reclaim_reent+0x3c>
 8018304:	68db      	ldr	r3, [r3, #12]
 8018306:	b16b      	cbz	r3, 8018324 <_reclaim_reent+0x30>
 8018308:	2500      	movs	r5, #0
 801830a:	69e3      	ldr	r3, [r4, #28]
 801830c:	68db      	ldr	r3, [r3, #12]
 801830e:	5959      	ldr	r1, [r3, r5]
 8018310:	2900      	cmp	r1, #0
 8018312:	d13b      	bne.n	801838c <_reclaim_reent+0x98>
 8018314:	3504      	adds	r5, #4
 8018316:	2d80      	cmp	r5, #128	@ 0x80
 8018318:	d1f7      	bne.n	801830a <_reclaim_reent+0x16>
 801831a:	69e3      	ldr	r3, [r4, #28]
 801831c:	4620      	mov	r0, r4
 801831e:	68d9      	ldr	r1, [r3, #12]
 8018320:	f000 f8c8 	bl	80184b4 <_free_r>
 8018324:	69e3      	ldr	r3, [r4, #28]
 8018326:	6819      	ldr	r1, [r3, #0]
 8018328:	b111      	cbz	r1, 8018330 <_reclaim_reent+0x3c>
 801832a:	4620      	mov	r0, r4
 801832c:	f000 f8c2 	bl	80184b4 <_free_r>
 8018330:	6961      	ldr	r1, [r4, #20]
 8018332:	b111      	cbz	r1, 801833a <_reclaim_reent+0x46>
 8018334:	4620      	mov	r0, r4
 8018336:	f000 f8bd 	bl	80184b4 <_free_r>
 801833a:	69e1      	ldr	r1, [r4, #28]
 801833c:	b111      	cbz	r1, 8018344 <_reclaim_reent+0x50>
 801833e:	4620      	mov	r0, r4
 8018340:	f000 f8b8 	bl	80184b4 <_free_r>
 8018344:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018346:	b111      	cbz	r1, 801834e <_reclaim_reent+0x5a>
 8018348:	4620      	mov	r0, r4
 801834a:	f000 f8b3 	bl	80184b4 <_free_r>
 801834e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018350:	b111      	cbz	r1, 8018358 <_reclaim_reent+0x64>
 8018352:	4620      	mov	r0, r4
 8018354:	f000 f8ae 	bl	80184b4 <_free_r>
 8018358:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801835a:	b111      	cbz	r1, 8018362 <_reclaim_reent+0x6e>
 801835c:	4620      	mov	r0, r4
 801835e:	f000 f8a9 	bl	80184b4 <_free_r>
 8018362:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018364:	b111      	cbz	r1, 801836c <_reclaim_reent+0x78>
 8018366:	4620      	mov	r0, r4
 8018368:	f000 f8a4 	bl	80184b4 <_free_r>
 801836c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801836e:	b111      	cbz	r1, 8018376 <_reclaim_reent+0x82>
 8018370:	4620      	mov	r0, r4
 8018372:	f000 f89f 	bl	80184b4 <_free_r>
 8018376:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018378:	b111      	cbz	r1, 8018380 <_reclaim_reent+0x8c>
 801837a:	4620      	mov	r0, r4
 801837c:	f000 f89a 	bl	80184b4 <_free_r>
 8018380:	6a23      	ldr	r3, [r4, #32]
 8018382:	b14b      	cbz	r3, 8018398 <_reclaim_reent+0xa4>
 8018384:	4620      	mov	r0, r4
 8018386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801838a:	4718      	bx	r3
 801838c:	680e      	ldr	r6, [r1, #0]
 801838e:	4620      	mov	r0, r4
 8018390:	f000 f890 	bl	80184b4 <_free_r>
 8018394:	4631      	mov	r1, r6
 8018396:	e7bb      	b.n	8018310 <_reclaim_reent+0x1c>
 8018398:	bd70      	pop	{r4, r5, r6, pc}
 801839a:	bf00      	nop
 801839c:	2000013c 	.word	0x2000013c

080183a0 <_lseek_r>:
 80183a0:	b538      	push	{r3, r4, r5, lr}
 80183a2:	4d07      	ldr	r5, [pc, #28]	@ (80183c0 <_lseek_r+0x20>)
 80183a4:	4604      	mov	r4, r0
 80183a6:	4608      	mov	r0, r1
 80183a8:	4611      	mov	r1, r2
 80183aa:	2200      	movs	r2, #0
 80183ac:	602a      	str	r2, [r5, #0]
 80183ae:	461a      	mov	r2, r3
 80183b0:	f7e8 fcf3 	bl	8000d9a <_lseek>
 80183b4:	1c43      	adds	r3, r0, #1
 80183b6:	d102      	bne.n	80183be <_lseek_r+0x1e>
 80183b8:	682b      	ldr	r3, [r5, #0]
 80183ba:	b103      	cbz	r3, 80183be <_lseek_r+0x1e>
 80183bc:	6023      	str	r3, [r4, #0]
 80183be:	bd38      	pop	{r3, r4, r5, pc}
 80183c0:	2000f414 	.word	0x2000f414

080183c4 <_read_r>:
 80183c4:	b538      	push	{r3, r4, r5, lr}
 80183c6:	4d07      	ldr	r5, [pc, #28]	@ (80183e4 <_read_r+0x20>)
 80183c8:	4604      	mov	r4, r0
 80183ca:	4608      	mov	r0, r1
 80183cc:	4611      	mov	r1, r2
 80183ce:	2200      	movs	r2, #0
 80183d0:	602a      	str	r2, [r5, #0]
 80183d2:	461a      	mov	r2, r3
 80183d4:	f7e8 fc81 	bl	8000cda <_read>
 80183d8:	1c43      	adds	r3, r0, #1
 80183da:	d102      	bne.n	80183e2 <_read_r+0x1e>
 80183dc:	682b      	ldr	r3, [r5, #0]
 80183de:	b103      	cbz	r3, 80183e2 <_read_r+0x1e>
 80183e0:	6023      	str	r3, [r4, #0]
 80183e2:	bd38      	pop	{r3, r4, r5, pc}
 80183e4:	2000f414 	.word	0x2000f414

080183e8 <_write_r>:
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4d07      	ldr	r5, [pc, #28]	@ (8018408 <_write_r+0x20>)
 80183ec:	4604      	mov	r4, r0
 80183ee:	4608      	mov	r0, r1
 80183f0:	4611      	mov	r1, r2
 80183f2:	2200      	movs	r2, #0
 80183f4:	602a      	str	r2, [r5, #0]
 80183f6:	461a      	mov	r2, r3
 80183f8:	f7e8 fc8c 	bl	8000d14 <_write>
 80183fc:	1c43      	adds	r3, r0, #1
 80183fe:	d102      	bne.n	8018406 <_write_r+0x1e>
 8018400:	682b      	ldr	r3, [r5, #0]
 8018402:	b103      	cbz	r3, 8018406 <_write_r+0x1e>
 8018404:	6023      	str	r3, [r4, #0]
 8018406:	bd38      	pop	{r3, r4, r5, pc}
 8018408:	2000f414 	.word	0x2000f414

0801840c <__libc_init_array>:
 801840c:	b570      	push	{r4, r5, r6, lr}
 801840e:	4d0d      	ldr	r5, [pc, #52]	@ (8018444 <__libc_init_array+0x38>)
 8018410:	4c0d      	ldr	r4, [pc, #52]	@ (8018448 <__libc_init_array+0x3c>)
 8018412:	1b64      	subs	r4, r4, r5
 8018414:	10a4      	asrs	r4, r4, #2
 8018416:	2600      	movs	r6, #0
 8018418:	42a6      	cmp	r6, r4
 801841a:	d109      	bne.n	8018430 <__libc_init_array+0x24>
 801841c:	4d0b      	ldr	r5, [pc, #44]	@ (801844c <__libc_init_array+0x40>)
 801841e:	4c0c      	ldr	r4, [pc, #48]	@ (8018450 <__libc_init_array+0x44>)
 8018420:	f000 fe4a 	bl	80190b8 <_init>
 8018424:	1b64      	subs	r4, r4, r5
 8018426:	10a4      	asrs	r4, r4, #2
 8018428:	2600      	movs	r6, #0
 801842a:	42a6      	cmp	r6, r4
 801842c:	d105      	bne.n	801843a <__libc_init_array+0x2e>
 801842e:	bd70      	pop	{r4, r5, r6, pc}
 8018430:	f855 3b04 	ldr.w	r3, [r5], #4
 8018434:	4798      	blx	r3
 8018436:	3601      	adds	r6, #1
 8018438:	e7ee      	b.n	8018418 <__libc_init_array+0xc>
 801843a:	f855 3b04 	ldr.w	r3, [r5], #4
 801843e:	4798      	blx	r3
 8018440:	3601      	adds	r6, #1
 8018442:	e7f2      	b.n	801842a <__libc_init_array+0x1e>
 8018444:	0801be78 	.word	0x0801be78
 8018448:	0801be78 	.word	0x0801be78
 801844c:	0801be78 	.word	0x0801be78
 8018450:	0801be7c 	.word	0x0801be7c

08018454 <__retarget_lock_init_recursive>:
 8018454:	4770      	bx	lr

08018456 <__retarget_lock_acquire_recursive>:
 8018456:	4770      	bx	lr

08018458 <__retarget_lock_release_recursive>:
 8018458:	4770      	bx	lr

0801845a <memcpy>:
 801845a:	440a      	add	r2, r1
 801845c:	4291      	cmp	r1, r2
 801845e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018462:	d100      	bne.n	8018466 <memcpy+0xc>
 8018464:	4770      	bx	lr
 8018466:	b510      	push	{r4, lr}
 8018468:	f811 4b01 	ldrb.w	r4, [r1], #1
 801846c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018470:	4291      	cmp	r1, r2
 8018472:	d1f9      	bne.n	8018468 <memcpy+0xe>
 8018474:	bd10      	pop	{r4, pc}
	...

08018478 <__assert_func>:
 8018478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801847a:	4614      	mov	r4, r2
 801847c:	461a      	mov	r2, r3
 801847e:	4b09      	ldr	r3, [pc, #36]	@ (80184a4 <__assert_func+0x2c>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	4605      	mov	r5, r0
 8018484:	68d8      	ldr	r0, [r3, #12]
 8018486:	b954      	cbnz	r4, 801849e <__assert_func+0x26>
 8018488:	4b07      	ldr	r3, [pc, #28]	@ (80184a8 <__assert_func+0x30>)
 801848a:	461c      	mov	r4, r3
 801848c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018490:	9100      	str	r1, [sp, #0]
 8018492:	462b      	mov	r3, r5
 8018494:	4905      	ldr	r1, [pc, #20]	@ (80184ac <__assert_func+0x34>)
 8018496:	f000 fc89 	bl	8018dac <fiprintf>
 801849a:	f000 fd3d 	bl	8018f18 <abort>
 801849e:	4b04      	ldr	r3, [pc, #16]	@ (80184b0 <__assert_func+0x38>)
 80184a0:	e7f4      	b.n	801848c <__assert_func+0x14>
 80184a2:	bf00      	nop
 80184a4:	2000013c 	.word	0x2000013c
 80184a8:	0801be3c 	.word	0x0801be3c
 80184ac:	0801be0e 	.word	0x0801be0e
 80184b0:	0801be01 	.word	0x0801be01

080184b4 <_free_r>:
 80184b4:	b538      	push	{r3, r4, r5, lr}
 80184b6:	4605      	mov	r5, r0
 80184b8:	2900      	cmp	r1, #0
 80184ba:	d041      	beq.n	8018540 <_free_r+0x8c>
 80184bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184c0:	1f0c      	subs	r4, r1, #4
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	bfb8      	it	lt
 80184c6:	18e4      	addlt	r4, r4, r3
 80184c8:	f000 f8e8 	bl	801869c <__malloc_lock>
 80184cc:	4a1d      	ldr	r2, [pc, #116]	@ (8018544 <_free_r+0x90>)
 80184ce:	6813      	ldr	r3, [r2, #0]
 80184d0:	b933      	cbnz	r3, 80184e0 <_free_r+0x2c>
 80184d2:	6063      	str	r3, [r4, #4]
 80184d4:	6014      	str	r4, [r2, #0]
 80184d6:	4628      	mov	r0, r5
 80184d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184dc:	f000 b8e4 	b.w	80186a8 <__malloc_unlock>
 80184e0:	42a3      	cmp	r3, r4
 80184e2:	d908      	bls.n	80184f6 <_free_r+0x42>
 80184e4:	6820      	ldr	r0, [r4, #0]
 80184e6:	1821      	adds	r1, r4, r0
 80184e8:	428b      	cmp	r3, r1
 80184ea:	bf01      	itttt	eq
 80184ec:	6819      	ldreq	r1, [r3, #0]
 80184ee:	685b      	ldreq	r3, [r3, #4]
 80184f0:	1809      	addeq	r1, r1, r0
 80184f2:	6021      	streq	r1, [r4, #0]
 80184f4:	e7ed      	b.n	80184d2 <_free_r+0x1e>
 80184f6:	461a      	mov	r2, r3
 80184f8:	685b      	ldr	r3, [r3, #4]
 80184fa:	b10b      	cbz	r3, 8018500 <_free_r+0x4c>
 80184fc:	42a3      	cmp	r3, r4
 80184fe:	d9fa      	bls.n	80184f6 <_free_r+0x42>
 8018500:	6811      	ldr	r1, [r2, #0]
 8018502:	1850      	adds	r0, r2, r1
 8018504:	42a0      	cmp	r0, r4
 8018506:	d10b      	bne.n	8018520 <_free_r+0x6c>
 8018508:	6820      	ldr	r0, [r4, #0]
 801850a:	4401      	add	r1, r0
 801850c:	1850      	adds	r0, r2, r1
 801850e:	4283      	cmp	r3, r0
 8018510:	6011      	str	r1, [r2, #0]
 8018512:	d1e0      	bne.n	80184d6 <_free_r+0x22>
 8018514:	6818      	ldr	r0, [r3, #0]
 8018516:	685b      	ldr	r3, [r3, #4]
 8018518:	6053      	str	r3, [r2, #4]
 801851a:	4408      	add	r0, r1
 801851c:	6010      	str	r0, [r2, #0]
 801851e:	e7da      	b.n	80184d6 <_free_r+0x22>
 8018520:	d902      	bls.n	8018528 <_free_r+0x74>
 8018522:	230c      	movs	r3, #12
 8018524:	602b      	str	r3, [r5, #0]
 8018526:	e7d6      	b.n	80184d6 <_free_r+0x22>
 8018528:	6820      	ldr	r0, [r4, #0]
 801852a:	1821      	adds	r1, r4, r0
 801852c:	428b      	cmp	r3, r1
 801852e:	bf04      	itt	eq
 8018530:	6819      	ldreq	r1, [r3, #0]
 8018532:	685b      	ldreq	r3, [r3, #4]
 8018534:	6063      	str	r3, [r4, #4]
 8018536:	bf04      	itt	eq
 8018538:	1809      	addeq	r1, r1, r0
 801853a:	6021      	streq	r1, [r4, #0]
 801853c:	6054      	str	r4, [r2, #4]
 801853e:	e7ca      	b.n	80184d6 <_free_r+0x22>
 8018540:	bd38      	pop	{r3, r4, r5, pc}
 8018542:	bf00      	nop
 8018544:	2000f420 	.word	0x2000f420

08018548 <malloc>:
 8018548:	4b02      	ldr	r3, [pc, #8]	@ (8018554 <malloc+0xc>)
 801854a:	4601      	mov	r1, r0
 801854c:	6818      	ldr	r0, [r3, #0]
 801854e:	f000 b825 	b.w	801859c <_malloc_r>
 8018552:	bf00      	nop
 8018554:	2000013c 	.word	0x2000013c

08018558 <sbrk_aligned>:
 8018558:	b570      	push	{r4, r5, r6, lr}
 801855a:	4e0f      	ldr	r6, [pc, #60]	@ (8018598 <sbrk_aligned+0x40>)
 801855c:	460c      	mov	r4, r1
 801855e:	6831      	ldr	r1, [r6, #0]
 8018560:	4605      	mov	r5, r0
 8018562:	b911      	cbnz	r1, 801856a <sbrk_aligned+0x12>
 8018564:	f000 fcc8 	bl	8018ef8 <_sbrk_r>
 8018568:	6030      	str	r0, [r6, #0]
 801856a:	4621      	mov	r1, r4
 801856c:	4628      	mov	r0, r5
 801856e:	f000 fcc3 	bl	8018ef8 <_sbrk_r>
 8018572:	1c43      	adds	r3, r0, #1
 8018574:	d103      	bne.n	801857e <sbrk_aligned+0x26>
 8018576:	f04f 34ff 	mov.w	r4, #4294967295
 801857a:	4620      	mov	r0, r4
 801857c:	bd70      	pop	{r4, r5, r6, pc}
 801857e:	1cc4      	adds	r4, r0, #3
 8018580:	f024 0403 	bic.w	r4, r4, #3
 8018584:	42a0      	cmp	r0, r4
 8018586:	d0f8      	beq.n	801857a <sbrk_aligned+0x22>
 8018588:	1a21      	subs	r1, r4, r0
 801858a:	4628      	mov	r0, r5
 801858c:	f000 fcb4 	bl	8018ef8 <_sbrk_r>
 8018590:	3001      	adds	r0, #1
 8018592:	d1f2      	bne.n	801857a <sbrk_aligned+0x22>
 8018594:	e7ef      	b.n	8018576 <sbrk_aligned+0x1e>
 8018596:	bf00      	nop
 8018598:	2000f41c 	.word	0x2000f41c

0801859c <_malloc_r>:
 801859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185a0:	1ccd      	adds	r5, r1, #3
 80185a2:	f025 0503 	bic.w	r5, r5, #3
 80185a6:	3508      	adds	r5, #8
 80185a8:	2d0c      	cmp	r5, #12
 80185aa:	bf38      	it	cc
 80185ac:	250c      	movcc	r5, #12
 80185ae:	2d00      	cmp	r5, #0
 80185b0:	4606      	mov	r6, r0
 80185b2:	db01      	blt.n	80185b8 <_malloc_r+0x1c>
 80185b4:	42a9      	cmp	r1, r5
 80185b6:	d904      	bls.n	80185c2 <_malloc_r+0x26>
 80185b8:	230c      	movs	r3, #12
 80185ba:	6033      	str	r3, [r6, #0]
 80185bc:	2000      	movs	r0, #0
 80185be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018698 <_malloc_r+0xfc>
 80185c6:	f000 f869 	bl	801869c <__malloc_lock>
 80185ca:	f8d8 3000 	ldr.w	r3, [r8]
 80185ce:	461c      	mov	r4, r3
 80185d0:	bb44      	cbnz	r4, 8018624 <_malloc_r+0x88>
 80185d2:	4629      	mov	r1, r5
 80185d4:	4630      	mov	r0, r6
 80185d6:	f7ff ffbf 	bl	8018558 <sbrk_aligned>
 80185da:	1c43      	adds	r3, r0, #1
 80185dc:	4604      	mov	r4, r0
 80185de:	d158      	bne.n	8018692 <_malloc_r+0xf6>
 80185e0:	f8d8 4000 	ldr.w	r4, [r8]
 80185e4:	4627      	mov	r7, r4
 80185e6:	2f00      	cmp	r7, #0
 80185e8:	d143      	bne.n	8018672 <_malloc_r+0xd6>
 80185ea:	2c00      	cmp	r4, #0
 80185ec:	d04b      	beq.n	8018686 <_malloc_r+0xea>
 80185ee:	6823      	ldr	r3, [r4, #0]
 80185f0:	4639      	mov	r1, r7
 80185f2:	4630      	mov	r0, r6
 80185f4:	eb04 0903 	add.w	r9, r4, r3
 80185f8:	f000 fc7e 	bl	8018ef8 <_sbrk_r>
 80185fc:	4581      	cmp	r9, r0
 80185fe:	d142      	bne.n	8018686 <_malloc_r+0xea>
 8018600:	6821      	ldr	r1, [r4, #0]
 8018602:	1a6d      	subs	r5, r5, r1
 8018604:	4629      	mov	r1, r5
 8018606:	4630      	mov	r0, r6
 8018608:	f7ff ffa6 	bl	8018558 <sbrk_aligned>
 801860c:	3001      	adds	r0, #1
 801860e:	d03a      	beq.n	8018686 <_malloc_r+0xea>
 8018610:	6823      	ldr	r3, [r4, #0]
 8018612:	442b      	add	r3, r5
 8018614:	6023      	str	r3, [r4, #0]
 8018616:	f8d8 3000 	ldr.w	r3, [r8]
 801861a:	685a      	ldr	r2, [r3, #4]
 801861c:	bb62      	cbnz	r2, 8018678 <_malloc_r+0xdc>
 801861e:	f8c8 7000 	str.w	r7, [r8]
 8018622:	e00f      	b.n	8018644 <_malloc_r+0xa8>
 8018624:	6822      	ldr	r2, [r4, #0]
 8018626:	1b52      	subs	r2, r2, r5
 8018628:	d420      	bmi.n	801866c <_malloc_r+0xd0>
 801862a:	2a0b      	cmp	r2, #11
 801862c:	d917      	bls.n	801865e <_malloc_r+0xc2>
 801862e:	1961      	adds	r1, r4, r5
 8018630:	42a3      	cmp	r3, r4
 8018632:	6025      	str	r5, [r4, #0]
 8018634:	bf18      	it	ne
 8018636:	6059      	strne	r1, [r3, #4]
 8018638:	6863      	ldr	r3, [r4, #4]
 801863a:	bf08      	it	eq
 801863c:	f8c8 1000 	streq.w	r1, [r8]
 8018640:	5162      	str	r2, [r4, r5]
 8018642:	604b      	str	r3, [r1, #4]
 8018644:	4630      	mov	r0, r6
 8018646:	f000 f82f 	bl	80186a8 <__malloc_unlock>
 801864a:	f104 000b 	add.w	r0, r4, #11
 801864e:	1d23      	adds	r3, r4, #4
 8018650:	f020 0007 	bic.w	r0, r0, #7
 8018654:	1ac2      	subs	r2, r0, r3
 8018656:	bf1c      	itt	ne
 8018658:	1a1b      	subne	r3, r3, r0
 801865a:	50a3      	strne	r3, [r4, r2]
 801865c:	e7af      	b.n	80185be <_malloc_r+0x22>
 801865e:	6862      	ldr	r2, [r4, #4]
 8018660:	42a3      	cmp	r3, r4
 8018662:	bf0c      	ite	eq
 8018664:	f8c8 2000 	streq.w	r2, [r8]
 8018668:	605a      	strne	r2, [r3, #4]
 801866a:	e7eb      	b.n	8018644 <_malloc_r+0xa8>
 801866c:	4623      	mov	r3, r4
 801866e:	6864      	ldr	r4, [r4, #4]
 8018670:	e7ae      	b.n	80185d0 <_malloc_r+0x34>
 8018672:	463c      	mov	r4, r7
 8018674:	687f      	ldr	r7, [r7, #4]
 8018676:	e7b6      	b.n	80185e6 <_malloc_r+0x4a>
 8018678:	461a      	mov	r2, r3
 801867a:	685b      	ldr	r3, [r3, #4]
 801867c:	42a3      	cmp	r3, r4
 801867e:	d1fb      	bne.n	8018678 <_malloc_r+0xdc>
 8018680:	2300      	movs	r3, #0
 8018682:	6053      	str	r3, [r2, #4]
 8018684:	e7de      	b.n	8018644 <_malloc_r+0xa8>
 8018686:	230c      	movs	r3, #12
 8018688:	6033      	str	r3, [r6, #0]
 801868a:	4630      	mov	r0, r6
 801868c:	f000 f80c 	bl	80186a8 <__malloc_unlock>
 8018690:	e794      	b.n	80185bc <_malloc_r+0x20>
 8018692:	6005      	str	r5, [r0, #0]
 8018694:	e7d6      	b.n	8018644 <_malloc_r+0xa8>
 8018696:	bf00      	nop
 8018698:	2000f420 	.word	0x2000f420

0801869c <__malloc_lock>:
 801869c:	4801      	ldr	r0, [pc, #4]	@ (80186a4 <__malloc_lock+0x8>)
 801869e:	f7ff beda 	b.w	8018456 <__retarget_lock_acquire_recursive>
 80186a2:	bf00      	nop
 80186a4:	2000f418 	.word	0x2000f418

080186a8 <__malloc_unlock>:
 80186a8:	4801      	ldr	r0, [pc, #4]	@ (80186b0 <__malloc_unlock+0x8>)
 80186aa:	f7ff bed5 	b.w	8018458 <__retarget_lock_release_recursive>
 80186ae:	bf00      	nop
 80186b0:	2000f418 	.word	0x2000f418

080186b4 <__sfputc_r>:
 80186b4:	6893      	ldr	r3, [r2, #8]
 80186b6:	3b01      	subs	r3, #1
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	b410      	push	{r4}
 80186bc:	6093      	str	r3, [r2, #8]
 80186be:	da08      	bge.n	80186d2 <__sfputc_r+0x1e>
 80186c0:	6994      	ldr	r4, [r2, #24]
 80186c2:	42a3      	cmp	r3, r4
 80186c4:	db01      	blt.n	80186ca <__sfputc_r+0x16>
 80186c6:	290a      	cmp	r1, #10
 80186c8:	d103      	bne.n	80186d2 <__sfputc_r+0x1e>
 80186ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186ce:	f000 bb7f 	b.w	8018dd0 <__swbuf_r>
 80186d2:	6813      	ldr	r3, [r2, #0]
 80186d4:	1c58      	adds	r0, r3, #1
 80186d6:	6010      	str	r0, [r2, #0]
 80186d8:	7019      	strb	r1, [r3, #0]
 80186da:	4608      	mov	r0, r1
 80186dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186e0:	4770      	bx	lr

080186e2 <__sfputs_r>:
 80186e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186e4:	4606      	mov	r6, r0
 80186e6:	460f      	mov	r7, r1
 80186e8:	4614      	mov	r4, r2
 80186ea:	18d5      	adds	r5, r2, r3
 80186ec:	42ac      	cmp	r4, r5
 80186ee:	d101      	bne.n	80186f4 <__sfputs_r+0x12>
 80186f0:	2000      	movs	r0, #0
 80186f2:	e007      	b.n	8018704 <__sfputs_r+0x22>
 80186f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186f8:	463a      	mov	r2, r7
 80186fa:	4630      	mov	r0, r6
 80186fc:	f7ff ffda 	bl	80186b4 <__sfputc_r>
 8018700:	1c43      	adds	r3, r0, #1
 8018702:	d1f3      	bne.n	80186ec <__sfputs_r+0xa>
 8018704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018708 <_vfiprintf_r>:
 8018708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801870c:	460d      	mov	r5, r1
 801870e:	b09d      	sub	sp, #116	@ 0x74
 8018710:	4614      	mov	r4, r2
 8018712:	4698      	mov	r8, r3
 8018714:	4606      	mov	r6, r0
 8018716:	b118      	cbz	r0, 8018720 <_vfiprintf_r+0x18>
 8018718:	6a03      	ldr	r3, [r0, #32]
 801871a:	b90b      	cbnz	r3, 8018720 <_vfiprintf_r+0x18>
 801871c:	f7ff fd36 	bl	801818c <__sinit>
 8018720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018722:	07d9      	lsls	r1, r3, #31
 8018724:	d405      	bmi.n	8018732 <_vfiprintf_r+0x2a>
 8018726:	89ab      	ldrh	r3, [r5, #12]
 8018728:	059a      	lsls	r2, r3, #22
 801872a:	d402      	bmi.n	8018732 <_vfiprintf_r+0x2a>
 801872c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801872e:	f7ff fe92 	bl	8018456 <__retarget_lock_acquire_recursive>
 8018732:	89ab      	ldrh	r3, [r5, #12]
 8018734:	071b      	lsls	r3, r3, #28
 8018736:	d501      	bpl.n	801873c <_vfiprintf_r+0x34>
 8018738:	692b      	ldr	r3, [r5, #16]
 801873a:	b99b      	cbnz	r3, 8018764 <_vfiprintf_r+0x5c>
 801873c:	4629      	mov	r1, r5
 801873e:	4630      	mov	r0, r6
 8018740:	f000 fb84 	bl	8018e4c <__swsetup_r>
 8018744:	b170      	cbz	r0, 8018764 <_vfiprintf_r+0x5c>
 8018746:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018748:	07dc      	lsls	r4, r3, #31
 801874a:	d504      	bpl.n	8018756 <_vfiprintf_r+0x4e>
 801874c:	f04f 30ff 	mov.w	r0, #4294967295
 8018750:	b01d      	add	sp, #116	@ 0x74
 8018752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018756:	89ab      	ldrh	r3, [r5, #12]
 8018758:	0598      	lsls	r0, r3, #22
 801875a:	d4f7      	bmi.n	801874c <_vfiprintf_r+0x44>
 801875c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801875e:	f7ff fe7b 	bl	8018458 <__retarget_lock_release_recursive>
 8018762:	e7f3      	b.n	801874c <_vfiprintf_r+0x44>
 8018764:	2300      	movs	r3, #0
 8018766:	9309      	str	r3, [sp, #36]	@ 0x24
 8018768:	2320      	movs	r3, #32
 801876a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801876e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018772:	2330      	movs	r3, #48	@ 0x30
 8018774:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018924 <_vfiprintf_r+0x21c>
 8018778:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801877c:	f04f 0901 	mov.w	r9, #1
 8018780:	4623      	mov	r3, r4
 8018782:	469a      	mov	sl, r3
 8018784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018788:	b10a      	cbz	r2, 801878e <_vfiprintf_r+0x86>
 801878a:	2a25      	cmp	r2, #37	@ 0x25
 801878c:	d1f9      	bne.n	8018782 <_vfiprintf_r+0x7a>
 801878e:	ebba 0b04 	subs.w	fp, sl, r4
 8018792:	d00b      	beq.n	80187ac <_vfiprintf_r+0xa4>
 8018794:	465b      	mov	r3, fp
 8018796:	4622      	mov	r2, r4
 8018798:	4629      	mov	r1, r5
 801879a:	4630      	mov	r0, r6
 801879c:	f7ff ffa1 	bl	80186e2 <__sfputs_r>
 80187a0:	3001      	adds	r0, #1
 80187a2:	f000 80a7 	beq.w	80188f4 <_vfiprintf_r+0x1ec>
 80187a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187a8:	445a      	add	r2, fp
 80187aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80187ac:	f89a 3000 	ldrb.w	r3, [sl]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	f000 809f 	beq.w	80188f4 <_vfiprintf_r+0x1ec>
 80187b6:	2300      	movs	r3, #0
 80187b8:	f04f 32ff 	mov.w	r2, #4294967295
 80187bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80187c0:	f10a 0a01 	add.w	sl, sl, #1
 80187c4:	9304      	str	r3, [sp, #16]
 80187c6:	9307      	str	r3, [sp, #28]
 80187c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80187cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80187ce:	4654      	mov	r4, sl
 80187d0:	2205      	movs	r2, #5
 80187d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187d6:	4853      	ldr	r0, [pc, #332]	@ (8018924 <_vfiprintf_r+0x21c>)
 80187d8:	f7e7 fd0a 	bl	80001f0 <memchr>
 80187dc:	9a04      	ldr	r2, [sp, #16]
 80187de:	b9d8      	cbnz	r0, 8018818 <_vfiprintf_r+0x110>
 80187e0:	06d1      	lsls	r1, r2, #27
 80187e2:	bf44      	itt	mi
 80187e4:	2320      	movmi	r3, #32
 80187e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80187ea:	0713      	lsls	r3, r2, #28
 80187ec:	bf44      	itt	mi
 80187ee:	232b      	movmi	r3, #43	@ 0x2b
 80187f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80187f4:	f89a 3000 	ldrb.w	r3, [sl]
 80187f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80187fa:	d015      	beq.n	8018828 <_vfiprintf_r+0x120>
 80187fc:	9a07      	ldr	r2, [sp, #28]
 80187fe:	4654      	mov	r4, sl
 8018800:	2000      	movs	r0, #0
 8018802:	f04f 0c0a 	mov.w	ip, #10
 8018806:	4621      	mov	r1, r4
 8018808:	f811 3b01 	ldrb.w	r3, [r1], #1
 801880c:	3b30      	subs	r3, #48	@ 0x30
 801880e:	2b09      	cmp	r3, #9
 8018810:	d94b      	bls.n	80188aa <_vfiprintf_r+0x1a2>
 8018812:	b1b0      	cbz	r0, 8018842 <_vfiprintf_r+0x13a>
 8018814:	9207      	str	r2, [sp, #28]
 8018816:	e014      	b.n	8018842 <_vfiprintf_r+0x13a>
 8018818:	eba0 0308 	sub.w	r3, r0, r8
 801881c:	fa09 f303 	lsl.w	r3, r9, r3
 8018820:	4313      	orrs	r3, r2
 8018822:	9304      	str	r3, [sp, #16]
 8018824:	46a2      	mov	sl, r4
 8018826:	e7d2      	b.n	80187ce <_vfiprintf_r+0xc6>
 8018828:	9b03      	ldr	r3, [sp, #12]
 801882a:	1d19      	adds	r1, r3, #4
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	9103      	str	r1, [sp, #12]
 8018830:	2b00      	cmp	r3, #0
 8018832:	bfbb      	ittet	lt
 8018834:	425b      	neglt	r3, r3
 8018836:	f042 0202 	orrlt.w	r2, r2, #2
 801883a:	9307      	strge	r3, [sp, #28]
 801883c:	9307      	strlt	r3, [sp, #28]
 801883e:	bfb8      	it	lt
 8018840:	9204      	strlt	r2, [sp, #16]
 8018842:	7823      	ldrb	r3, [r4, #0]
 8018844:	2b2e      	cmp	r3, #46	@ 0x2e
 8018846:	d10a      	bne.n	801885e <_vfiprintf_r+0x156>
 8018848:	7863      	ldrb	r3, [r4, #1]
 801884a:	2b2a      	cmp	r3, #42	@ 0x2a
 801884c:	d132      	bne.n	80188b4 <_vfiprintf_r+0x1ac>
 801884e:	9b03      	ldr	r3, [sp, #12]
 8018850:	1d1a      	adds	r2, r3, #4
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	9203      	str	r2, [sp, #12]
 8018856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801885a:	3402      	adds	r4, #2
 801885c:	9305      	str	r3, [sp, #20]
 801885e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018934 <_vfiprintf_r+0x22c>
 8018862:	7821      	ldrb	r1, [r4, #0]
 8018864:	2203      	movs	r2, #3
 8018866:	4650      	mov	r0, sl
 8018868:	f7e7 fcc2 	bl	80001f0 <memchr>
 801886c:	b138      	cbz	r0, 801887e <_vfiprintf_r+0x176>
 801886e:	9b04      	ldr	r3, [sp, #16]
 8018870:	eba0 000a 	sub.w	r0, r0, sl
 8018874:	2240      	movs	r2, #64	@ 0x40
 8018876:	4082      	lsls	r2, r0
 8018878:	4313      	orrs	r3, r2
 801887a:	3401      	adds	r4, #1
 801887c:	9304      	str	r3, [sp, #16]
 801887e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018882:	4829      	ldr	r0, [pc, #164]	@ (8018928 <_vfiprintf_r+0x220>)
 8018884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018888:	2206      	movs	r2, #6
 801888a:	f7e7 fcb1 	bl	80001f0 <memchr>
 801888e:	2800      	cmp	r0, #0
 8018890:	d03f      	beq.n	8018912 <_vfiprintf_r+0x20a>
 8018892:	4b26      	ldr	r3, [pc, #152]	@ (801892c <_vfiprintf_r+0x224>)
 8018894:	bb1b      	cbnz	r3, 80188de <_vfiprintf_r+0x1d6>
 8018896:	9b03      	ldr	r3, [sp, #12]
 8018898:	3307      	adds	r3, #7
 801889a:	f023 0307 	bic.w	r3, r3, #7
 801889e:	3308      	adds	r3, #8
 80188a0:	9303      	str	r3, [sp, #12]
 80188a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188a4:	443b      	add	r3, r7
 80188a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80188a8:	e76a      	b.n	8018780 <_vfiprintf_r+0x78>
 80188aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80188ae:	460c      	mov	r4, r1
 80188b0:	2001      	movs	r0, #1
 80188b2:	e7a8      	b.n	8018806 <_vfiprintf_r+0xfe>
 80188b4:	2300      	movs	r3, #0
 80188b6:	3401      	adds	r4, #1
 80188b8:	9305      	str	r3, [sp, #20]
 80188ba:	4619      	mov	r1, r3
 80188bc:	f04f 0c0a 	mov.w	ip, #10
 80188c0:	4620      	mov	r0, r4
 80188c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188c6:	3a30      	subs	r2, #48	@ 0x30
 80188c8:	2a09      	cmp	r2, #9
 80188ca:	d903      	bls.n	80188d4 <_vfiprintf_r+0x1cc>
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d0c6      	beq.n	801885e <_vfiprintf_r+0x156>
 80188d0:	9105      	str	r1, [sp, #20]
 80188d2:	e7c4      	b.n	801885e <_vfiprintf_r+0x156>
 80188d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80188d8:	4604      	mov	r4, r0
 80188da:	2301      	movs	r3, #1
 80188dc:	e7f0      	b.n	80188c0 <_vfiprintf_r+0x1b8>
 80188de:	ab03      	add	r3, sp, #12
 80188e0:	9300      	str	r3, [sp, #0]
 80188e2:	462a      	mov	r2, r5
 80188e4:	4b12      	ldr	r3, [pc, #72]	@ (8018930 <_vfiprintf_r+0x228>)
 80188e6:	a904      	add	r1, sp, #16
 80188e8:	4630      	mov	r0, r6
 80188ea:	f3af 8000 	nop.w
 80188ee:	4607      	mov	r7, r0
 80188f0:	1c78      	adds	r0, r7, #1
 80188f2:	d1d6      	bne.n	80188a2 <_vfiprintf_r+0x19a>
 80188f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80188f6:	07d9      	lsls	r1, r3, #31
 80188f8:	d405      	bmi.n	8018906 <_vfiprintf_r+0x1fe>
 80188fa:	89ab      	ldrh	r3, [r5, #12]
 80188fc:	059a      	lsls	r2, r3, #22
 80188fe:	d402      	bmi.n	8018906 <_vfiprintf_r+0x1fe>
 8018900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018902:	f7ff fda9 	bl	8018458 <__retarget_lock_release_recursive>
 8018906:	89ab      	ldrh	r3, [r5, #12]
 8018908:	065b      	lsls	r3, r3, #25
 801890a:	f53f af1f 	bmi.w	801874c <_vfiprintf_r+0x44>
 801890e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018910:	e71e      	b.n	8018750 <_vfiprintf_r+0x48>
 8018912:	ab03      	add	r3, sp, #12
 8018914:	9300      	str	r3, [sp, #0]
 8018916:	462a      	mov	r2, r5
 8018918:	4b05      	ldr	r3, [pc, #20]	@ (8018930 <_vfiprintf_r+0x228>)
 801891a:	a904      	add	r1, sp, #16
 801891c:	4630      	mov	r0, r6
 801891e:	f000 f879 	bl	8018a14 <_printf_i>
 8018922:	e7e4      	b.n	80188ee <_vfiprintf_r+0x1e6>
 8018924:	0801be3d 	.word	0x0801be3d
 8018928:	0801be47 	.word	0x0801be47
 801892c:	00000000 	.word	0x00000000
 8018930:	080186e3 	.word	0x080186e3
 8018934:	0801be43 	.word	0x0801be43

08018938 <_printf_common>:
 8018938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801893c:	4616      	mov	r6, r2
 801893e:	4698      	mov	r8, r3
 8018940:	688a      	ldr	r2, [r1, #8]
 8018942:	690b      	ldr	r3, [r1, #16]
 8018944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018948:	4293      	cmp	r3, r2
 801894a:	bfb8      	it	lt
 801894c:	4613      	movlt	r3, r2
 801894e:	6033      	str	r3, [r6, #0]
 8018950:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018954:	4607      	mov	r7, r0
 8018956:	460c      	mov	r4, r1
 8018958:	b10a      	cbz	r2, 801895e <_printf_common+0x26>
 801895a:	3301      	adds	r3, #1
 801895c:	6033      	str	r3, [r6, #0]
 801895e:	6823      	ldr	r3, [r4, #0]
 8018960:	0699      	lsls	r1, r3, #26
 8018962:	bf42      	ittt	mi
 8018964:	6833      	ldrmi	r3, [r6, #0]
 8018966:	3302      	addmi	r3, #2
 8018968:	6033      	strmi	r3, [r6, #0]
 801896a:	6825      	ldr	r5, [r4, #0]
 801896c:	f015 0506 	ands.w	r5, r5, #6
 8018970:	d106      	bne.n	8018980 <_printf_common+0x48>
 8018972:	f104 0a19 	add.w	sl, r4, #25
 8018976:	68e3      	ldr	r3, [r4, #12]
 8018978:	6832      	ldr	r2, [r6, #0]
 801897a:	1a9b      	subs	r3, r3, r2
 801897c:	42ab      	cmp	r3, r5
 801897e:	dc26      	bgt.n	80189ce <_printf_common+0x96>
 8018980:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018984:	6822      	ldr	r2, [r4, #0]
 8018986:	3b00      	subs	r3, #0
 8018988:	bf18      	it	ne
 801898a:	2301      	movne	r3, #1
 801898c:	0692      	lsls	r2, r2, #26
 801898e:	d42b      	bmi.n	80189e8 <_printf_common+0xb0>
 8018990:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018994:	4641      	mov	r1, r8
 8018996:	4638      	mov	r0, r7
 8018998:	47c8      	blx	r9
 801899a:	3001      	adds	r0, #1
 801899c:	d01e      	beq.n	80189dc <_printf_common+0xa4>
 801899e:	6823      	ldr	r3, [r4, #0]
 80189a0:	6922      	ldr	r2, [r4, #16]
 80189a2:	f003 0306 	and.w	r3, r3, #6
 80189a6:	2b04      	cmp	r3, #4
 80189a8:	bf02      	ittt	eq
 80189aa:	68e5      	ldreq	r5, [r4, #12]
 80189ac:	6833      	ldreq	r3, [r6, #0]
 80189ae:	1aed      	subeq	r5, r5, r3
 80189b0:	68a3      	ldr	r3, [r4, #8]
 80189b2:	bf0c      	ite	eq
 80189b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80189b8:	2500      	movne	r5, #0
 80189ba:	4293      	cmp	r3, r2
 80189bc:	bfc4      	itt	gt
 80189be:	1a9b      	subgt	r3, r3, r2
 80189c0:	18ed      	addgt	r5, r5, r3
 80189c2:	2600      	movs	r6, #0
 80189c4:	341a      	adds	r4, #26
 80189c6:	42b5      	cmp	r5, r6
 80189c8:	d11a      	bne.n	8018a00 <_printf_common+0xc8>
 80189ca:	2000      	movs	r0, #0
 80189cc:	e008      	b.n	80189e0 <_printf_common+0xa8>
 80189ce:	2301      	movs	r3, #1
 80189d0:	4652      	mov	r2, sl
 80189d2:	4641      	mov	r1, r8
 80189d4:	4638      	mov	r0, r7
 80189d6:	47c8      	blx	r9
 80189d8:	3001      	adds	r0, #1
 80189da:	d103      	bne.n	80189e4 <_printf_common+0xac>
 80189dc:	f04f 30ff 	mov.w	r0, #4294967295
 80189e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189e4:	3501      	adds	r5, #1
 80189e6:	e7c6      	b.n	8018976 <_printf_common+0x3e>
 80189e8:	18e1      	adds	r1, r4, r3
 80189ea:	1c5a      	adds	r2, r3, #1
 80189ec:	2030      	movs	r0, #48	@ 0x30
 80189ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80189f2:	4422      	add	r2, r4
 80189f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80189f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80189fc:	3302      	adds	r3, #2
 80189fe:	e7c7      	b.n	8018990 <_printf_common+0x58>
 8018a00:	2301      	movs	r3, #1
 8018a02:	4622      	mov	r2, r4
 8018a04:	4641      	mov	r1, r8
 8018a06:	4638      	mov	r0, r7
 8018a08:	47c8      	blx	r9
 8018a0a:	3001      	adds	r0, #1
 8018a0c:	d0e6      	beq.n	80189dc <_printf_common+0xa4>
 8018a0e:	3601      	adds	r6, #1
 8018a10:	e7d9      	b.n	80189c6 <_printf_common+0x8e>
	...

08018a14 <_printf_i>:
 8018a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a18:	7e0f      	ldrb	r7, [r1, #24]
 8018a1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018a1c:	2f78      	cmp	r7, #120	@ 0x78
 8018a1e:	4691      	mov	r9, r2
 8018a20:	4680      	mov	r8, r0
 8018a22:	460c      	mov	r4, r1
 8018a24:	469a      	mov	sl, r3
 8018a26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018a2a:	d807      	bhi.n	8018a3c <_printf_i+0x28>
 8018a2c:	2f62      	cmp	r7, #98	@ 0x62
 8018a2e:	d80a      	bhi.n	8018a46 <_printf_i+0x32>
 8018a30:	2f00      	cmp	r7, #0
 8018a32:	f000 80d2 	beq.w	8018bda <_printf_i+0x1c6>
 8018a36:	2f58      	cmp	r7, #88	@ 0x58
 8018a38:	f000 80b9 	beq.w	8018bae <_printf_i+0x19a>
 8018a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018a40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018a44:	e03a      	b.n	8018abc <_printf_i+0xa8>
 8018a46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018a4a:	2b15      	cmp	r3, #21
 8018a4c:	d8f6      	bhi.n	8018a3c <_printf_i+0x28>
 8018a4e:	a101      	add	r1, pc, #4	@ (adr r1, 8018a54 <_printf_i+0x40>)
 8018a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018a54:	08018aad 	.word	0x08018aad
 8018a58:	08018ac1 	.word	0x08018ac1
 8018a5c:	08018a3d 	.word	0x08018a3d
 8018a60:	08018a3d 	.word	0x08018a3d
 8018a64:	08018a3d 	.word	0x08018a3d
 8018a68:	08018a3d 	.word	0x08018a3d
 8018a6c:	08018ac1 	.word	0x08018ac1
 8018a70:	08018a3d 	.word	0x08018a3d
 8018a74:	08018a3d 	.word	0x08018a3d
 8018a78:	08018a3d 	.word	0x08018a3d
 8018a7c:	08018a3d 	.word	0x08018a3d
 8018a80:	08018bc1 	.word	0x08018bc1
 8018a84:	08018aeb 	.word	0x08018aeb
 8018a88:	08018b7b 	.word	0x08018b7b
 8018a8c:	08018a3d 	.word	0x08018a3d
 8018a90:	08018a3d 	.word	0x08018a3d
 8018a94:	08018be3 	.word	0x08018be3
 8018a98:	08018a3d 	.word	0x08018a3d
 8018a9c:	08018aeb 	.word	0x08018aeb
 8018aa0:	08018a3d 	.word	0x08018a3d
 8018aa4:	08018a3d 	.word	0x08018a3d
 8018aa8:	08018b83 	.word	0x08018b83
 8018aac:	6833      	ldr	r3, [r6, #0]
 8018aae:	1d1a      	adds	r2, r3, #4
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	6032      	str	r2, [r6, #0]
 8018ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018ab8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018abc:	2301      	movs	r3, #1
 8018abe:	e09d      	b.n	8018bfc <_printf_i+0x1e8>
 8018ac0:	6833      	ldr	r3, [r6, #0]
 8018ac2:	6820      	ldr	r0, [r4, #0]
 8018ac4:	1d19      	adds	r1, r3, #4
 8018ac6:	6031      	str	r1, [r6, #0]
 8018ac8:	0606      	lsls	r6, r0, #24
 8018aca:	d501      	bpl.n	8018ad0 <_printf_i+0xbc>
 8018acc:	681d      	ldr	r5, [r3, #0]
 8018ace:	e003      	b.n	8018ad8 <_printf_i+0xc4>
 8018ad0:	0645      	lsls	r5, r0, #25
 8018ad2:	d5fb      	bpl.n	8018acc <_printf_i+0xb8>
 8018ad4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018ad8:	2d00      	cmp	r5, #0
 8018ada:	da03      	bge.n	8018ae4 <_printf_i+0xd0>
 8018adc:	232d      	movs	r3, #45	@ 0x2d
 8018ade:	426d      	negs	r5, r5
 8018ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ae4:	4859      	ldr	r0, [pc, #356]	@ (8018c4c <_printf_i+0x238>)
 8018ae6:	230a      	movs	r3, #10
 8018ae8:	e011      	b.n	8018b0e <_printf_i+0xfa>
 8018aea:	6821      	ldr	r1, [r4, #0]
 8018aec:	6833      	ldr	r3, [r6, #0]
 8018aee:	0608      	lsls	r0, r1, #24
 8018af0:	f853 5b04 	ldr.w	r5, [r3], #4
 8018af4:	d402      	bmi.n	8018afc <_printf_i+0xe8>
 8018af6:	0649      	lsls	r1, r1, #25
 8018af8:	bf48      	it	mi
 8018afa:	b2ad      	uxthmi	r5, r5
 8018afc:	2f6f      	cmp	r7, #111	@ 0x6f
 8018afe:	4853      	ldr	r0, [pc, #332]	@ (8018c4c <_printf_i+0x238>)
 8018b00:	6033      	str	r3, [r6, #0]
 8018b02:	bf14      	ite	ne
 8018b04:	230a      	movne	r3, #10
 8018b06:	2308      	moveq	r3, #8
 8018b08:	2100      	movs	r1, #0
 8018b0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018b0e:	6866      	ldr	r6, [r4, #4]
 8018b10:	60a6      	str	r6, [r4, #8]
 8018b12:	2e00      	cmp	r6, #0
 8018b14:	bfa2      	ittt	ge
 8018b16:	6821      	ldrge	r1, [r4, #0]
 8018b18:	f021 0104 	bicge.w	r1, r1, #4
 8018b1c:	6021      	strge	r1, [r4, #0]
 8018b1e:	b90d      	cbnz	r5, 8018b24 <_printf_i+0x110>
 8018b20:	2e00      	cmp	r6, #0
 8018b22:	d04b      	beq.n	8018bbc <_printf_i+0x1a8>
 8018b24:	4616      	mov	r6, r2
 8018b26:	fbb5 f1f3 	udiv	r1, r5, r3
 8018b2a:	fb03 5711 	mls	r7, r3, r1, r5
 8018b2e:	5dc7      	ldrb	r7, [r0, r7]
 8018b30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018b34:	462f      	mov	r7, r5
 8018b36:	42bb      	cmp	r3, r7
 8018b38:	460d      	mov	r5, r1
 8018b3a:	d9f4      	bls.n	8018b26 <_printf_i+0x112>
 8018b3c:	2b08      	cmp	r3, #8
 8018b3e:	d10b      	bne.n	8018b58 <_printf_i+0x144>
 8018b40:	6823      	ldr	r3, [r4, #0]
 8018b42:	07df      	lsls	r7, r3, #31
 8018b44:	d508      	bpl.n	8018b58 <_printf_i+0x144>
 8018b46:	6923      	ldr	r3, [r4, #16]
 8018b48:	6861      	ldr	r1, [r4, #4]
 8018b4a:	4299      	cmp	r1, r3
 8018b4c:	bfde      	ittt	le
 8018b4e:	2330      	movle	r3, #48	@ 0x30
 8018b50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018b54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018b58:	1b92      	subs	r2, r2, r6
 8018b5a:	6122      	str	r2, [r4, #16]
 8018b5c:	f8cd a000 	str.w	sl, [sp]
 8018b60:	464b      	mov	r3, r9
 8018b62:	aa03      	add	r2, sp, #12
 8018b64:	4621      	mov	r1, r4
 8018b66:	4640      	mov	r0, r8
 8018b68:	f7ff fee6 	bl	8018938 <_printf_common>
 8018b6c:	3001      	adds	r0, #1
 8018b6e:	d14a      	bne.n	8018c06 <_printf_i+0x1f2>
 8018b70:	f04f 30ff 	mov.w	r0, #4294967295
 8018b74:	b004      	add	sp, #16
 8018b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b7a:	6823      	ldr	r3, [r4, #0]
 8018b7c:	f043 0320 	orr.w	r3, r3, #32
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	4833      	ldr	r0, [pc, #204]	@ (8018c50 <_printf_i+0x23c>)
 8018b84:	2778      	movs	r7, #120	@ 0x78
 8018b86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018b8a:	6823      	ldr	r3, [r4, #0]
 8018b8c:	6831      	ldr	r1, [r6, #0]
 8018b8e:	061f      	lsls	r7, r3, #24
 8018b90:	f851 5b04 	ldr.w	r5, [r1], #4
 8018b94:	d402      	bmi.n	8018b9c <_printf_i+0x188>
 8018b96:	065f      	lsls	r7, r3, #25
 8018b98:	bf48      	it	mi
 8018b9a:	b2ad      	uxthmi	r5, r5
 8018b9c:	6031      	str	r1, [r6, #0]
 8018b9e:	07d9      	lsls	r1, r3, #31
 8018ba0:	bf44      	itt	mi
 8018ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8018ba6:	6023      	strmi	r3, [r4, #0]
 8018ba8:	b11d      	cbz	r5, 8018bb2 <_printf_i+0x19e>
 8018baa:	2310      	movs	r3, #16
 8018bac:	e7ac      	b.n	8018b08 <_printf_i+0xf4>
 8018bae:	4827      	ldr	r0, [pc, #156]	@ (8018c4c <_printf_i+0x238>)
 8018bb0:	e7e9      	b.n	8018b86 <_printf_i+0x172>
 8018bb2:	6823      	ldr	r3, [r4, #0]
 8018bb4:	f023 0320 	bic.w	r3, r3, #32
 8018bb8:	6023      	str	r3, [r4, #0]
 8018bba:	e7f6      	b.n	8018baa <_printf_i+0x196>
 8018bbc:	4616      	mov	r6, r2
 8018bbe:	e7bd      	b.n	8018b3c <_printf_i+0x128>
 8018bc0:	6833      	ldr	r3, [r6, #0]
 8018bc2:	6825      	ldr	r5, [r4, #0]
 8018bc4:	6961      	ldr	r1, [r4, #20]
 8018bc6:	1d18      	adds	r0, r3, #4
 8018bc8:	6030      	str	r0, [r6, #0]
 8018bca:	062e      	lsls	r6, r5, #24
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	d501      	bpl.n	8018bd4 <_printf_i+0x1c0>
 8018bd0:	6019      	str	r1, [r3, #0]
 8018bd2:	e002      	b.n	8018bda <_printf_i+0x1c6>
 8018bd4:	0668      	lsls	r0, r5, #25
 8018bd6:	d5fb      	bpl.n	8018bd0 <_printf_i+0x1bc>
 8018bd8:	8019      	strh	r1, [r3, #0]
 8018bda:	2300      	movs	r3, #0
 8018bdc:	6123      	str	r3, [r4, #16]
 8018bde:	4616      	mov	r6, r2
 8018be0:	e7bc      	b.n	8018b5c <_printf_i+0x148>
 8018be2:	6833      	ldr	r3, [r6, #0]
 8018be4:	1d1a      	adds	r2, r3, #4
 8018be6:	6032      	str	r2, [r6, #0]
 8018be8:	681e      	ldr	r6, [r3, #0]
 8018bea:	6862      	ldr	r2, [r4, #4]
 8018bec:	2100      	movs	r1, #0
 8018bee:	4630      	mov	r0, r6
 8018bf0:	f7e7 fafe 	bl	80001f0 <memchr>
 8018bf4:	b108      	cbz	r0, 8018bfa <_printf_i+0x1e6>
 8018bf6:	1b80      	subs	r0, r0, r6
 8018bf8:	6060      	str	r0, [r4, #4]
 8018bfa:	6863      	ldr	r3, [r4, #4]
 8018bfc:	6123      	str	r3, [r4, #16]
 8018bfe:	2300      	movs	r3, #0
 8018c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018c04:	e7aa      	b.n	8018b5c <_printf_i+0x148>
 8018c06:	6923      	ldr	r3, [r4, #16]
 8018c08:	4632      	mov	r2, r6
 8018c0a:	4649      	mov	r1, r9
 8018c0c:	4640      	mov	r0, r8
 8018c0e:	47d0      	blx	sl
 8018c10:	3001      	adds	r0, #1
 8018c12:	d0ad      	beq.n	8018b70 <_printf_i+0x15c>
 8018c14:	6823      	ldr	r3, [r4, #0]
 8018c16:	079b      	lsls	r3, r3, #30
 8018c18:	d413      	bmi.n	8018c42 <_printf_i+0x22e>
 8018c1a:	68e0      	ldr	r0, [r4, #12]
 8018c1c:	9b03      	ldr	r3, [sp, #12]
 8018c1e:	4298      	cmp	r0, r3
 8018c20:	bfb8      	it	lt
 8018c22:	4618      	movlt	r0, r3
 8018c24:	e7a6      	b.n	8018b74 <_printf_i+0x160>
 8018c26:	2301      	movs	r3, #1
 8018c28:	4632      	mov	r2, r6
 8018c2a:	4649      	mov	r1, r9
 8018c2c:	4640      	mov	r0, r8
 8018c2e:	47d0      	blx	sl
 8018c30:	3001      	adds	r0, #1
 8018c32:	d09d      	beq.n	8018b70 <_printf_i+0x15c>
 8018c34:	3501      	adds	r5, #1
 8018c36:	68e3      	ldr	r3, [r4, #12]
 8018c38:	9903      	ldr	r1, [sp, #12]
 8018c3a:	1a5b      	subs	r3, r3, r1
 8018c3c:	42ab      	cmp	r3, r5
 8018c3e:	dcf2      	bgt.n	8018c26 <_printf_i+0x212>
 8018c40:	e7eb      	b.n	8018c1a <_printf_i+0x206>
 8018c42:	2500      	movs	r5, #0
 8018c44:	f104 0619 	add.w	r6, r4, #25
 8018c48:	e7f5      	b.n	8018c36 <_printf_i+0x222>
 8018c4a:	bf00      	nop
 8018c4c:	0801be4e 	.word	0x0801be4e
 8018c50:	0801be5f 	.word	0x0801be5f

08018c54 <__sflush_r>:
 8018c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	0716      	lsls	r6, r2, #28
 8018c5e:	4605      	mov	r5, r0
 8018c60:	460c      	mov	r4, r1
 8018c62:	d454      	bmi.n	8018d0e <__sflush_r+0xba>
 8018c64:	684b      	ldr	r3, [r1, #4]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	dc02      	bgt.n	8018c70 <__sflush_r+0x1c>
 8018c6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	dd48      	ble.n	8018d02 <__sflush_r+0xae>
 8018c70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c72:	2e00      	cmp	r6, #0
 8018c74:	d045      	beq.n	8018d02 <__sflush_r+0xae>
 8018c76:	2300      	movs	r3, #0
 8018c78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018c7c:	682f      	ldr	r7, [r5, #0]
 8018c7e:	6a21      	ldr	r1, [r4, #32]
 8018c80:	602b      	str	r3, [r5, #0]
 8018c82:	d030      	beq.n	8018ce6 <__sflush_r+0x92>
 8018c84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018c86:	89a3      	ldrh	r3, [r4, #12]
 8018c88:	0759      	lsls	r1, r3, #29
 8018c8a:	d505      	bpl.n	8018c98 <__sflush_r+0x44>
 8018c8c:	6863      	ldr	r3, [r4, #4]
 8018c8e:	1ad2      	subs	r2, r2, r3
 8018c90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018c92:	b10b      	cbz	r3, 8018c98 <__sflush_r+0x44>
 8018c94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018c96:	1ad2      	subs	r2, r2, r3
 8018c98:	2300      	movs	r3, #0
 8018c9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c9c:	6a21      	ldr	r1, [r4, #32]
 8018c9e:	4628      	mov	r0, r5
 8018ca0:	47b0      	blx	r6
 8018ca2:	1c43      	adds	r3, r0, #1
 8018ca4:	89a3      	ldrh	r3, [r4, #12]
 8018ca6:	d106      	bne.n	8018cb6 <__sflush_r+0x62>
 8018ca8:	6829      	ldr	r1, [r5, #0]
 8018caa:	291d      	cmp	r1, #29
 8018cac:	d82b      	bhi.n	8018d06 <__sflush_r+0xb2>
 8018cae:	4a2a      	ldr	r2, [pc, #168]	@ (8018d58 <__sflush_r+0x104>)
 8018cb0:	410a      	asrs	r2, r1
 8018cb2:	07d6      	lsls	r6, r2, #31
 8018cb4:	d427      	bmi.n	8018d06 <__sflush_r+0xb2>
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	6062      	str	r2, [r4, #4]
 8018cba:	04d9      	lsls	r1, r3, #19
 8018cbc:	6922      	ldr	r2, [r4, #16]
 8018cbe:	6022      	str	r2, [r4, #0]
 8018cc0:	d504      	bpl.n	8018ccc <__sflush_r+0x78>
 8018cc2:	1c42      	adds	r2, r0, #1
 8018cc4:	d101      	bne.n	8018cca <__sflush_r+0x76>
 8018cc6:	682b      	ldr	r3, [r5, #0]
 8018cc8:	b903      	cbnz	r3, 8018ccc <__sflush_r+0x78>
 8018cca:	6560      	str	r0, [r4, #84]	@ 0x54
 8018ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018cce:	602f      	str	r7, [r5, #0]
 8018cd0:	b1b9      	cbz	r1, 8018d02 <__sflush_r+0xae>
 8018cd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018cd6:	4299      	cmp	r1, r3
 8018cd8:	d002      	beq.n	8018ce0 <__sflush_r+0x8c>
 8018cda:	4628      	mov	r0, r5
 8018cdc:	f7ff fbea 	bl	80184b4 <_free_r>
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	6363      	str	r3, [r4, #52]	@ 0x34
 8018ce4:	e00d      	b.n	8018d02 <__sflush_r+0xae>
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	4628      	mov	r0, r5
 8018cea:	47b0      	blx	r6
 8018cec:	4602      	mov	r2, r0
 8018cee:	1c50      	adds	r0, r2, #1
 8018cf0:	d1c9      	bne.n	8018c86 <__sflush_r+0x32>
 8018cf2:	682b      	ldr	r3, [r5, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d0c6      	beq.n	8018c86 <__sflush_r+0x32>
 8018cf8:	2b1d      	cmp	r3, #29
 8018cfa:	d001      	beq.n	8018d00 <__sflush_r+0xac>
 8018cfc:	2b16      	cmp	r3, #22
 8018cfe:	d11e      	bne.n	8018d3e <__sflush_r+0xea>
 8018d00:	602f      	str	r7, [r5, #0]
 8018d02:	2000      	movs	r0, #0
 8018d04:	e022      	b.n	8018d4c <__sflush_r+0xf8>
 8018d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d0a:	b21b      	sxth	r3, r3
 8018d0c:	e01b      	b.n	8018d46 <__sflush_r+0xf2>
 8018d0e:	690f      	ldr	r7, [r1, #16]
 8018d10:	2f00      	cmp	r7, #0
 8018d12:	d0f6      	beq.n	8018d02 <__sflush_r+0xae>
 8018d14:	0793      	lsls	r3, r2, #30
 8018d16:	680e      	ldr	r6, [r1, #0]
 8018d18:	bf08      	it	eq
 8018d1a:	694b      	ldreq	r3, [r1, #20]
 8018d1c:	600f      	str	r7, [r1, #0]
 8018d1e:	bf18      	it	ne
 8018d20:	2300      	movne	r3, #0
 8018d22:	eba6 0807 	sub.w	r8, r6, r7
 8018d26:	608b      	str	r3, [r1, #8]
 8018d28:	f1b8 0f00 	cmp.w	r8, #0
 8018d2c:	dde9      	ble.n	8018d02 <__sflush_r+0xae>
 8018d2e:	6a21      	ldr	r1, [r4, #32]
 8018d30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018d32:	4643      	mov	r3, r8
 8018d34:	463a      	mov	r2, r7
 8018d36:	4628      	mov	r0, r5
 8018d38:	47b0      	blx	r6
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	dc08      	bgt.n	8018d50 <__sflush_r+0xfc>
 8018d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d46:	81a3      	strh	r3, [r4, #12]
 8018d48:	f04f 30ff 	mov.w	r0, #4294967295
 8018d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d50:	4407      	add	r7, r0
 8018d52:	eba8 0800 	sub.w	r8, r8, r0
 8018d56:	e7e7      	b.n	8018d28 <__sflush_r+0xd4>
 8018d58:	dfbffffe 	.word	0xdfbffffe

08018d5c <_fflush_r>:
 8018d5c:	b538      	push	{r3, r4, r5, lr}
 8018d5e:	690b      	ldr	r3, [r1, #16]
 8018d60:	4605      	mov	r5, r0
 8018d62:	460c      	mov	r4, r1
 8018d64:	b913      	cbnz	r3, 8018d6c <_fflush_r+0x10>
 8018d66:	2500      	movs	r5, #0
 8018d68:	4628      	mov	r0, r5
 8018d6a:	bd38      	pop	{r3, r4, r5, pc}
 8018d6c:	b118      	cbz	r0, 8018d76 <_fflush_r+0x1a>
 8018d6e:	6a03      	ldr	r3, [r0, #32]
 8018d70:	b90b      	cbnz	r3, 8018d76 <_fflush_r+0x1a>
 8018d72:	f7ff fa0b 	bl	801818c <__sinit>
 8018d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d0f3      	beq.n	8018d66 <_fflush_r+0xa>
 8018d7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018d80:	07d0      	lsls	r0, r2, #31
 8018d82:	d404      	bmi.n	8018d8e <_fflush_r+0x32>
 8018d84:	0599      	lsls	r1, r3, #22
 8018d86:	d402      	bmi.n	8018d8e <_fflush_r+0x32>
 8018d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d8a:	f7ff fb64 	bl	8018456 <__retarget_lock_acquire_recursive>
 8018d8e:	4628      	mov	r0, r5
 8018d90:	4621      	mov	r1, r4
 8018d92:	f7ff ff5f 	bl	8018c54 <__sflush_r>
 8018d96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d98:	07da      	lsls	r2, r3, #31
 8018d9a:	4605      	mov	r5, r0
 8018d9c:	d4e4      	bmi.n	8018d68 <_fflush_r+0xc>
 8018d9e:	89a3      	ldrh	r3, [r4, #12]
 8018da0:	059b      	lsls	r3, r3, #22
 8018da2:	d4e1      	bmi.n	8018d68 <_fflush_r+0xc>
 8018da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018da6:	f7ff fb57 	bl	8018458 <__retarget_lock_release_recursive>
 8018daa:	e7dd      	b.n	8018d68 <_fflush_r+0xc>

08018dac <fiprintf>:
 8018dac:	b40e      	push	{r1, r2, r3}
 8018dae:	b503      	push	{r0, r1, lr}
 8018db0:	4601      	mov	r1, r0
 8018db2:	ab03      	add	r3, sp, #12
 8018db4:	4805      	ldr	r0, [pc, #20]	@ (8018dcc <fiprintf+0x20>)
 8018db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dba:	6800      	ldr	r0, [r0, #0]
 8018dbc:	9301      	str	r3, [sp, #4]
 8018dbe:	f7ff fca3 	bl	8018708 <_vfiprintf_r>
 8018dc2:	b002      	add	sp, #8
 8018dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018dc8:	b003      	add	sp, #12
 8018dca:	4770      	bx	lr
 8018dcc:	2000013c 	.word	0x2000013c

08018dd0 <__swbuf_r>:
 8018dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dd2:	460e      	mov	r6, r1
 8018dd4:	4614      	mov	r4, r2
 8018dd6:	4605      	mov	r5, r0
 8018dd8:	b118      	cbz	r0, 8018de2 <__swbuf_r+0x12>
 8018dda:	6a03      	ldr	r3, [r0, #32]
 8018ddc:	b90b      	cbnz	r3, 8018de2 <__swbuf_r+0x12>
 8018dde:	f7ff f9d5 	bl	801818c <__sinit>
 8018de2:	69a3      	ldr	r3, [r4, #24]
 8018de4:	60a3      	str	r3, [r4, #8]
 8018de6:	89a3      	ldrh	r3, [r4, #12]
 8018de8:	071a      	lsls	r2, r3, #28
 8018dea:	d501      	bpl.n	8018df0 <__swbuf_r+0x20>
 8018dec:	6923      	ldr	r3, [r4, #16]
 8018dee:	b943      	cbnz	r3, 8018e02 <__swbuf_r+0x32>
 8018df0:	4621      	mov	r1, r4
 8018df2:	4628      	mov	r0, r5
 8018df4:	f000 f82a 	bl	8018e4c <__swsetup_r>
 8018df8:	b118      	cbz	r0, 8018e02 <__swbuf_r+0x32>
 8018dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8018dfe:	4638      	mov	r0, r7
 8018e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e02:	6823      	ldr	r3, [r4, #0]
 8018e04:	6922      	ldr	r2, [r4, #16]
 8018e06:	1a98      	subs	r0, r3, r2
 8018e08:	6963      	ldr	r3, [r4, #20]
 8018e0a:	b2f6      	uxtb	r6, r6
 8018e0c:	4283      	cmp	r3, r0
 8018e0e:	4637      	mov	r7, r6
 8018e10:	dc05      	bgt.n	8018e1e <__swbuf_r+0x4e>
 8018e12:	4621      	mov	r1, r4
 8018e14:	4628      	mov	r0, r5
 8018e16:	f7ff ffa1 	bl	8018d5c <_fflush_r>
 8018e1a:	2800      	cmp	r0, #0
 8018e1c:	d1ed      	bne.n	8018dfa <__swbuf_r+0x2a>
 8018e1e:	68a3      	ldr	r3, [r4, #8]
 8018e20:	3b01      	subs	r3, #1
 8018e22:	60a3      	str	r3, [r4, #8]
 8018e24:	6823      	ldr	r3, [r4, #0]
 8018e26:	1c5a      	adds	r2, r3, #1
 8018e28:	6022      	str	r2, [r4, #0]
 8018e2a:	701e      	strb	r6, [r3, #0]
 8018e2c:	6962      	ldr	r2, [r4, #20]
 8018e2e:	1c43      	adds	r3, r0, #1
 8018e30:	429a      	cmp	r2, r3
 8018e32:	d004      	beq.n	8018e3e <__swbuf_r+0x6e>
 8018e34:	89a3      	ldrh	r3, [r4, #12]
 8018e36:	07db      	lsls	r3, r3, #31
 8018e38:	d5e1      	bpl.n	8018dfe <__swbuf_r+0x2e>
 8018e3a:	2e0a      	cmp	r6, #10
 8018e3c:	d1df      	bne.n	8018dfe <__swbuf_r+0x2e>
 8018e3e:	4621      	mov	r1, r4
 8018e40:	4628      	mov	r0, r5
 8018e42:	f7ff ff8b 	bl	8018d5c <_fflush_r>
 8018e46:	2800      	cmp	r0, #0
 8018e48:	d0d9      	beq.n	8018dfe <__swbuf_r+0x2e>
 8018e4a:	e7d6      	b.n	8018dfa <__swbuf_r+0x2a>

08018e4c <__swsetup_r>:
 8018e4c:	b538      	push	{r3, r4, r5, lr}
 8018e4e:	4b29      	ldr	r3, [pc, #164]	@ (8018ef4 <__swsetup_r+0xa8>)
 8018e50:	4605      	mov	r5, r0
 8018e52:	6818      	ldr	r0, [r3, #0]
 8018e54:	460c      	mov	r4, r1
 8018e56:	b118      	cbz	r0, 8018e60 <__swsetup_r+0x14>
 8018e58:	6a03      	ldr	r3, [r0, #32]
 8018e5a:	b90b      	cbnz	r3, 8018e60 <__swsetup_r+0x14>
 8018e5c:	f7ff f996 	bl	801818c <__sinit>
 8018e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e64:	0719      	lsls	r1, r3, #28
 8018e66:	d422      	bmi.n	8018eae <__swsetup_r+0x62>
 8018e68:	06da      	lsls	r2, r3, #27
 8018e6a:	d407      	bmi.n	8018e7c <__swsetup_r+0x30>
 8018e6c:	2209      	movs	r2, #9
 8018e6e:	602a      	str	r2, [r5, #0]
 8018e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e74:	81a3      	strh	r3, [r4, #12]
 8018e76:	f04f 30ff 	mov.w	r0, #4294967295
 8018e7a:	e033      	b.n	8018ee4 <__swsetup_r+0x98>
 8018e7c:	0758      	lsls	r0, r3, #29
 8018e7e:	d512      	bpl.n	8018ea6 <__swsetup_r+0x5a>
 8018e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018e82:	b141      	cbz	r1, 8018e96 <__swsetup_r+0x4a>
 8018e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018e88:	4299      	cmp	r1, r3
 8018e8a:	d002      	beq.n	8018e92 <__swsetup_r+0x46>
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	f7ff fb11 	bl	80184b4 <_free_r>
 8018e92:	2300      	movs	r3, #0
 8018e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e96:	89a3      	ldrh	r3, [r4, #12]
 8018e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018e9c:	81a3      	strh	r3, [r4, #12]
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	6063      	str	r3, [r4, #4]
 8018ea2:	6923      	ldr	r3, [r4, #16]
 8018ea4:	6023      	str	r3, [r4, #0]
 8018ea6:	89a3      	ldrh	r3, [r4, #12]
 8018ea8:	f043 0308 	orr.w	r3, r3, #8
 8018eac:	81a3      	strh	r3, [r4, #12]
 8018eae:	6923      	ldr	r3, [r4, #16]
 8018eb0:	b94b      	cbnz	r3, 8018ec6 <__swsetup_r+0x7a>
 8018eb2:	89a3      	ldrh	r3, [r4, #12]
 8018eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018ebc:	d003      	beq.n	8018ec6 <__swsetup_r+0x7a>
 8018ebe:	4621      	mov	r1, r4
 8018ec0:	4628      	mov	r0, r5
 8018ec2:	f000 f856 	bl	8018f72 <__smakebuf_r>
 8018ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018eca:	f013 0201 	ands.w	r2, r3, #1
 8018ece:	d00a      	beq.n	8018ee6 <__swsetup_r+0x9a>
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	60a2      	str	r2, [r4, #8]
 8018ed4:	6962      	ldr	r2, [r4, #20]
 8018ed6:	4252      	negs	r2, r2
 8018ed8:	61a2      	str	r2, [r4, #24]
 8018eda:	6922      	ldr	r2, [r4, #16]
 8018edc:	b942      	cbnz	r2, 8018ef0 <__swsetup_r+0xa4>
 8018ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018ee2:	d1c5      	bne.n	8018e70 <__swsetup_r+0x24>
 8018ee4:	bd38      	pop	{r3, r4, r5, pc}
 8018ee6:	0799      	lsls	r1, r3, #30
 8018ee8:	bf58      	it	pl
 8018eea:	6962      	ldrpl	r2, [r4, #20]
 8018eec:	60a2      	str	r2, [r4, #8]
 8018eee:	e7f4      	b.n	8018eda <__swsetup_r+0x8e>
 8018ef0:	2000      	movs	r0, #0
 8018ef2:	e7f7      	b.n	8018ee4 <__swsetup_r+0x98>
 8018ef4:	2000013c 	.word	0x2000013c

08018ef8 <_sbrk_r>:
 8018ef8:	b538      	push	{r3, r4, r5, lr}
 8018efa:	4d06      	ldr	r5, [pc, #24]	@ (8018f14 <_sbrk_r+0x1c>)
 8018efc:	2300      	movs	r3, #0
 8018efe:	4604      	mov	r4, r0
 8018f00:	4608      	mov	r0, r1
 8018f02:	602b      	str	r3, [r5, #0]
 8018f04:	f7e7 ff56 	bl	8000db4 <_sbrk>
 8018f08:	1c43      	adds	r3, r0, #1
 8018f0a:	d102      	bne.n	8018f12 <_sbrk_r+0x1a>
 8018f0c:	682b      	ldr	r3, [r5, #0]
 8018f0e:	b103      	cbz	r3, 8018f12 <_sbrk_r+0x1a>
 8018f10:	6023      	str	r3, [r4, #0]
 8018f12:	bd38      	pop	{r3, r4, r5, pc}
 8018f14:	2000f414 	.word	0x2000f414

08018f18 <abort>:
 8018f18:	b508      	push	{r3, lr}
 8018f1a:	2006      	movs	r0, #6
 8018f1c:	f000 f88e 	bl	801903c <raise>
 8018f20:	2001      	movs	r0, #1
 8018f22:	f7e7 fecf 	bl	8000cc4 <_exit>

08018f26 <__swhatbuf_r>:
 8018f26:	b570      	push	{r4, r5, r6, lr}
 8018f28:	460c      	mov	r4, r1
 8018f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f2e:	2900      	cmp	r1, #0
 8018f30:	b096      	sub	sp, #88	@ 0x58
 8018f32:	4615      	mov	r5, r2
 8018f34:	461e      	mov	r6, r3
 8018f36:	da0d      	bge.n	8018f54 <__swhatbuf_r+0x2e>
 8018f38:	89a3      	ldrh	r3, [r4, #12]
 8018f3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018f3e:	f04f 0100 	mov.w	r1, #0
 8018f42:	bf14      	ite	ne
 8018f44:	2340      	movne	r3, #64	@ 0x40
 8018f46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	6031      	str	r1, [r6, #0]
 8018f4e:	602b      	str	r3, [r5, #0]
 8018f50:	b016      	add	sp, #88	@ 0x58
 8018f52:	bd70      	pop	{r4, r5, r6, pc}
 8018f54:	466a      	mov	r2, sp
 8018f56:	f000 f879 	bl	801904c <_fstat_r>
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	dbec      	blt.n	8018f38 <__swhatbuf_r+0x12>
 8018f5e:	9901      	ldr	r1, [sp, #4]
 8018f60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018f64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018f68:	4259      	negs	r1, r3
 8018f6a:	4159      	adcs	r1, r3
 8018f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018f70:	e7eb      	b.n	8018f4a <__swhatbuf_r+0x24>

08018f72 <__smakebuf_r>:
 8018f72:	898b      	ldrh	r3, [r1, #12]
 8018f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f76:	079d      	lsls	r5, r3, #30
 8018f78:	4606      	mov	r6, r0
 8018f7a:	460c      	mov	r4, r1
 8018f7c:	d507      	bpl.n	8018f8e <__smakebuf_r+0x1c>
 8018f7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018f82:	6023      	str	r3, [r4, #0]
 8018f84:	6123      	str	r3, [r4, #16]
 8018f86:	2301      	movs	r3, #1
 8018f88:	6163      	str	r3, [r4, #20]
 8018f8a:	b003      	add	sp, #12
 8018f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f8e:	ab01      	add	r3, sp, #4
 8018f90:	466a      	mov	r2, sp
 8018f92:	f7ff ffc8 	bl	8018f26 <__swhatbuf_r>
 8018f96:	9f00      	ldr	r7, [sp, #0]
 8018f98:	4605      	mov	r5, r0
 8018f9a:	4639      	mov	r1, r7
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	f7ff fafd 	bl	801859c <_malloc_r>
 8018fa2:	b948      	cbnz	r0, 8018fb8 <__smakebuf_r+0x46>
 8018fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fa8:	059a      	lsls	r2, r3, #22
 8018faa:	d4ee      	bmi.n	8018f8a <__smakebuf_r+0x18>
 8018fac:	f023 0303 	bic.w	r3, r3, #3
 8018fb0:	f043 0302 	orr.w	r3, r3, #2
 8018fb4:	81a3      	strh	r3, [r4, #12]
 8018fb6:	e7e2      	b.n	8018f7e <__smakebuf_r+0xc>
 8018fb8:	89a3      	ldrh	r3, [r4, #12]
 8018fba:	6020      	str	r0, [r4, #0]
 8018fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018fc0:	81a3      	strh	r3, [r4, #12]
 8018fc2:	9b01      	ldr	r3, [sp, #4]
 8018fc4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018fc8:	b15b      	cbz	r3, 8018fe2 <__smakebuf_r+0x70>
 8018fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018fce:	4630      	mov	r0, r6
 8018fd0:	f000 f84e 	bl	8019070 <_isatty_r>
 8018fd4:	b128      	cbz	r0, 8018fe2 <__smakebuf_r+0x70>
 8018fd6:	89a3      	ldrh	r3, [r4, #12]
 8018fd8:	f023 0303 	bic.w	r3, r3, #3
 8018fdc:	f043 0301 	orr.w	r3, r3, #1
 8018fe0:	81a3      	strh	r3, [r4, #12]
 8018fe2:	89a3      	ldrh	r3, [r4, #12]
 8018fe4:	431d      	orrs	r5, r3
 8018fe6:	81a5      	strh	r5, [r4, #12]
 8018fe8:	e7cf      	b.n	8018f8a <__smakebuf_r+0x18>

08018fea <_raise_r>:
 8018fea:	291f      	cmp	r1, #31
 8018fec:	b538      	push	{r3, r4, r5, lr}
 8018fee:	4605      	mov	r5, r0
 8018ff0:	460c      	mov	r4, r1
 8018ff2:	d904      	bls.n	8018ffe <_raise_r+0x14>
 8018ff4:	2316      	movs	r3, #22
 8018ff6:	6003      	str	r3, [r0, #0]
 8018ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8018ffc:	bd38      	pop	{r3, r4, r5, pc}
 8018ffe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019000:	b112      	cbz	r2, 8019008 <_raise_r+0x1e>
 8019002:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019006:	b94b      	cbnz	r3, 801901c <_raise_r+0x32>
 8019008:	4628      	mov	r0, r5
 801900a:	f000 f853 	bl	80190b4 <_getpid_r>
 801900e:	4622      	mov	r2, r4
 8019010:	4601      	mov	r1, r0
 8019012:	4628      	mov	r0, r5
 8019014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019018:	f000 b83a 	b.w	8019090 <_kill_r>
 801901c:	2b01      	cmp	r3, #1
 801901e:	d00a      	beq.n	8019036 <_raise_r+0x4c>
 8019020:	1c59      	adds	r1, r3, #1
 8019022:	d103      	bne.n	801902c <_raise_r+0x42>
 8019024:	2316      	movs	r3, #22
 8019026:	6003      	str	r3, [r0, #0]
 8019028:	2001      	movs	r0, #1
 801902a:	e7e7      	b.n	8018ffc <_raise_r+0x12>
 801902c:	2100      	movs	r1, #0
 801902e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019032:	4620      	mov	r0, r4
 8019034:	4798      	blx	r3
 8019036:	2000      	movs	r0, #0
 8019038:	e7e0      	b.n	8018ffc <_raise_r+0x12>
	...

0801903c <raise>:
 801903c:	4b02      	ldr	r3, [pc, #8]	@ (8019048 <raise+0xc>)
 801903e:	4601      	mov	r1, r0
 8019040:	6818      	ldr	r0, [r3, #0]
 8019042:	f7ff bfd2 	b.w	8018fea <_raise_r>
 8019046:	bf00      	nop
 8019048:	2000013c 	.word	0x2000013c

0801904c <_fstat_r>:
 801904c:	b538      	push	{r3, r4, r5, lr}
 801904e:	4d07      	ldr	r5, [pc, #28]	@ (801906c <_fstat_r+0x20>)
 8019050:	2300      	movs	r3, #0
 8019052:	4604      	mov	r4, r0
 8019054:	4608      	mov	r0, r1
 8019056:	4611      	mov	r1, r2
 8019058:	602b      	str	r3, [r5, #0]
 801905a:	f7e7 fe83 	bl	8000d64 <_fstat>
 801905e:	1c43      	adds	r3, r0, #1
 8019060:	d102      	bne.n	8019068 <_fstat_r+0x1c>
 8019062:	682b      	ldr	r3, [r5, #0]
 8019064:	b103      	cbz	r3, 8019068 <_fstat_r+0x1c>
 8019066:	6023      	str	r3, [r4, #0]
 8019068:	bd38      	pop	{r3, r4, r5, pc}
 801906a:	bf00      	nop
 801906c:	2000f414 	.word	0x2000f414

08019070 <_isatty_r>:
 8019070:	b538      	push	{r3, r4, r5, lr}
 8019072:	4d06      	ldr	r5, [pc, #24]	@ (801908c <_isatty_r+0x1c>)
 8019074:	2300      	movs	r3, #0
 8019076:	4604      	mov	r4, r0
 8019078:	4608      	mov	r0, r1
 801907a:	602b      	str	r3, [r5, #0]
 801907c:	f7e7 fe82 	bl	8000d84 <_isatty>
 8019080:	1c43      	adds	r3, r0, #1
 8019082:	d102      	bne.n	801908a <_isatty_r+0x1a>
 8019084:	682b      	ldr	r3, [r5, #0]
 8019086:	b103      	cbz	r3, 801908a <_isatty_r+0x1a>
 8019088:	6023      	str	r3, [r4, #0]
 801908a:	bd38      	pop	{r3, r4, r5, pc}
 801908c:	2000f414 	.word	0x2000f414

08019090 <_kill_r>:
 8019090:	b538      	push	{r3, r4, r5, lr}
 8019092:	4d07      	ldr	r5, [pc, #28]	@ (80190b0 <_kill_r+0x20>)
 8019094:	2300      	movs	r3, #0
 8019096:	4604      	mov	r4, r0
 8019098:	4608      	mov	r0, r1
 801909a:	4611      	mov	r1, r2
 801909c:	602b      	str	r3, [r5, #0]
 801909e:	f7e7 fdff 	bl	8000ca0 <_kill>
 80190a2:	1c43      	adds	r3, r0, #1
 80190a4:	d102      	bne.n	80190ac <_kill_r+0x1c>
 80190a6:	682b      	ldr	r3, [r5, #0]
 80190a8:	b103      	cbz	r3, 80190ac <_kill_r+0x1c>
 80190aa:	6023      	str	r3, [r4, #0]
 80190ac:	bd38      	pop	{r3, r4, r5, pc}
 80190ae:	bf00      	nop
 80190b0:	2000f414 	.word	0x2000f414

080190b4 <_getpid_r>:
 80190b4:	f7e7 bdec 	b.w	8000c90 <_getpid>

080190b8 <_init>:
 80190b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190ba:	bf00      	nop
 80190bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190be:	bc08      	pop	{r3}
 80190c0:	469e      	mov	lr, r3
 80190c2:	4770      	bx	lr

080190c4 <_fini>:
 80190c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190c6:	bf00      	nop
 80190c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190ca:	bc08      	pop	{r3}
 80190cc:	469e      	mov	lr, r3
 80190ce:	4770      	bx	lr
